{
  "vulnerabilities": [
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
      "alternativeIds": [],
      "creationTime": "2020-07-16T08:19:48.462528Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n[ajv](https://www.npmjs.com/package/ajv) is an Another JSON Schema Validator\n\nAffected versions of this package are vulnerable to Prototype Pollution. A carefully crafted JSON schema could be provided that allows execution of other code by prototype pollution. (While untrusted schemas are recommended against, the worst case of an untrusted schema should be a denial of service, not execution of code.)\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `ajv` to version 6.12.3 or higher.\n## References\n- [HackerOne Report](https://hackerone.com/bugs?subject=user&report_id=894259)\n",
      "disclosureTime": "2020-07-16T08:14:41Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "6.12.3"
      ],
      "id": "SNYK-JS-AJV-584908",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2020-15366"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-07-20T12:40:09.463832Z",
      "moduleName": "ajv",
      "packageManager": "npm",
      "packageName": "ajv",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-07-16T13:58:04Z",
      "references": [
        {
          "title": "HackerOne Report",
          "url": "https://hackerone.com/bugs?subject=user&report_id=894259"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<6.12.3"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "@asyncapi/react-component@0.17.11",
        "@asyncapi/parser@1.3.1",
        "ajv@6.10.2"
      ],
      "upgradePath": [
        false,
        "@asyncapi/react-component@0.17.11",
        "@asyncapi/parser@1.3.1",
        "ajv@6.12.3"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "ajv",
      "version": "6.10.2"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2021-09-09T14:28:31.617043Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) due to the sub-patterns` [[\\\\]()#;?]*` and `(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]*)*`.\r\n\r\n\r\n### PoC\r\n```js\r\nimport ansiRegex from 'ansi-regex';\r\n\r\nfor(var i = 1; i <= 50000; i++) {\r\n    var time = Date.now();\r\n    var attack_str = \"\\u001B[\"+\";\".repeat(i*10000);\r\n    ansiRegex().test(attack_str)\r\n    var time_cost = Date.now() - time;\r\n    console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `ansi-regex` to version 4.1.1, 5.0.1, 6.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/chalk/ansi-regex/commit/75a657da7af875b2e2724fd6331bf0a4b23d3c9a)\n- [GitHub Commit](https://github.com/chalk/ansi-regex/commit/8d1d7cdb586269882c4bdc1b7325d0c58c8f76f9)\n- [GitHub PR](https://github.com/chalk/ansi-regex/pull/37)\n",
      "disclosureTime": "2021-09-09T14:27:43Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.1.1",
        "5.0.1",
        "6.0.1"
      ],
      "id": "SNYK-JS-ANSIREGEX-1583908",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-3807"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-05-13T11:26:51.564118Z",
      "moduleName": "ansi-regex",
      "packageManager": "npm",
      "packageName": "ansi-regex",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-09-12T12:52:37Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/chalk/ansi-regex/commit/75a657da7af875b2e2724fd6331bf0a4b23d3c9a"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/chalk/ansi-regex/commit/8d1d7cdb586269882c4bdc1b7325d0c58c8f76f9"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/chalk/ansi-regex/pull/37"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=2.1.1 <4.1.1",
          ">=5.0.0 <5.0.1",
          ">=6.0.0 <6.0.1"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "openapi-to-postmanv2@1.2.7",
        "oas-resolver-browser@2.3.3",
        "yargs@15.4.1",
        "string-width@4.2.0",
        "strip-ansi@6.0.0",
        "ansi-regex@5.0.0"
      ],
      "upgradePath": [
        false,
        "openapi-to-postmanv2@1.2.7",
        "oas-resolver-browser@2.3.3",
        "yargs@15.4.1",
        "string-width@4.2.0",
        "strip-ansi@6.0.0",
        "ansi-regex@5.0.1"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "ansi-regex",
      "version": "5.0.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2021-09-09T14:28:31.617043Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) due to the sub-patterns` [[\\\\]()#;?]*` and `(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]*)*`.\r\n\r\n\r\n### PoC\r\n```js\r\nimport ansiRegex from 'ansi-regex';\r\n\r\nfor(var i = 1; i <= 50000; i++) {\r\n    var time = Date.now();\r\n    var attack_str = \"\\u001B[\"+\";\".repeat(i*10000);\r\n    ansiRegex().test(attack_str)\r\n    var time_cost = Date.now() - time;\r\n    console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `ansi-regex` to version 4.1.1, 5.0.1, 6.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/chalk/ansi-regex/commit/75a657da7af875b2e2724fd6331bf0a4b23d3c9a)\n- [GitHub Commit](https://github.com/chalk/ansi-regex/commit/8d1d7cdb586269882c4bdc1b7325d0c58c8f76f9)\n- [GitHub PR](https://github.com/chalk/ansi-regex/pull/37)\n",
      "disclosureTime": "2021-09-09T14:27:43Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.1.1",
        "5.0.1",
        "6.0.1"
      ],
      "id": "SNYK-JS-ANSIREGEX-1583908",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-3807"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-05-13T11:26:51.564118Z",
      "moduleName": "ansi-regex",
      "packageManager": "npm",
      "packageName": "ansi-regex",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-09-12T12:52:37Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/chalk/ansi-regex/commit/75a657da7af875b2e2724fd6331bf0a4b23d3c9a"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/chalk/ansi-regex/commit/8d1d7cdb586269882c4bdc1b7325d0c58c8f76f9"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/chalk/ansi-regex/pull/37"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=2.1.1 <4.1.1",
          ">=5.0.0 <5.0.1",
          ">=6.0.0 <6.0.1"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "openapi-to-postmanv2@1.2.7",
        "oas-resolver-browser@2.3.3",
        "yargs@15.4.1",
        "cliui@6.0.0",
        "strip-ansi@6.0.0",
        "ansi-regex@5.0.0"
      ],
      "upgradePath": [
        false,
        "openapi-to-postmanv2@1.2.7",
        "oas-resolver-browser@2.3.3",
        "yargs@15.4.1",
        "cliui@6.0.0",
        "strip-ansi@6.0.0",
        "ansi-regex@5.0.1"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "ansi-regex",
      "version": "5.0.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2021-09-09T14:28:31.617043Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) due to the sub-patterns` [[\\\\]()#;?]*` and `(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]*)*`.\r\n\r\n\r\n### PoC\r\n```js\r\nimport ansiRegex from 'ansi-regex';\r\n\r\nfor(var i = 1; i <= 50000; i++) {\r\n    var time = Date.now();\r\n    var attack_str = \"\\u001B[\"+\";\".repeat(i*10000);\r\n    ansiRegex().test(attack_str)\r\n    var time_cost = Date.now() - time;\r\n    console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `ansi-regex` to version 4.1.1, 5.0.1, 6.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/chalk/ansi-regex/commit/75a657da7af875b2e2724fd6331bf0a4b23d3c9a)\n- [GitHub Commit](https://github.com/chalk/ansi-regex/commit/8d1d7cdb586269882c4bdc1b7325d0c58c8f76f9)\n- [GitHub PR](https://github.com/chalk/ansi-regex/pull/37)\n",
      "disclosureTime": "2021-09-09T14:27:43Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.1.1",
        "5.0.1",
        "6.0.1"
      ],
      "id": "SNYK-JS-ANSIREGEX-1583908",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-3807"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-05-13T11:26:51.564118Z",
      "moduleName": "ansi-regex",
      "packageManager": "npm",
      "packageName": "ansi-regex",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-09-12T12:52:37Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/chalk/ansi-regex/commit/75a657da7af875b2e2724fd6331bf0a4b23d3c9a"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/chalk/ansi-regex/commit/8d1d7cdb586269882c4bdc1b7325d0c58c8f76f9"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/chalk/ansi-regex/pull/37"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=2.1.1 <4.1.1",
          ">=5.0.0 <5.0.1",
          ">=6.0.0 <6.0.1"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "openapi-to-postmanv2@1.2.7",
        "oas-resolver-browser@2.3.3",
        "yargs@15.4.1",
        "cliui@6.0.0",
        "string-width@4.2.0",
        "strip-ansi@6.0.0",
        "ansi-regex@5.0.0"
      ],
      "upgradePath": [
        false,
        "openapi-to-postmanv2@1.2.7",
        "oas-resolver-browser@2.3.3",
        "yargs@15.4.1",
        "cliui@6.0.0",
        "string-width@4.2.0",
        "strip-ansi@6.0.0",
        "ansi-regex@5.0.1"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "ansi-regex",
      "version": "5.0.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2021-09-09T14:28:31.617043Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) due to the sub-patterns` [[\\\\]()#;?]*` and `(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]*)*`.\r\n\r\n\r\n### PoC\r\n```js\r\nimport ansiRegex from 'ansi-regex';\r\n\r\nfor(var i = 1; i <= 50000; i++) {\r\n    var time = Date.now();\r\n    var attack_str = \"\\u001B[\"+\";\".repeat(i*10000);\r\n    ansiRegex().test(attack_str)\r\n    var time_cost = Date.now() - time;\r\n    console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `ansi-regex` to version 4.1.1, 5.0.1, 6.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/chalk/ansi-regex/commit/75a657da7af875b2e2724fd6331bf0a4b23d3c9a)\n- [GitHub Commit](https://github.com/chalk/ansi-regex/commit/8d1d7cdb586269882c4bdc1b7325d0c58c8f76f9)\n- [GitHub PR](https://github.com/chalk/ansi-regex/pull/37)\n",
      "disclosureTime": "2021-09-09T14:27:43Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.1.1",
        "5.0.1",
        "6.0.1"
      ],
      "id": "SNYK-JS-ANSIREGEX-1583908",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-3807"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-05-13T11:26:51.564118Z",
      "moduleName": "ansi-regex",
      "packageManager": "npm",
      "packageName": "ansi-regex",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-09-12T12:52:37Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/chalk/ansi-regex/commit/75a657da7af875b2e2724fd6331bf0a4b23d3c9a"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/chalk/ansi-regex/commit/8d1d7cdb586269882c4bdc1b7325d0c58c8f76f9"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/chalk/ansi-regex/pull/37"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=2.1.1 <4.1.1",
          ">=5.0.0 <5.0.1",
          ">=6.0.0 <6.0.1"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "openapi-to-postmanv2@1.2.7",
        "oas-resolver-browser@2.3.3",
        "yargs@15.4.1",
        "cliui@6.0.0",
        "wrap-ansi@6.2.0",
        "strip-ansi@6.0.0",
        "ansi-regex@5.0.0"
      ],
      "upgradePath": [
        false,
        "openapi-to-postmanv2@1.2.7",
        "oas-resolver-browser@2.3.3",
        "yargs@15.4.1",
        "cliui@6.0.0",
        "wrap-ansi@6.2.0",
        "strip-ansi@6.0.0",
        "ansi-regex@5.0.1"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "ansi-regex",
      "version": "5.0.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2021-09-09T14:28:31.617043Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) due to the sub-patterns` [[\\\\]()#;?]*` and `(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]*)*`.\r\n\r\n\r\n### PoC\r\n```js\r\nimport ansiRegex from 'ansi-regex';\r\n\r\nfor(var i = 1; i <= 50000; i++) {\r\n    var time = Date.now();\r\n    var attack_str = \"\\u001B[\"+\";\".repeat(i*10000);\r\n    ansiRegex().test(attack_str)\r\n    var time_cost = Date.now() - time;\r\n    console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `ansi-regex` to version 4.1.1, 5.0.1, 6.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/chalk/ansi-regex/commit/75a657da7af875b2e2724fd6331bf0a4b23d3c9a)\n- [GitHub Commit](https://github.com/chalk/ansi-regex/commit/8d1d7cdb586269882c4bdc1b7325d0c58c8f76f9)\n- [GitHub PR](https://github.com/chalk/ansi-regex/pull/37)\n",
      "disclosureTime": "2021-09-09T14:27:43Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.1.1",
        "5.0.1",
        "6.0.1"
      ],
      "id": "SNYK-JS-ANSIREGEX-1583908",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-3807"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-05-13T11:26:51.564118Z",
      "moduleName": "ansi-regex",
      "packageManager": "npm",
      "packageName": "ansi-regex",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-09-12T12:52:37Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/chalk/ansi-regex/commit/75a657da7af875b2e2724fd6331bf0a4b23d3c9a"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/chalk/ansi-regex/commit/8d1d7cdb586269882c4bdc1b7325d0c58c8f76f9"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/chalk/ansi-regex/pull/37"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=2.1.1 <4.1.1",
          ">=5.0.0 <5.0.1",
          ">=6.0.0 <6.0.1"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "openapi-to-postmanv2@1.2.7",
        "oas-resolver-browser@2.3.3",
        "yargs@15.4.1",
        "cliui@6.0.0",
        "wrap-ansi@6.2.0",
        "string-width@4.2.0",
        "strip-ansi@6.0.0",
        "ansi-regex@5.0.0"
      ],
      "upgradePath": [
        false,
        "openapi-to-postmanv2@1.2.7",
        "oas-resolver-browser@2.3.3",
        "yargs@15.4.1",
        "cliui@6.0.0",
        "wrap-ansi@6.2.0",
        "string-width@4.2.0",
        "strip-ansi@6.0.0",
        "ansi-regex@5.0.1"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "ansi-regex",
      "version": "5.0.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "alternativeIds": [],
      "creationTime": "2022-04-07T07:58:38.528444Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `mapValues()` method, due to improper check in `createObjectIterator` function.\r\n\r\n## PoC\r\n\r\n```js\r\n//when objects are parsed, all properties are created as own (the objects can come from outside sources (http requests/ file))\r\nconst hasOwn = JSON.parse('{\"__proto__\": {\"isAdmin\": true}}');\r\n\r\n//does not have the property,  because it's inside object's own \"__proto__\"\r\nconsole.log(hasOwn.isAdmin);\r\n\r\nasync.mapValues(hasOwn, (val, key, cb) => cb(null, val), (error, result) => {\r\n  // after the method executes, hasOwn.__proto__ value (isAdmin: true) replaces the prototype of the newly created object, leading to potential exploits.\r\n  console.log(result.isAdmin);\r\n});\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `async` to version 2.6.4, 3.2.2 or higher.\n## References\n- [GitHub Backport PR](https://github.com/caolan/async/pull/1828)\n- [GitHub Commit](https://github.com/caolan/async/commit/8f7f90342a6571ba1c197d747ebed30c368096d2)\n- [GitHub Commit](https://github.com/caolan/async/commit/e1ecdbf79264f9ab488c7799f4c76996d5dca66d)\n- [PoC](https://jsfiddle.net/oz5twjd9/)\n",
      "disclosureTime": "2022-04-07T07:49:24Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "2.6.4",
        "3.2.2"
      ],
      "id": "SNYK-JS-ASYNC-2441827",
      "identifiers": {
        "CWE": [
          "CWE-1321"
        ],
        "CVE": [
          "CVE-2021-43138"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-06-14T08:24:43.116685Z",
      "moduleName": "async",
      "packageManager": "npm",
      "packageName": "async",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-04-07T14:22:18Z",
      "references": [
        {
          "title": "GitHub Backport PR",
          "url": "https://github.com/caolan/async/pull/1828"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/caolan/async/commit/8f7f90342a6571ba1c197d747ebed30c368096d2"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/caolan/async/commit/e1ecdbf79264f9ab488c7799f4c76996d5dca66d"
        },
        {
          "title": "PoC",
          "url": "https://jsfiddle.net/oz5twjd9/"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=2.0.0 <2.6.4",
          ">=3.0.0 <3.2.2"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "openapi-to-postmanv2@1.2.7",
        "async@3.2.0"
      ],
      "upgradePath": [
        false,
        "openapi-to-postmanv2@2.13.0",
        "async@3.2.2"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "async",
      "version": "3.2.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:L/I:L/A:N/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-04-06T09:31:21.580101Z",
      "credit": [
        "rugged_info"
      ],
      "cvssScore": 4.6,
      "description": "## Overview\n[autolinker](https://www.npmjs.com/package/autolinker) is an Utility to Automatically Link URLs, Email Addresses, Phone Numbers, Twitter handles, and Hashtags in a given block of text/HTML.\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS) due to it not sanitizing user input passed to the `innerHTML` tags.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `autolinker` to version 3.14.0 or higher.\n## References\n- [GitHub Commit](https://github.com/gregjacobs/Autolinker.js/commit/f21ea015366cfa62c4e45d4bd117681e82e9b2bf)\n- [GitHub Issue](https://github.com/gregjacobs/Autolinker.js/issues/197)\n- [HackerOne Report](https://hackerone.com/reports/592525)\n- [Sandbox PoC](https://codepen.io/gvas/pen/LYPjRoK)\n",
      "disclosureTime": "2017-07-15T11:32:37Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "3.14.0"
      ],
      "id": "SNYK-JS-AUTOLINKER-564438",
      "identifiers": {
        "CWE": [
          "CWE-79"
        ],
        "CVE": []
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-03-14T11:25:13.601207Z",
      "moduleName": "autolinker",
      "packageManager": "npm",
      "packageName": "autolinker",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2019-12-16T13:46:49Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/gregjacobs/Autolinker.js/commit/f21ea015366cfa62c4e45d4bd117681e82e9b2bf"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/gregjacobs/Autolinker.js/issues/197"
        },
        {
          "title": "HackerOne Report",
          "url": "https://hackerone.com/reports/592525"
        },
        {
          "title": "Sandbox PoC",
          "url": "https://codepen.io/gvas/pen/LYPjRoK"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Cross-site Scripting (XSS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<3.14.0"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger-ui@3.25.0",
        "remarkable@1.7.4",
        "autolinker@0.28.1"
      ],
      "upgradePath": [
        false,
        "swagger-ui@3.26.0",
        "remarkable@2.0.1",
        "autolinker@3.14.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "autolinker",
      "version": "0.28.1"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:N/I:N/A:H",
      "alternativeIds": [],
      "creationTime": "2019-01-10T15:43:20.144029Z",
      "credit": [
        "wheresrhys"
      ],
      "cvssScore": 4.9,
      "description": "## Overview\n[autolinker](https://www.npmjs.com/package/autolinker) is an Utility to Automatically Link URLs, Email Addresses, Phone Numbers, Twitter handles, and Hashtags in a given block of text/HTML.\n\nAffected versions of this package are vulnerable to Denial of Service (DoS) due to an unterminated img src.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `autolinker` to version 3.0.0 or higher.\n## References\n- [GitHub Issue](https://github.com/gregjacobs/Autolinker.js/issues/257)\n",
      "disclosureTime": "2019-01-08T16:51:36Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "3.0.0"
      ],
      "id": "SNYK-JS-AUTOLINKER-73494",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": []
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-12-14T14:41:30.684288Z",
      "moduleName": "autolinker",
      "packageManager": "npm",
      "packageName": "autolinker",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2019-01-10T17:07:27Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/gregjacobs/Autolinker.js/issues/257"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Denial of Service (DoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<3.0.0"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger-ui@3.25.0",
        "remarkable@1.7.4",
        "autolinker@0.28.1"
      ],
      "upgradePath": [
        false,
        "swagger-ui@3.26.0",
        "remarkable@2.0.1",
        "autolinker@3.11.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "autolinker",
      "version": "0.28.1"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:L/I:L/A:N/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-04-06T09:31:21.580101Z",
      "credit": [
        "rugged_info"
      ],
      "cvssScore": 4.6,
      "description": "## Overview\n[autolinker](https://www.npmjs.com/package/autolinker) is an Utility to Automatically Link URLs, Email Addresses, Phone Numbers, Twitter handles, and Hashtags in a given block of text/HTML.\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS) due to it not sanitizing user input passed to the `innerHTML` tags.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `autolinker` to version 3.14.0 or higher.\n## References\n- [GitHub Commit](https://github.com/gregjacobs/Autolinker.js/commit/f21ea015366cfa62c4e45d4bd117681e82e9b2bf)\n- [GitHub Issue](https://github.com/gregjacobs/Autolinker.js/issues/197)\n- [HackerOne Report](https://hackerone.com/reports/592525)\n- [Sandbox PoC](https://codepen.io/gvas/pen/LYPjRoK)\n",
      "disclosureTime": "2017-07-15T11:32:37Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "3.14.0"
      ],
      "id": "SNYK-JS-AUTOLINKER-564438",
      "identifiers": {
        "CWE": [
          "CWE-79"
        ],
        "CVE": []
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-03-14T11:25:13.601207Z",
      "moduleName": "autolinker",
      "packageManager": "npm",
      "packageName": "autolinker",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2019-12-16T13:46:49Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/gregjacobs/Autolinker.js/commit/f21ea015366cfa62c4e45d4bd117681e82e9b2bf"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/gregjacobs/Autolinker.js/issues/197"
        },
        {
          "title": "HackerOne Report",
          "url": "https://hackerone.com/reports/592525"
        },
        {
          "title": "Sandbox PoC",
          "url": "https://codepen.io/gvas/pen/LYPjRoK"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Cross-site Scripting (XSS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<3.14.0"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger-ui-react@3.25.0",
        "remarkable@1.7.4",
        "autolinker@0.28.1"
      ],
      "upgradePath": [
        false,
        "swagger-ui-react@3.26.0",
        "remarkable@2.0.1",
        "autolinker@3.14.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "autolinker",
      "version": "0.28.1"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:N/I:N/A:H",
      "alternativeIds": [],
      "creationTime": "2019-01-10T15:43:20.144029Z",
      "credit": [
        "wheresrhys"
      ],
      "cvssScore": 4.9,
      "description": "## Overview\n[autolinker](https://www.npmjs.com/package/autolinker) is an Utility to Automatically Link URLs, Email Addresses, Phone Numbers, Twitter handles, and Hashtags in a given block of text/HTML.\n\nAffected versions of this package are vulnerable to Denial of Service (DoS) due to an unterminated img src.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `autolinker` to version 3.0.0 or higher.\n## References\n- [GitHub Issue](https://github.com/gregjacobs/Autolinker.js/issues/257)\n",
      "disclosureTime": "2019-01-08T16:51:36Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "3.0.0"
      ],
      "id": "SNYK-JS-AUTOLINKER-73494",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": []
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-12-14T14:41:30.684288Z",
      "moduleName": "autolinker",
      "packageManager": "npm",
      "packageName": "autolinker",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2019-01-10T17:07:27Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/gregjacobs/Autolinker.js/issues/257"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Denial of Service (DoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<3.0.0"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger-ui-react@3.25.0",
        "remarkable@1.7.4",
        "autolinker@0.28.1"
      ],
      "upgradePath": [
        false,
        "swagger-ui-react@3.26.0",
        "remarkable@2.0.1",
        "autolinker@3.11.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "autolinker",
      "version": "0.28.1"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N/E:P",
      "alternativeIds": [],
      "creationTime": "2020-11-08T09:37:44.217120Z",
      "credit": [
        "Dima Ryskin"
      ],
      "cvssScore": 5.9,
      "description": "## Overview\n[axios](https://www.npmjs.com/package/axios) is a promise-based HTTP client for the browser and Node.js.\n\nAffected versions of this package are vulnerable to Server-Side Request Forgery (SSRF). An attacker is able to bypass a proxy by providing a URL that responds with a redirect to a restricted host or IP address.\n## Remediation\nUpgrade `axios` to version 0.21.1 or higher.\n## References\n- [GitHub Commit](https://github.com/axios/axios/commit/c7329fefc890050edd51e40e469a154d0117fc55)\n- [GitHub Issue](https://github.com/axios/axios/issues/3369)\n- [GitHub Security Advisory](https://github.com/advisories/GHSA-4w2v-q235-vp99)\n- [NPM Advisory](https://www.npmjs.com/advisories/1594)\n",
      "disclosureTime": "2020-11-06T09:16:00Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "0.21.1"
      ],
      "id": "SNYK-JS-AXIOS-1038255",
      "identifiers": {
        "CWE": [
          "CWE-918"
        ],
        "NSP": [
          "NSP-1594"
        ],
        "CVE": [
          "CVE-2020-28168"
        ],
        "GHSA": [
          "GHSA-4w2v-q235-vp99"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-05-12T14:07:20.788739Z",
      "moduleName": "axios",
      "packageManager": "npm",
      "packageName": "axios",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-11-08T15:07:03Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/axios/axios/commit/c7329fefc890050edd51e40e469a154d0117fc55"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/axios/axios/issues/3369"
        },
        {
          "title": "GitHub Security Advisory",
          "url": "https://github.com/advisories/GHSA-4w2v-q235-vp99"
        },
        {
          "title": "NPM Advisory",
          "url": "https://www.npmjs.com/advisories/1594"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Server-Side Request Forgery (SSRF)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<0.21.1"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "axios@0.19.1"
      ],
      "upgradePath": [
        false,
        "axios@0.21.1"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "axios",
      "version": "0.19.1"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "alternativeIds": [],
      "creationTime": "2021-09-01T10:21:55.102099Z",
      "credit": [
        "ready-research"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n[axios](https://www.npmjs.com/package/axios) is a promise-based HTTP client for the browser and Node.js.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim` function.\r\n\r\n## PoC\r\n```\r\n// poc.js\r\n\r\nvar {trim} = require(\"axios/lib/utils\");\r\n\r\nfunction build_blank (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\n\r\nvar time = Date.now();\r\ntrim(build_blank(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `axios` to version 0.21.3 or higher.\n## References\n- [GitHub Commit](https://github.com/axios/axios/commit/5b457116e31db0e88fede6c428e969e87f290929)\n",
      "disclosureTime": "2021-09-01T10:17:45Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "0.21.3"
      ],
      "id": "SNYK-JS-AXIOS-1579269",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-3749"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-22T15:25:03.056522Z",
      "moduleName": "axios",
      "packageManager": "npm",
      "packageName": "axios",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-09-01T16:08:42.935317Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/axios/axios/commit/5b457116e31db0e88fede6c428e969e87f290929"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<0.21.3"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "axios@0.19.1"
      ],
      "upgradePath": [
        false,
        "axios@0.21.3"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "axios",
      "version": "0.19.1"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N/E:P",
      "alternativeIds": [],
      "creationTime": "2022-01-13T16:19:10.956384Z",
      "credit": [
        "Bob \"Wombat\" Hogg"
      ],
      "cvssScore": 5.4,
      "description": "## Overview\n[@braintree/sanitize-url](https://www.npmjs.org/package/@braintree/sanitize-url) is an A url sanitizer\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS) due to improper sanitization in `sanitizeUrl` function.\r\n\r\n## PoC:\r\n\r\n```js\r\nconst sanitizeUrl = require(\"@braintree/sanitize-url\").sanitizeUrl\r\n\r\n\r\nfor(const vector of [ \"&#0000106&#0000097&#0000118&#0000097&#0000115&#0000099&#0000114&#0000105&#0000112&#0000116&#0000058&#0000097&#0000108&#0000101&#0000114&#0000116&#0000040&#0000039&#0000088&#0000083&#0000083&#0000039&#0000041\",\r\n\"javascript:alert('XSS')\",\r\n\"&#0000106&#0000097&#0000118&#0000097&#0000115&#0000099&#0000114&#0000105&#0000112&#0000116&#0000058&#0000097&#0000108&#0000101&#0000114&#0000116&#0000040&#0000039&#0000088&#0000083&#0000083&#0000039&#0000041\",\r\n\"&#x6A&#x61&#x76&#x61&#x73&#x63&#x72&#x69&#x70&#x74&#x3A&#x61&#x6C&#x65&#x72&#x74&#x28&#x27&#x58&#x53&#x53&#x27&#x29\",\r\n\"jav ascript:alert('XSS');\",\r\n\" &#14; javascript:alert('XSS');\"\r\n]) {\r\nconsole.log(sanitizeUrl(vector))\r\n}\r\n\r\n```\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `@braintree/sanitize-url` to version 6.0.0 or higher.\n## References\n- [GitHub Commit](https://github.com/braintree/sanitize-url/pull/40/commits/e5afda45d9833682b705f73fc2c1265d34832183)\n- [GitHub PR](https://github.com/braintree/sanitize-url/pull/40)\n- [Vulnerable Code](https://github.com/braintree/sanitize-url/blob/main/src/index.ts#L11)\n",
      "disclosureTime": "2022-01-13T16:13:00Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "6.0.0"
      ],
      "id": "SNYK-JS-BRAINTREESANITIZEURL-2339882",
      "identifiers": {
        "CWE": [
          "CWE-79"
        ],
        "CVE": [
          "CVE-2021-23648"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-03-07T16:39:50.132701Z",
      "moduleName": "@braintree/sanitize-url",
      "packageManager": "npm",
      "packageName": "@braintree/sanitize-url",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2022-03-07T16:39:50.131102Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/braintree/sanitize-url/pull/40/commits/e5afda45d9833682b705f73fc2c1265d34832183"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/braintree/sanitize-url/pull/40"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/braintree/sanitize-url/blob/main/src/index.ts%23L11"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Cross-site Scripting (XSS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<6.0.0"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger-ui@3.25.0",
        "@braintree/sanitize-url@3.1.0"
      ],
      "upgradePath": [
        false,
        "swagger-ui@4.7.0",
        "@braintree/sanitize-url@6.0.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "@braintree/sanitize-url",
      "version": "3.1.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N/E:P",
      "alternativeIds": [],
      "creationTime": "2022-01-13T16:19:10.956384Z",
      "credit": [
        "Bob \"Wombat\" Hogg"
      ],
      "cvssScore": 5.4,
      "description": "## Overview\n[@braintree/sanitize-url](https://www.npmjs.org/package/@braintree/sanitize-url) is an A url sanitizer\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS) due to improper sanitization in `sanitizeUrl` function.\r\n\r\n## PoC:\r\n\r\n```js\r\nconst sanitizeUrl = require(\"@braintree/sanitize-url\").sanitizeUrl\r\n\r\n\r\nfor(const vector of [ \"&#0000106&#0000097&#0000118&#0000097&#0000115&#0000099&#0000114&#0000105&#0000112&#0000116&#0000058&#0000097&#0000108&#0000101&#0000114&#0000116&#0000040&#0000039&#0000088&#0000083&#0000083&#0000039&#0000041\",\r\n\"javascript:alert('XSS')\",\r\n\"&#0000106&#0000097&#0000118&#0000097&#0000115&#0000099&#0000114&#0000105&#0000112&#0000116&#0000058&#0000097&#0000108&#0000101&#0000114&#0000116&#0000040&#0000039&#0000088&#0000083&#0000083&#0000039&#0000041\",\r\n\"&#x6A&#x61&#x76&#x61&#x73&#x63&#x72&#x69&#x70&#x74&#x3A&#x61&#x6C&#x65&#x72&#x74&#x28&#x27&#x58&#x53&#x53&#x27&#x29\",\r\n\"jav ascript:alert('XSS');\",\r\n\" &#14; javascript:alert('XSS');\"\r\n]) {\r\nconsole.log(sanitizeUrl(vector))\r\n}\r\n\r\n```\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `@braintree/sanitize-url` to version 6.0.0 or higher.\n## References\n- [GitHub Commit](https://github.com/braintree/sanitize-url/pull/40/commits/e5afda45d9833682b705f73fc2c1265d34832183)\n- [GitHub PR](https://github.com/braintree/sanitize-url/pull/40)\n- [Vulnerable Code](https://github.com/braintree/sanitize-url/blob/main/src/index.ts#L11)\n",
      "disclosureTime": "2022-01-13T16:13:00Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "6.0.0"
      ],
      "id": "SNYK-JS-BRAINTREESANITIZEURL-2339882",
      "identifiers": {
        "CWE": [
          "CWE-79"
        ],
        "CVE": [
          "CVE-2021-23648"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-03-07T16:39:50.132701Z",
      "moduleName": "@braintree/sanitize-url",
      "packageManager": "npm",
      "packageName": "@braintree/sanitize-url",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2022-03-07T16:39:50.131102Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/braintree/sanitize-url/pull/40/commits/e5afda45d9833682b705f73fc2c1265d34832183"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/braintree/sanitize-url/pull/40"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/braintree/sanitize-url/blob/main/src/index.ts%23L11"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Cross-site Scripting (XSS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<6.0.0"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger-ui-react@3.25.0",
        "@braintree/sanitize-url@3.1.0"
      ],
      "upgradePath": [
        false,
        "swagger-ui-react@4.7.0",
        "@braintree/sanitize-url@6.0.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "@braintree/sanitize-url",
      "version": "3.1.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-01T13:30:25.617926Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[browserslist](https://www.npmjs.org/package/browserslist) is a Share target browsers between different front-end tools, like Autoprefixer, Stylelint and babel-env-preset\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) during parsing of queries.\r\n\r\n### PoC by Yeting Li\r\n```\r\nvar browserslist = require(\"browserslist\")\r\nfunction build_attack(n) {\r\n    var ret = \"> \"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"1\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// browserslist('> 1%')\r\n\r\n//browserslist(build_attack(500000))\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            browserslist(attack_str);\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `browserslist` to version 4.16.5 or higher.\n## References\n- [GitHub Commit](https://github.com/browserslist/browserslist/commit/c091916910dfe0b5fd61caad96083c6709b02d98)\n- [GitHub PR](https://github.com/browserslist/browserslist/pull/593)\n- [Vulnerable Regular Expression](https://github.com/browserslist/browserslist/blob/e82f32d1d4100d6bc79ea0b6b6a2d281a561e33c/index.js#L472-L474)\n",
      "disclosureTime": "2021-04-01T13:19:27Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.16.5"
      ],
      "id": "SNYK-JS-BROWSERSLIST-1090194",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w8qv-6jwh-64r5"
        ],
        "CVE": [
          "CVE-2021-23364"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-05-16T13:18:31.649076Z",
      "moduleName": "browserslist",
      "packageManager": "npm",
      "packageName": "browserslist",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-28T15:14:31Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/browserslist/browserslist/commit/c091916910dfe0b5fd61caad96083c6709b02d98"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/browserslist/browserslist/pull/593"
        },
        {
          "title": "Vulnerable Regular Expression",
          "url": "https://github.com/browserslist/browserslist/blob/e82f32d1d4100d6bc79ea0b6b6a2d281a561e33c/index.js%23L472-L474"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.16.5"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "caniuse-api@1.6.1",
        "browserslist@1.7.7"
      ],
      "upgradePath": [
        false,
        "caniuse-api@3.0.0",
        "browserslist@4.16.5"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "browserslist",
      "version": "1.7.7"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-10-09T15:19:25.148622Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[codemirror](https://www.npmjs.com/package/codemirror) is a versatile text editor implemented in JavaScript for the browser.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). The vulnerable regular expression is located in https://github.com/codemirror/CodeMirror/blob/cdb228ac736369c685865b122b736cd0d397836c/mode/javascript/javascript.js#L129. The ReDOS vulnerability of the regex is mainly due to the sub-pattern `(\\s|/\\*.*?\\*/)*`\r\n\r\n## PoC by Yeting Li\r\n\r\n```js\r\nvar value = \"async/**//*/**//*/**//*/**//*/**//*/**//*/**//*/**//*/**//*/**//*/**//*/**//*\r\n/**//*/**//*/**//*/**//*/**//*/**//*/**//*/**//*/**//*/**//*/**//*/**//*/**//*/**//*/**//*\r\n/**//*/**//*/**//*/**//*/**//*/**//*/**//*/**//*/**//*/**//*/**//*/**//*/**//*!\"\r\nvar editor = CodeMirror(document.body.getElementsByTagName(\"article\")[0], {\r\nvalue: value,\r\nlineNumbers: true,\r\nmode: \"javascript\",\r\nkeyMap: \"sublime\",\r\nautoCloseBrackets: true,\r\nmatchBrackets: true,\r\nshowCursorWhenSelecting: true,\r\ntheme: \"monokai\",\r\ntabSize: 2\r\n});\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `codemirror` to version 5.58.2 or higher.\n## References\n- [GitHub Commit](https://github.com/codemirror/CodeMirror/commit/55d0333907117c9231ffdf555ae8824705993bbb)\n",
      "disclosureTime": "2020-10-09T15:16:53Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "5.58.2"
      ],
      "id": "SNYK-JS-CODEMIRROR-1016937",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-4gw3-8f77-f72c"
        ],
        "CVE": [
          "CVE-2020-7760"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-06-07T13:58:29.019730Z",
      "moduleName": "codemirror",
      "packageManager": "npm",
      "packageName": "codemirror",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2020-10-30T15:07:02Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/codemirror/CodeMirror/commit/55d0333907117c9231ffdf555ae8824705993bbb"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<5.58.2"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "graphiql@0.17.5",
        "codemirror@5.52.0"
      ],
      "upgradePath": [
        false,
        "graphiql@0.17.5",
        "codemirror@5.58.2"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "codemirror",
      "version": "5.52.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L/E:U/RL:O/RC:R",
      "alternativeIds": [],
      "creationTime": "2020-05-19T09:53:31.970824Z",
      "credit": [
        "ajinabraham"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\n[codemirror](https://www.npmjs.com/package/codemirror) is a versatile text editor implemented in JavaScript for the browser.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). [This regex](https://github.com/codemirror/CodeMirror/blob/master/mode/javascript/javascript.js#L461)\r\n `cx.stream.match(/^([^>]|<.*?>)*>\\s*\\(/, false)` is vulnerable to catastrophic backtracking and can result in regular expression dos.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `codemirror` to version 5.54.0 or higher.\n## References\n- [GitHub Commit](https://github.com/codemirror/CodeMirror/commit/890cb6bea3e73118d69f4e279da1dff57d7e4627)\n- [GitHub Issue](https://github.com/codemirror/CodeMirror/issues/6273)\n",
      "disclosureTime": "2020-05-14T16:24:20Z",
      "exploit": "Unproven",
      "functions": [],
      "fixedIn": [
        "5.54.0"
      ],
      "id": "SNYK-JS-CODEMIRROR-569611",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": []
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-03-19T10:03:41.823447Z",
      "moduleName": "codemirror",
      "packageManager": "npm",
      "packageName": "codemirror",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-05-28T14:28:17Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/codemirror/CodeMirror/commit/890cb6bea3e73118d69f4e279da1dff57d7e4627"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/codemirror/CodeMirror/issues/6273"
        }
      ],
      "severity": "low",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<5.54.0"
        ]
      },
      "severityWithCritical": "low",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "graphiql@0.17.5",
        "codemirror@5.52.0"
      ],
      "upgradePath": [
        false,
        "graphiql@0.17.5",
        "codemirror@5.54.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "codemirror",
      "version": "5.52.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [],
      "creationTime": "2021-05-30T09:26:40.480408Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[css-what](https://www.npmjs.org/package/css-what) is an a CSS selector parser\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via attribute parsing.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `css-what` to version 5.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/fb55/css-what/commit/4cdaacfd0d4b6fd00614be030da0dea6c2994655)\n- [GitHub PR](https://github.com/fb55/css-what/pull/503)\n- [GitHub Release](https://github.com/fb55/css-what/releases/tag/v5.0.1)\n",
      "disclosureTime": "2021-05-30T09:19:01Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "5.0.1"
      ],
      "id": "SNYK-JS-CSSWHAT-1298035",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-q8pj-2vqx-8ggc"
        ],
        "CVE": [
          "CVE-2021-33587"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-07-06T14:08:59.787603Z",
      "moduleName": "css-what",
      "packageManager": "npm",
      "packageName": "css-what",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-05-30T13:11:01.486283Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/fb55/css-what/commit/4cdaacfd0d4b6fd00614be030da0dea6c2994655"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/fb55/css-what/pull/503"
        },
        {
          "title": "GitHub Release",
          "url": "https://github.com/fb55/css-what/releases/tag/v5.0.1"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<5.0.1"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "react-safe-html@0.6.1",
        "cheerio@0.22.0",
        "css-select@1.2.0",
        "css-what@2.1.3"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "css-what",
      "version": "2.1.3"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-10-08T07:47:24.594794Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 5.6,
      "description": "## Overview\n[dompurify](https://github.com/cure53/DOMPurify) is a DOM-only XSS sanitizer for HTML, MathML and SVG.\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS). This occurs because a `serialize-parse` roundtrip does not necessarily return the original DOM tree, and a namespace can change from HTML to MathML, as demonstrated by nesting of FORM elements.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `dompurify` to version 2.0.17 or higher.\n## References\n- [GitHub Commit](https://github.com/cure53/DOMPurify/commit/02724b8eb048dd219d6725b05c3000936f11d62d)\n- [Research Post](https://research.securitum.com/mutation-xss-via-mathml-mutation-dompurify-2-0-17-bypass/)\n",
      "disclosureTime": "2020-10-08T07:43:43Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "2.0.17"
      ],
      "id": "SNYK-JS-DOMPURIFY-1016634",
      "identifiers": {
        "CWE": [
          "CWE-79"
        ],
        "NSP": [
          "1591"
        ],
        "CVE": [
          "CVE-2020-26870"
        ],
        "GHSA": [
          "GHSA-63q7-h895-m982"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-12-23T13:31:15.907244Z",
      "moduleName": "dompurify",
      "packageManager": "npm",
      "packageName": "dompurify",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-10-08T16:37:46Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/cure53/DOMPurify/commit/02724b8eb048dd219d6725b05c3000936f11d62d"
        },
        {
          "title": "Research Post",
          "url": "https://research.securitum.com/mutation-xss-via-mathml-mutation-dompurify-2-0-17-bypass/"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Cross-site Scripting (XSS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<2.0.17"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger-ui@3.25.0",
        "dompurify@2.0.8"
      ],
      "upgradePath": [
        false,
        "swagger-ui@3.25.0",
        "dompurify@2.0.17"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "dompurify",
      "version": "2.0.8"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N",
      "alternativeIds": [],
      "creationTime": "2020-11-03T16:24:10.541266Z",
      "credit": [
        "bananabr"
      ],
      "cvssScore": 6.5,
      "description": "## Overview\n[dompurify](https://github.com/cure53/DOMPurify) is a DOM-only XSS sanitizer for HTML, MathML and SVG.\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS) when converting from SVG namespace.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `dompurify` to version 2.2.2 or higher.\n## References\n- [GitHub Issue](https://github.com/cure53/DOMPurify/issues/482)\n",
      "disclosureTime": "2020-11-03T16:21:00Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "2.2.2"
      ],
      "id": "SNYK-JS-DOMPURIFY-1035544",
      "identifiers": {
        "CWE": [
          "CWE-79"
        ],
        "CVE": []
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-12-23T12:43:18.965176Z",
      "moduleName": "dompurify",
      "packageManager": "npm",
      "packageName": "dompurify",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-11-03T16:51:43Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/cure53/DOMPurify/issues/482"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Cross-site Scripting (XSS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<2.2.2"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger-ui@3.25.0",
        "dompurify@2.0.8"
      ],
      "upgradePath": [
        false,
        "swagger-ui@3.25.0",
        "dompurify@2.2.2"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "dompurify",
      "version": "2.0.8"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N",
      "alternativeIds": [],
      "creationTime": "2022-06-08T14:54:28.100940Z",
      "credit": [
        "PewGrand"
      ],
      "cvssScore": 6.5,
      "description": "## Overview\n[dompurify](https://github.com/cure53/DOMPurify) is a DOM-only XSS sanitizer for HTML, MathML and SVG.\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS). This is due to a bypass of a previous [XSS vulnerability](https://security.snyk.io/vuln/SNYK-JS-DOMPURIFY-1035544).\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `dompurify` to version 2.2.3 or higher.\n## References\n- [Blog](https://www.vidocsecurity.com/blog/hacking-swagger-ui-from-xss-to-account-takeovers/)\n- [Github Commit](https://github.com/cure53/DOMPurify/commit/0c2edeaef6aefe6cbf5c51a0164235e6953afa16)\n- [Github Releases](https://github.com/cure53/DOMPurify/releases/tag/2.2.3)\n",
      "disclosureTime": "2022-06-08T14:53:31Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "2.2.3"
      ],
      "id": "SNYK-JS-DOMPURIFY-2863266",
      "identifiers": {
        "CWE": [
          "CWE-79"
        ],
        "CVE": []
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-06-08T15:31:20.536648Z",
      "moduleName": "dompurify",
      "packageManager": "npm",
      "packageName": "dompurify",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-06-08T15:31:20.534786Z",
      "references": [
        {
          "title": "Blog",
          "url": "https://www.vidocsecurity.com/blog/hacking-swagger-ui-from-xss-to-account-takeovers/"
        },
        {
          "title": "Github Commit",
          "url": "https://github.com/cure53/DOMPurify/commit/0c2edeaef6aefe6cbf5c51a0164235e6953afa16"
        },
        {
          "title": "Github Releases",
          "url": "https://github.com/cure53/DOMPurify/releases/tag/2.2.3"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Cross-site Scripting (XSS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<2.2.3"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger-ui@3.25.0",
        "dompurify@2.0.8"
      ],
      "upgradePath": [
        false,
        "swagger-ui@3.25.0",
        "dompurify@2.2.3"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "dompurify",
      "version": "2.0.8"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-10-08T07:47:24.594794Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 5.6,
      "description": "## Overview\n[dompurify](https://github.com/cure53/DOMPurify) is a DOM-only XSS sanitizer for HTML, MathML and SVG.\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS). This occurs because a `serialize-parse` roundtrip does not necessarily return the original DOM tree, and a namespace can change from HTML to MathML, as demonstrated by nesting of FORM elements.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `dompurify` to version 2.0.17 or higher.\n## References\n- [GitHub Commit](https://github.com/cure53/DOMPurify/commit/02724b8eb048dd219d6725b05c3000936f11d62d)\n- [Research Post](https://research.securitum.com/mutation-xss-via-mathml-mutation-dompurify-2-0-17-bypass/)\n",
      "disclosureTime": "2020-10-08T07:43:43Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "2.0.17"
      ],
      "id": "SNYK-JS-DOMPURIFY-1016634",
      "identifiers": {
        "CWE": [
          "CWE-79"
        ],
        "NSP": [
          "1591"
        ],
        "CVE": [
          "CVE-2020-26870"
        ],
        "GHSA": [
          "GHSA-63q7-h895-m982"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-12-23T13:31:15.907244Z",
      "moduleName": "dompurify",
      "packageManager": "npm",
      "packageName": "dompurify",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-10-08T16:37:46Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/cure53/DOMPurify/commit/02724b8eb048dd219d6725b05c3000936f11d62d"
        },
        {
          "title": "Research Post",
          "url": "https://research.securitum.com/mutation-xss-via-mathml-mutation-dompurify-2-0-17-bypass/"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Cross-site Scripting (XSS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<2.0.17"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger-ui-react@3.25.0",
        "dompurify@2.0.8"
      ],
      "upgradePath": [
        false,
        "swagger-ui-react@3.25.0",
        "dompurify@2.0.17"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "dompurify",
      "version": "2.0.8"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N",
      "alternativeIds": [],
      "creationTime": "2020-11-03T16:24:10.541266Z",
      "credit": [
        "bananabr"
      ],
      "cvssScore": 6.5,
      "description": "## Overview\n[dompurify](https://github.com/cure53/DOMPurify) is a DOM-only XSS sanitizer for HTML, MathML and SVG.\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS) when converting from SVG namespace.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `dompurify` to version 2.2.2 or higher.\n## References\n- [GitHub Issue](https://github.com/cure53/DOMPurify/issues/482)\n",
      "disclosureTime": "2020-11-03T16:21:00Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "2.2.2"
      ],
      "id": "SNYK-JS-DOMPURIFY-1035544",
      "identifiers": {
        "CWE": [
          "CWE-79"
        ],
        "CVE": []
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-12-23T12:43:18.965176Z",
      "moduleName": "dompurify",
      "packageManager": "npm",
      "packageName": "dompurify",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-11-03T16:51:43Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/cure53/DOMPurify/issues/482"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Cross-site Scripting (XSS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<2.2.2"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger-ui-react@3.25.0",
        "dompurify@2.0.8"
      ],
      "upgradePath": [
        false,
        "swagger-ui-react@3.25.0",
        "dompurify@2.2.2"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "dompurify",
      "version": "2.0.8"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N",
      "alternativeIds": [],
      "creationTime": "2022-06-08T14:54:28.100940Z",
      "credit": [
        "PewGrand"
      ],
      "cvssScore": 6.5,
      "description": "## Overview\n[dompurify](https://github.com/cure53/DOMPurify) is a DOM-only XSS sanitizer for HTML, MathML and SVG.\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS). This is due to a bypass of a previous [XSS vulnerability](https://security.snyk.io/vuln/SNYK-JS-DOMPURIFY-1035544).\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `dompurify` to version 2.2.3 or higher.\n## References\n- [Blog](https://www.vidocsecurity.com/blog/hacking-swagger-ui-from-xss-to-account-takeovers/)\n- [Github Commit](https://github.com/cure53/DOMPurify/commit/0c2edeaef6aefe6cbf5c51a0164235e6953afa16)\n- [Github Releases](https://github.com/cure53/DOMPurify/releases/tag/2.2.3)\n",
      "disclosureTime": "2022-06-08T14:53:31Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "2.2.3"
      ],
      "id": "SNYK-JS-DOMPURIFY-2863266",
      "identifiers": {
        "CWE": [
          "CWE-79"
        ],
        "CVE": []
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-06-08T15:31:20.536648Z",
      "moduleName": "dompurify",
      "packageManager": "npm",
      "packageName": "dompurify",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-06-08T15:31:20.534786Z",
      "references": [
        {
          "title": "Blog",
          "url": "https://www.vidocsecurity.com/blog/hacking-swagger-ui-from-xss-to-account-takeovers/"
        },
        {
          "title": "Github Commit",
          "url": "https://github.com/cure53/DOMPurify/commit/0c2edeaef6aefe6cbf5c51a0164235e6953afa16"
        },
        {
          "title": "Github Releases",
          "url": "https://github.com/cure53/DOMPurify/releases/tag/2.2.3"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Cross-site Scripting (XSS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<2.2.3"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger-ui-react@3.25.0",
        "dompurify@2.0.8"
      ],
      "upgradePath": [
        false,
        "swagger-ui-react@3.25.0",
        "dompurify@2.2.3"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "dompurify",
      "version": "2.0.8"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:N/A:N/E:P",
      "alternativeIds": [],
      "creationTime": "2022-01-11T12:27:16.635235Z",
      "credit": [
        "ranjit-git"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Information Exposure by leaking the cookie header to a third party site in the process of fetching a remote URL with the cookie in the request body. If the response contains a `location` header, it will follow the redirect to another URL of a potentially malicious actor, to which the cookie would be exposed.\n## Remediation\nUpgrade `follow-redirects` to version 1.14.7 or higher.\n## References\n- [GitHub Commit](https://github.com/follow-redirects/follow-redirects/commit/8b347cbcef7c7b72a6e9be20f5710c17d6163c22)\n",
      "disclosureTime": "2022-01-11T12:06:36Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "1.14.7"
      ],
      "id": "SNYK-JS-FOLLOWREDIRECTS-2332181",
      "identifiers": {
        "CWE": [
          "CWE-359"
        ],
        "CVE": [
          "CVE-2022-0155"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-01-12T12:49:36.151110Z",
      "moduleName": "follow-redirects",
      "packageManager": "npm",
      "packageName": "follow-redirects",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-01-12T12:49:36.149349Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/follow-redirects/follow-redirects/commit/8b347cbcef7c7b72a6e9be20f5710c17d6163c22"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Information Exposure",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<1.14.7"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "axios@0.19.1",
        "follow-redirects@1.5.10"
      ],
      "upgradePath": [
        false,
        "axios@0.20.0",
        "follow-redirects@1.14.7"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "follow-redirects",
      "version": "1.5.10"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:A/AC:H/PR:L/UI:N/S:U/C:L/I:N/A:N",
      "alternativeIds": [],
      "creationTime": "2022-02-09T13:37:15.331538Z",
      "credit": [
        "haxatron"
      ],
      "cvssScore": 2.6,
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Information Exposure due a leakage of the Authorization header from the same hostname during HTTPS to HTTP redirection. An attacker who can listen in on the wire (or perform a MITM attack) will be able to receive the Authorization header due to the usage of the insecure HTTP protocol which does not verify the hostname the request is sending to.\n## Remediation\nUpgrade `follow-redirects` to version 1.14.8 or higher.\n## References\n- [GitHub Commit](https://github.com/follow-redirects/follow-redirects/commit/62e546a99c07c3ee5e4e0718c84a6ca127c5c445)\n",
      "disclosureTime": "2022-02-09T12:43:30Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "1.14.8"
      ],
      "id": "SNYK-JS-FOLLOWREDIRECTS-2396346",
      "identifiers": {
        "CWE": [
          "CWE-200"
        ],
        "CVE": [
          "CVE-2022-0536"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-02-09T17:20:22.056440Z",
      "moduleName": "follow-redirects",
      "packageManager": "npm",
      "packageName": "follow-redirects",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-02-09T17:20:22.054220Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/follow-redirects/follow-redirects/commit/62e546a99c07c3ee5e4e0718c84a6ca127c5c445"
        }
      ],
      "severity": "low",
      "socialTrendAlert": false,
      "title": "Information Exposure",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<1.14.8"
        ]
      },
      "severityWithCritical": "low",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "axios@0.19.1",
        "follow-redirects@1.5.10"
      ],
      "upgradePath": [
        false,
        "axios@0.20.0",
        "follow-redirects@1.14.8"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "follow-redirects",
      "version": "1.5.10"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:H/A:L",
      "alternativeIds": [],
      "creationTime": "2021-11-05T18:28:51.373013Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 7.1,
      "description": "## Overview\n[graphiql](https://www.npmjs.org/package/graphiql) is a graphical interactive in-browser GraphQL IDE.\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS). This package is vulnerable to compromised HTTP schema introspection responses or schema prop values with malicious GraphQL type names, exposing a dynamic XSS attack surface that can allow code injection on operation autocomplete. In order for the attack to take place, the user must load a vulnerable schema in `graphiql`. There are a number of ways that can occur. \r\n\r\nBy default, the schema URL is not attacker-controllable in `graphiql` or in its suggested implementations or examples, leaving only very complex attack vectors. If a custom implementation of `graphiql`'s fetcher allows the schema URL to be set dynamically, such as a URL query parameter like `?endpoint= in graphql-playground`, or a database provided value, then this custom `graphiql` implementation is vulnerable to phishing attacks, and thus much more readily available, low or no privilege level XSS attacks. The URLs could look like any generic looking graphql schema URL. \r\n\r\nIt should be noted that desktop clients such as Altair, Insomnia, Postwoman, do not appear to be impacted by this. This vulnerability does not impact codemirror-graphql, monaco-graphql or other dependents, as it exists in `onHasCompletion.ts` in graphiql. It does impact all forks of graphiql, and every released version of graphiql.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `graphiql` to version 1.4.7 or higher.\n## References\n- [GitHub Commit](https://github.com/graphql/graphiql/commit/cb237eeeaf7333c4954c752122261db7520f7bf4)\n",
      "disclosureTime": "2021-11-05T18:24:27Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "1.4.7"
      ],
      "id": "SNYK-JS-GRAPHIQL-1912088",
      "identifiers": {
        "CWE": [
          "CWE-79"
        ],
        "GHSA": [
          "GHSA-x4r7-m2q9-69c8",
          "GHSA-59r9-6jp6-jcm7"
        ],
        "CVE": [
          "CVE-2021-41248"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-11-10T16:49:42.015712Z",
      "moduleName": "graphiql",
      "packageManager": "npm",
      "packageName": "graphiql",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-11-05T18:29:13Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/graphql/graphiql/commit/cb237eeeaf7333c4954c752122261db7520f7bf4"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Cross-site Scripting (XSS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=0.5.0 <1.4.7"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "graphiql@0.17.5"
      ],
      "upgradePath": [
        false,
        "graphiql@1.4.7"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "graphiql",
      "version": "0.17.5"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:L/I:L/A:L/E:U/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-02-11T08:14:56.161770Z",
      "credit": [
        "Oh Ho Kyun"
      ],
      "cvssScore": 5,
      "description": "## Overview\n[@hapi/hoek](https://www.npmjs.com/package/@hapi/hoek) is an utility methods package for the hapi ecosystem\n\nAffected versions of this package are vulnerable to Prototype Pollution. The `clone` function fails to prevent the modification of the Object prototype when passed specially-crafted input.\r\n\r\n*Note:* This issue does not affect `hapi` applications since the framework protects against such malicious inputs. Only applications that use `@hapi/hoek` outside of the `hapi` ecosystem may be vulnerable.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `@hapi/hoek` to version 8.5.1, 9.0.3 or higher.\n## References\n- [GitHub Commit](https://github.com/hapijs/hoek/commit/948baf98634a5c206875b67d11368f133034fa90)\n- [GitHub Issue](https://github.com/hapijs/hoek/issues/352)\n",
      "disclosureTime": "2020-02-10T18:20:22Z",
      "exploit": "Unproven",
      "functions": [
        {
          "functionId": {
            "filePath": "lib/clone.js",
            "className": null,
            "functionName": "internals.clone"
          },
          "version": [
            "<8.5.1",
            ">=9.0.0 <9.0.3"
          ]
        }
      ],
      "fixedIn": [
        "8.5.1",
        "9.0.3"
      ],
      "id": "SNYK-JS-HAPIHOEK-548452",
      "identifiers": {
        "CWE": [
          "CWE-1321"
        ],
        "NSP": [
          "1468"
        ],
        "CVE": [],
        "GHSA": [
          "GHSA-22h7-7wwg-qmgg"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-05-06T13:09:33.193272Z",
      "moduleName": "@hapi/hoek",
      "packageManager": "npm",
      "packageName": "@hapi/hoek",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-02-11T08:16:01Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/hapijs/hoek/commit/948baf98634a5c206875b67d11368f133034fa90"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/hapijs/hoek/issues/352"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [
        {
          "functionId": {
            "filePath": "lib/clone.js",
            "functionName": "internals.clone"
          },
          "version": [
            "<8.5.1",
            ">=9.0.0 <9.0.3"
          ]
        }
      ],
      "semver": {
        "vulnerable": [
          "<8.5.1",
          ">=9.0.0 <9.0.3"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "@hapi/joi@16.1.8",
        "@hapi/hoek@8.5.0"
      ],
      "upgradePath": [
        false,
        "@hapi/joi@16.1.8",
        "@hapi/hoek@8.5.1"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "@hapi/hoek",
      "version": "8.5.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:L/I:L/A:L/E:U/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-02-11T08:14:56.161770Z",
      "credit": [
        "Oh Ho Kyun"
      ],
      "cvssScore": 5,
      "description": "## Overview\n[@hapi/hoek](https://www.npmjs.com/package/@hapi/hoek) is an utility methods package for the hapi ecosystem\n\nAffected versions of this package are vulnerable to Prototype Pollution. The `clone` function fails to prevent the modification of the Object prototype when passed specially-crafted input.\r\n\r\n*Note:* This issue does not affect `hapi` applications since the framework protects against such malicious inputs. Only applications that use `@hapi/hoek` outside of the `hapi` ecosystem may be vulnerable.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `@hapi/hoek` to version 8.5.1, 9.0.3 or higher.\n## References\n- [GitHub Commit](https://github.com/hapijs/hoek/commit/948baf98634a5c206875b67d11368f133034fa90)\n- [GitHub Issue](https://github.com/hapijs/hoek/issues/352)\n",
      "disclosureTime": "2020-02-10T18:20:22Z",
      "exploit": "Unproven",
      "functions": [
        {
          "functionId": {
            "filePath": "lib/clone.js",
            "className": null,
            "functionName": "internals.clone"
          },
          "version": [
            "<8.5.1",
            ">=9.0.0 <9.0.3"
          ]
        }
      ],
      "fixedIn": [
        "8.5.1",
        "9.0.3"
      ],
      "id": "SNYK-JS-HAPIHOEK-548452",
      "identifiers": {
        "CWE": [
          "CWE-1321"
        ],
        "NSP": [
          "1468"
        ],
        "CVE": [],
        "GHSA": [
          "GHSA-22h7-7wwg-qmgg"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-05-06T13:09:33.193272Z",
      "moduleName": "@hapi/hoek",
      "packageManager": "npm",
      "packageName": "@hapi/hoek",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-02-11T08:16:01Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/hapijs/hoek/commit/948baf98634a5c206875b67d11368f133034fa90"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/hapijs/hoek/issues/352"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [
        {
          "functionId": {
            "filePath": "lib/clone.js",
            "functionName": "internals.clone"
          },
          "version": [
            "<8.5.1",
            ">=9.0.0 <9.0.3"
          ]
        }
      ],
      "semver": {
        "vulnerable": [
          "<8.5.1",
          ">=9.0.0 <9.0.3"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "@hapi/joi@16.1.8",
        "@hapi/topo@3.1.6",
        "@hapi/hoek@8.5.0"
      ],
      "upgradePath": [
        false,
        "@hapi/joi@16.1.8",
        "@hapi/topo@3.1.6",
        "@hapi/hoek@8.5.1"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "@hapi/hoek",
      "version": "8.5.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-08-31T15:49:30.361142Z",
      "credit": [
        "Alessio Della Libera of Snyk Research Team"
      ],
      "cvssScore": 5.6,
      "description": "## Overview\n[json-pointer](https://www.npmjs.com/package/json-pointer) is a set of utilities for JSON pointers described by RFC 6901\n\nAffected versions of this package are vulnerable to Prototype Pollution. A type confusion vulnerability can lead to a bypass of CVE-2020-7709 when the pointer components are arrays.\r\n\r\n### PoC\r\n\r\n```\r\nconst pointer = require('json-pointer');\r\n\r\n// pointer.set({}, ['__proto__', 'polluted'], 'yes')\r\n// console.log(polluted) // ReferenceError: polluted is not defined\r\n\r\npointer.set({}, [['__proto__'], 'polluted'], 'yes')\r\nconsole.log(polluted)\"\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nA fix was pushed into the `master` branch but not yet published.\n## References\n- [GitHub Commit](https://github.com/manuelstofer/json-pointer/commit/47dae1d369a25bd9bdcdbc963b8699b89a882c81)\n- [Snyk Blog](https://snyk.io/blog/remediate-javascript-type-confusion-bypassed-input-validation/)\n- [Vulnerable Code](https://github.com/manuelstofer/json-pointer/blob/master/index.js#L78)\n",
      "disclosureTime": "2021-08-31T15:48:25Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [],
      "id": "SNYK-JS-JSONPOINTER-1577287",
      "identifiers": {
        "CWE": [
          "CWE-1321"
        ],
        "CVE": [
          "CVE-2021-23820"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-06-09T15:18:12.256527Z",
      "moduleName": "json-pointer",
      "packageManager": "npm",
      "packageName": "json-pointer",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-11-03T16:34:28Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/manuelstofer/json-pointer/commit/47dae1d369a25bd9bdcdbc963b8699b89a882c81"
        },
        {
          "title": "Snyk Blog",
          "url": "https://snyk.io/blog/remediate-javascript-type-confusion-bypassed-input-validation/"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/manuelstofer/json-pointer/blob/master/index.js%23L78"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "*"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "@asyncapi/react-component@0.17.11",
        "openapi-sampler@1.0.0-beta.18",
        "json-pointer@0.6.1"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "json-pointer",
      "version": "0.6.1"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H/RL:O",
      "alternativeIds": [],
      "creationTime": "2019-03-24T09:59:28.172265Z",
      "credit": [
        "Shawn Rasheed",
        "Jens DIetrich"
      ],
      "cvssScore": 5.9,
      "description": "## Overview\n[js-yaml](https://www.npmjs.com/package/js-yaml) is a human-friendly data serialization language.\n\nAffected versions of this package are vulnerable to Denial of Service (DoS). The parsing of a specially crafted YAML file may exhaust the system resources.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `js-yaml` to version 3.13.0 or higher.\n## References\n- [GitHub Commit](https://github.com/nodeca/js-yaml/commit/a567ef3c6e61eb319f0bfc2671d91061afb01235)\n- [GitHub Issue](https://github.com/nodeca/js-yaml/issues/475)\n",
      "disclosureTime": "2019-03-18T21:29:08Z",
      "exploit": "Not Defined",
      "functions": [
        {
          "functionId": {
            "filePath": "lib/js-yaml/loader.js",
            "className": null,
            "functionName": "storeMappingPair"
          },
          "version": [
            ">=3.0.0 <3.13.0"
          ]
        }
      ],
      "fixedIn": [
        "3.13.0"
      ],
      "id": "SNYK-JS-JSYAML-173999",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "NSP": [
          "788"
        ],
        "CVE": [],
        "GHSA": [
          "GHSA-2pr6-76vf-7546"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-12-14T14:41:10.940959Z",
      "moduleName": "js-yaml",
      "packageManager": "npm",
      "packageName": "js-yaml",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2019-03-24T10:00:08Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/nodeca/js-yaml/commit/a567ef3c6e61eb319f0bfc2671d91061afb01235"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/nodeca/js-yaml/issues/475"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Denial of Service (DoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [
        {
          "functionId": {
            "filePath": "lib/js-yaml/loader.js",
            "functionName": "storeMappingPair"
          },
          "version": [
            ">=3.0.0 <3.13.0"
          ]
        }
      ],
      "semver": {
        "vulnerable": [
          ">=3.0.0 <3.13.0"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger2-postman2-converter@0.0.3",
        "js-yaml@3.10.0"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "js-yaml",
      "version": "3.10.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
      "alternativeIds": [],
      "creationTime": "2019-04-07T11:15:19.826828Z",
      "credit": [
        "Alex Kocharin"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n[js-yaml](https://www.npmjs.com/package/js-yaml) is a human-friendly data serialization language.\n\nAffected versions of this package are vulnerable to Arbitrary Code Execution. When an object with an executable `toString()` property used as a map key, it will execute that function. This happens only for `load()`, which should not be used with untrusted data anyway. `safeLoad()` is not affected because it can't parse functions.\n## Remediation\nUpgrade `js-yaml` to version 3.13.1 or higher.\n## References\n- [GitHub Commit](https://github.com/nodeca/js-yaml/pull/480/commits/e18afbf1edcafb7add2c4c7b22abc8d6ebc2fa61)\n- [GitHub PR](https://github.com/nodeca/js-yaml/pull/480)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/813)\n",
      "disclosureTime": "2019-04-05T15:54:43Z",
      "exploit": "Not Defined",
      "functions": [
        {
          "functionId": {
            "filePath": "lib/js-yaml/loader.js",
            "className": null,
            "functionName": "storeMappingPair"
          },
          "version": [
            ">2.1.3 <3.13.1"
          ]
        },
        {
          "functionId": {
            "filePath": "lib/js-yaml/loader.js",
            "className": null,
            "functionName": "loadAll.storeMappingPair"
          },
          "version": [
            ">1.0.3 <=2.1.3"
          ]
        }
      ],
      "fixedIn": [
        "3.13.1"
      ],
      "id": "SNYK-JS-JSYAML-174129",
      "identifiers": {
        "CWE": [
          "CWE-94"
        ],
        "NSP": [
          "813"
        ],
        "CVE": [],
        "GHSA": [
          "GHSA-8j8c-7jfh-h6hx"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-12-14T14:41:35.880966Z",
      "moduleName": "js-yaml",
      "packageManager": "npm",
      "packageName": "js-yaml",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2019-04-07T15:54:43Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/nodeca/js-yaml/pull/480/commits/e18afbf1edcafb7add2c4c7b22abc8d6ebc2fa61"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/nodeca/js-yaml/pull/480"
        },
        {
          "title": "NPM Security Advisory",
          "url": "https://www.npmjs.com/advisories/813"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Arbitrary Code Execution",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [
        {
          "functionId": {
            "filePath": "lib/js-yaml/loader.js",
            "functionName": "storeMappingPair"
          },
          "version": [
            ">2.1.3 <3.13.1"
          ]
        },
        {
          "functionId": {
            "filePath": "lib/js-yaml/loader.js",
            "functionName": "loadAll.storeMappingPair"
          },
          "version": [
            ">1.0.3 <=2.1.3"
          ]
        }
      ],
      "semver": {
        "vulnerable": [
          "<3.13.1"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger2-postman2-converter@0.0.3",
        "js-yaml@3.10.0"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "js-yaml",
      "version": "3.10.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2020-10-16T16:48:40.985673Z",
      "credit": [
        "Liyuan Chen"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `toNumber`, `trim` and `trimEnd` functions.\r\n\r\n### POC\r\n```\r\nvar lo = require('lodash');\r\n\r\nfunction build_blank (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\n\r\nvar s = build_blank(50000)\r\nvar time0 = Date.now();\r\nlo.trim(s)\r\nvar time_cost0 = Date.now() - time0;\r\nconsole.log(\"time_cost0: \" + time_cost0)\r\n\r\nvar time1 = Date.now();\r\nlo.toNumber(s)\r\nvar time_cost1 = Date.now() - time1;\r\nconsole.log(\"time_cost1: \" + time_cost1)\r\n\r\nvar time2 = Date.now();\r\nlo.trimEnd(s)\r\nvar time_cost2 = Date.now() - time2;\r\nconsole.log(\"time_cost2: \" + time_cost2)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a)\n- [GitHub Fix PR](https://github.com/lodash/lodash/pull/5065)\n",
      "disclosureTime": "2020-10-16T16:47:34Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.21"
      ],
      "id": "SNYK-JS-LODASH-1018905",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2020-28500"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:26:11.286253Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:49Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a"
        },
        {
          "title": "GitHub Fix PR",
          "url": "https://github.com/lodash/lodash/pull/5065"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "lodash@4.17.20"
      ],
      "upgradePath": [
        false,
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.20"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-11-17T14:07:17.048472Z",
      "credit": [
        "Marc Hassan"
      ],
      "cvssScore": 7.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Command Injection via `template`.\r\n\r\n### PoC\r\n```js\r\nvar _ = require('lodash');\r\n\r\n_.template('', { variable: '){console.log(process.env)}; with(obj' })()\r\n```\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c)\n- [Vulnerable Code](https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js#L14851)\n",
      "disclosureTime": "2020-11-17T13:02:10Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.21"
      ],
      "id": "SNYK-JS-LODASH-1040724",
      "identifiers": {
        "CWE": [
          "CWE-78"
        ],
        "GHSA": [
          "GHSA-35jh-r3h4-6jhm"
        ],
        "CVE": [
          "CVE-2021-23337"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:28:18.096614Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:50Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js%23L14851"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Command Injection",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "lodash@4.17.20"
      ],
      "upgradePath": [
        false,
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.20"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2020-10-16T16:48:40.985673Z",
      "credit": [
        "Liyuan Chen"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `toNumber`, `trim` and `trimEnd` functions.\r\n\r\n### POC\r\n```\r\nvar lo = require('lodash');\r\n\r\nfunction build_blank (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\n\r\nvar s = build_blank(50000)\r\nvar time0 = Date.now();\r\nlo.trim(s)\r\nvar time_cost0 = Date.now() - time0;\r\nconsole.log(\"time_cost0: \" + time_cost0)\r\n\r\nvar time1 = Date.now();\r\nlo.toNumber(s)\r\nvar time_cost1 = Date.now() - time1;\r\nconsole.log(\"time_cost1: \" + time_cost1)\r\n\r\nvar time2 = Date.now();\r\nlo.trimEnd(s)\r\nvar time_cost2 = Date.now() - time2;\r\nconsole.log(\"time_cost2: \" + time_cost2)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a)\n- [GitHub Fix PR](https://github.com/lodash/lodash/pull/5065)\n",
      "disclosureTime": "2020-10-16T16:47:34Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.21"
      ],
      "id": "SNYK-JS-LODASH-1018905",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2020-28500"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:26:11.286253Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:49Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a"
        },
        {
          "title": "GitHub Fix PR",
          "url": "https://github.com/lodash/lodash/pull/5065"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "openapi-to-postmanv2@1.2.7",
        "lodash@4.17.20"
      ],
      "upgradePath": [
        false,
        "openapi-to-postmanv2@2.4.0",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.20"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-11-17T14:07:17.048472Z",
      "credit": [
        "Marc Hassan"
      ],
      "cvssScore": 7.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Command Injection via `template`.\r\n\r\n### PoC\r\n```js\r\nvar _ = require('lodash');\r\n\r\n_.template('', { variable: '){console.log(process.env)}; with(obj' })()\r\n```\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c)\n- [Vulnerable Code](https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js#L14851)\n",
      "disclosureTime": "2020-11-17T13:02:10Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.21"
      ],
      "id": "SNYK-JS-LODASH-1040724",
      "identifiers": {
        "CWE": [
          "CWE-78"
        ],
        "GHSA": [
          "GHSA-35jh-r3h4-6jhm"
        ],
        "CVE": [
          "CVE-2021-23337"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:28:18.096614Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:50Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js%23L14851"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Command Injection",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "openapi-to-postmanv2@1.2.7",
        "lodash@4.17.20"
      ],
      "upgradePath": [
        false,
        "openapi-to-postmanv2@2.4.0",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.20"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2020-10-16T16:48:40.985673Z",
      "credit": [
        "Liyuan Chen"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `toNumber`, `trim` and `trimEnd` functions.\r\n\r\n### POC\r\n```\r\nvar lo = require('lodash');\r\n\r\nfunction build_blank (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\n\r\nvar s = build_blank(50000)\r\nvar time0 = Date.now();\r\nlo.trim(s)\r\nvar time_cost0 = Date.now() - time0;\r\nconsole.log(\"time_cost0: \" + time_cost0)\r\n\r\nvar time1 = Date.now();\r\nlo.toNumber(s)\r\nvar time_cost1 = Date.now() - time1;\r\nconsole.log(\"time_cost1: \" + time_cost1)\r\n\r\nvar time2 = Date.now();\r\nlo.trimEnd(s)\r\nvar time_cost2 = Date.now() - time2;\r\nconsole.log(\"time_cost2: \" + time_cost2)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a)\n- [GitHub Fix PR](https://github.com/lodash/lodash/pull/5065)\n",
      "disclosureTime": "2020-10-16T16:47:34Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.21"
      ],
      "id": "SNYK-JS-LODASH-1018905",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2020-28500"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:26:11.286253Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:49Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a"
        },
        {
          "title": "GitHub Fix PR",
          "url": "https://github.com/lodash/lodash/pull/5065"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger-client@3.12.0",
        "lodash@4.17.20"
      ],
      "upgradePath": [
        false,
        "swagger-client@3.12.0",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.20"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-11-17T14:07:17.048472Z",
      "credit": [
        "Marc Hassan"
      ],
      "cvssScore": 7.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Command Injection via `template`.\r\n\r\n### PoC\r\n```js\r\nvar _ = require('lodash');\r\n\r\n_.template('', { variable: '){console.log(process.env)}; with(obj' })()\r\n```\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c)\n- [Vulnerable Code](https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js#L14851)\n",
      "disclosureTime": "2020-11-17T13:02:10Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.21"
      ],
      "id": "SNYK-JS-LODASH-1040724",
      "identifiers": {
        "CWE": [
          "CWE-78"
        ],
        "GHSA": [
          "GHSA-35jh-r3h4-6jhm"
        ],
        "CVE": [
          "CVE-2021-23337"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:28:18.096614Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:50Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js%23L14851"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Command Injection",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger-client@3.12.0",
        "lodash@4.17.20"
      ],
      "upgradePath": [
        false,
        "swagger-client@3.12.0",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.20"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2020-10-16T16:48:40.985673Z",
      "credit": [
        "Liyuan Chen"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `toNumber`, `trim` and `trimEnd` functions.\r\n\r\n### POC\r\n```\r\nvar lo = require('lodash');\r\n\r\nfunction build_blank (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\n\r\nvar s = build_blank(50000)\r\nvar time0 = Date.now();\r\nlo.trim(s)\r\nvar time_cost0 = Date.now() - time0;\r\nconsole.log(\"time_cost0: \" + time_cost0)\r\n\r\nvar time1 = Date.now();\r\nlo.toNumber(s)\r\nvar time_cost1 = Date.now() - time1;\r\nconsole.log(\"time_cost1: \" + time_cost1)\r\n\r\nvar time2 = Date.now();\r\nlo.trimEnd(s)\r\nvar time_cost2 = Date.now() - time2;\r\nconsole.log(\"time_cost2: \" + time_cost2)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a)\n- [GitHub Fix PR](https://github.com/lodash/lodash/pull/5065)\n",
      "disclosureTime": "2020-10-16T16:47:34Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.21"
      ],
      "id": "SNYK-JS-LODASH-1018905",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2020-28500"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:26:11.286253Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:49Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a"
        },
        {
          "title": "GitHub Fix PR",
          "url": "https://github.com/lodash/lodash/pull/5065"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger-ui@3.25.0",
        "lodash@4.17.20"
      ],
      "upgradePath": [
        false,
        "swagger-ui@3.25.0",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.20"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-11-17T14:07:17.048472Z",
      "credit": [
        "Marc Hassan"
      ],
      "cvssScore": 7.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Command Injection via `template`.\r\n\r\n### PoC\r\n```js\r\nvar _ = require('lodash');\r\n\r\n_.template('', { variable: '){console.log(process.env)}; with(obj' })()\r\n```\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c)\n- [Vulnerable Code](https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js#L14851)\n",
      "disclosureTime": "2020-11-17T13:02:10Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.21"
      ],
      "id": "SNYK-JS-LODASH-1040724",
      "identifiers": {
        "CWE": [
          "CWE-78"
        ],
        "GHSA": [
          "GHSA-35jh-r3h4-6jhm"
        ],
        "CVE": [
          "CVE-2021-23337"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:28:18.096614Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:50Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js%23L14851"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Command Injection",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger-ui@3.25.0",
        "lodash@4.17.20"
      ],
      "upgradePath": [
        false,
        "swagger-ui@3.25.0",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.20"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2020-10-16T16:48:40.985673Z",
      "credit": [
        "Liyuan Chen"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `toNumber`, `trim` and `trimEnd` functions.\r\n\r\n### POC\r\n```\r\nvar lo = require('lodash');\r\n\r\nfunction build_blank (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\n\r\nvar s = build_blank(50000)\r\nvar time0 = Date.now();\r\nlo.trim(s)\r\nvar time_cost0 = Date.now() - time0;\r\nconsole.log(\"time_cost0: \" + time_cost0)\r\n\r\nvar time1 = Date.now();\r\nlo.toNumber(s)\r\nvar time_cost1 = Date.now() - time1;\r\nconsole.log(\"time_cost1: \" + time_cost1)\r\n\r\nvar time2 = Date.now();\r\nlo.trimEnd(s)\r\nvar time_cost2 = Date.now() - time2;\r\nconsole.log(\"time_cost2: \" + time_cost2)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a)\n- [GitHub Fix PR](https://github.com/lodash/lodash/pull/5065)\n",
      "disclosureTime": "2020-10-16T16:47:34Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.21"
      ],
      "id": "SNYK-JS-LODASH-1018905",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2020-28500"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:26:11.286253Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:49Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a"
        },
        {
          "title": "GitHub Fix PR",
          "url": "https://github.com/lodash/lodash/pull/5065"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger-ui-react@3.25.0",
        "lodash@4.17.20"
      ],
      "upgradePath": [
        false,
        "swagger-ui-react@3.25.0",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.20"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-11-17T14:07:17.048472Z",
      "credit": [
        "Marc Hassan"
      ],
      "cvssScore": 7.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Command Injection via `template`.\r\n\r\n### PoC\r\n```js\r\nvar _ = require('lodash');\r\n\r\n_.template('', { variable: '){console.log(process.env)}; with(obj' })()\r\n```\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c)\n- [Vulnerable Code](https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js#L14851)\n",
      "disclosureTime": "2020-11-17T13:02:10Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.21"
      ],
      "id": "SNYK-JS-LODASH-1040724",
      "identifiers": {
        "CWE": [
          "CWE-78"
        ],
        "GHSA": [
          "GHSA-35jh-r3h4-6jhm"
        ],
        "CVE": [
          "CVE-2021-23337"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:28:18.096614Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:50Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js%23L14851"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Command Injection",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger-ui-react@3.25.0",
        "lodash@4.17.20"
      ],
      "upgradePath": [
        false,
        "swagger-ui-react@3.25.0",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.20"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2020-10-16T16:48:40.985673Z",
      "credit": [
        "Liyuan Chen"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `toNumber`, `trim` and `trimEnd` functions.\r\n\r\n### POC\r\n```\r\nvar lo = require('lodash');\r\n\r\nfunction build_blank (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\n\r\nvar s = build_blank(50000)\r\nvar time0 = Date.now();\r\nlo.trim(s)\r\nvar time_cost0 = Date.now() - time0;\r\nconsole.log(\"time_cost0: \" + time_cost0)\r\n\r\nvar time1 = Date.now();\r\nlo.toNumber(s)\r\nvar time_cost1 = Date.now() - time1;\r\nconsole.log(\"time_cost1: \" + time_cost1)\r\n\r\nvar time2 = Date.now();\r\nlo.trimEnd(s)\r\nvar time_cost2 = Date.now() - time2;\r\nconsole.log(\"time_cost2: \" + time_cost2)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a)\n- [GitHub Fix PR](https://github.com/lodash/lodash/pull/5065)\n",
      "disclosureTime": "2020-10-16T16:47:34Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.21"
      ],
      "id": "SNYK-JS-LODASH-1018905",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2020-28500"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:26:11.286253Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:49Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a"
        },
        {
          "title": "GitHub Fix PR",
          "url": "https://github.com/lodash/lodash/pull/5065"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "openapi-to-postmanv2@1.2.7",
        "postman-collection@3.6.6",
        "lodash@4.17.20"
      ],
      "upgradePath": [
        false,
        "openapi-to-postmanv2@2.7.0",
        "postman-collection@3.6.11",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.20"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-11-17T14:07:17.048472Z",
      "credit": [
        "Marc Hassan"
      ],
      "cvssScore": 7.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Command Injection via `template`.\r\n\r\n### PoC\r\n```js\r\nvar _ = require('lodash');\r\n\r\n_.template('', { variable: '){console.log(process.env)}; with(obj' })()\r\n```\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c)\n- [Vulnerable Code](https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js#L14851)\n",
      "disclosureTime": "2020-11-17T13:02:10Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.21"
      ],
      "id": "SNYK-JS-LODASH-1040724",
      "identifiers": {
        "CWE": [
          "CWE-78"
        ],
        "GHSA": [
          "GHSA-35jh-r3h4-6jhm"
        ],
        "CVE": [
          "CVE-2021-23337"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:28:18.096614Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:50Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js%23L14851"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Command Injection",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "openapi-to-postmanv2@1.2.7",
        "postman-collection@3.6.6",
        "lodash@4.17.20"
      ],
      "upgradePath": [
        false,
        "openapi-to-postmanv2@2.7.0",
        "postman-collection@3.6.11",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.20"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2020-10-16T16:48:40.985673Z",
      "credit": [
        "Liyuan Chen"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `toNumber`, `trim` and `trimEnd` functions.\r\n\r\n### POC\r\n```\r\nvar lo = require('lodash');\r\n\r\nfunction build_blank (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\n\r\nvar s = build_blank(50000)\r\nvar time0 = Date.now();\r\nlo.trim(s)\r\nvar time_cost0 = Date.now() - time0;\r\nconsole.log(\"time_cost0: \" + time_cost0)\r\n\r\nvar time1 = Date.now();\r\nlo.toNumber(s)\r\nvar time_cost1 = Date.now() - time1;\r\nconsole.log(\"time_cost1: \" + time_cost1)\r\n\r\nvar time2 = Date.now();\r\nlo.trimEnd(s)\r\nvar time_cost2 = Date.now() - time2;\r\nconsole.log(\"time_cost2: \" + time_cost2)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a)\n- [GitHub Fix PR](https://github.com/lodash/lodash/pull/5065)\n",
      "disclosureTime": "2020-10-16T16:47:34Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.21"
      ],
      "id": "SNYK-JS-LODASH-1018905",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2020-28500"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:26:11.286253Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:49Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a"
        },
        {
          "title": "GitHub Fix PR",
          "url": "https://github.com/lodash/lodash/pull/5065"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger2-postman2-converter@0.0.3",
        "postman-collection@3.6.6",
        "lodash@4.17.20"
      ],
      "upgradePath": [
        false,
        "swagger2-postman2-converter@0.0.3",
        "postman-collection@3.6.10",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.20"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-11-17T14:07:17.048472Z",
      "credit": [
        "Marc Hassan"
      ],
      "cvssScore": 7.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Command Injection via `template`.\r\n\r\n### PoC\r\n```js\r\nvar _ = require('lodash');\r\n\r\n_.template('', { variable: '){console.log(process.env)}; with(obj' })()\r\n```\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c)\n- [Vulnerable Code](https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js#L14851)\n",
      "disclosureTime": "2020-11-17T13:02:10Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.21"
      ],
      "id": "SNYK-JS-LODASH-1040724",
      "identifiers": {
        "CWE": [
          "CWE-78"
        ],
        "GHSA": [
          "GHSA-35jh-r3h4-6jhm"
        ],
        "CVE": [
          "CVE-2021-23337"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:28:18.096614Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:50Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js%23L14851"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Command Injection",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger2-postman2-converter@0.0.3",
        "postman-collection@3.6.6",
        "lodash@4.17.20"
      ],
      "upgradePath": [
        false,
        "swagger2-postman2-converter@0.0.3",
        "postman-collection@3.6.10",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.20"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2020-10-16T16:48:40.985673Z",
      "credit": [
        "Liyuan Chen"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `toNumber`, `trim` and `trimEnd` functions.\r\n\r\n### POC\r\n```\r\nvar lo = require('lodash');\r\n\r\nfunction build_blank (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\n\r\nvar s = build_blank(50000)\r\nvar time0 = Date.now();\r\nlo.trim(s)\r\nvar time_cost0 = Date.now() - time0;\r\nconsole.log(\"time_cost0: \" + time_cost0)\r\n\r\nvar time1 = Date.now();\r\nlo.toNumber(s)\r\nvar time_cost1 = Date.now() - time1;\r\nconsole.log(\"time_cost1: \" + time_cost1)\r\n\r\nvar time2 = Date.now();\r\nlo.trimEnd(s)\r\nvar time_cost2 = Date.now() - time2;\r\nconsole.log(\"time_cost2: \" + time_cost2)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a)\n- [GitHub Fix PR](https://github.com/lodash/lodash/pull/5065)\n",
      "disclosureTime": "2020-10-16T16:47:34Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.21"
      ],
      "id": "SNYK-JS-LODASH-1018905",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2020-28500"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:26:11.286253Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:49Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a"
        },
        {
          "title": "GitHub Fix PR",
          "url": "https://github.com/lodash/lodash/pull/5065"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger-ui@3.25.0",
        "swagger-client@3.12.0",
        "lodash@4.17.20"
      ],
      "upgradePath": [
        false,
        "swagger-ui@3.25.0",
        "swagger-client@3.12.0",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.20"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-11-17T14:07:17.048472Z",
      "credit": [
        "Marc Hassan"
      ],
      "cvssScore": 7.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Command Injection via `template`.\r\n\r\n### PoC\r\n```js\r\nvar _ = require('lodash');\r\n\r\n_.template('', { variable: '){console.log(process.env)}; with(obj' })()\r\n```\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c)\n- [Vulnerable Code](https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js#L14851)\n",
      "disclosureTime": "2020-11-17T13:02:10Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.21"
      ],
      "id": "SNYK-JS-LODASH-1040724",
      "identifiers": {
        "CWE": [
          "CWE-78"
        ],
        "GHSA": [
          "GHSA-35jh-r3h4-6jhm"
        ],
        "CVE": [
          "CVE-2021-23337"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:28:18.096614Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:50Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js%23L14851"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Command Injection",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger-ui@3.25.0",
        "swagger-client@3.12.0",
        "lodash@4.17.20"
      ],
      "upgradePath": [
        false,
        "swagger-ui@3.25.0",
        "swagger-client@3.12.0",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.20"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2020-10-16T16:48:40.985673Z",
      "credit": [
        "Liyuan Chen"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `toNumber`, `trim` and `trimEnd` functions.\r\n\r\n### POC\r\n```\r\nvar lo = require('lodash');\r\n\r\nfunction build_blank (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\n\r\nvar s = build_blank(50000)\r\nvar time0 = Date.now();\r\nlo.trim(s)\r\nvar time_cost0 = Date.now() - time0;\r\nconsole.log(\"time_cost0: \" + time_cost0)\r\n\r\nvar time1 = Date.now();\r\nlo.toNumber(s)\r\nvar time_cost1 = Date.now() - time1;\r\nconsole.log(\"time_cost1: \" + time_cost1)\r\n\r\nvar time2 = Date.now();\r\nlo.trimEnd(s)\r\nvar time_cost2 = Date.now() - time2;\r\nconsole.log(\"time_cost2: \" + time_cost2)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a)\n- [GitHub Fix PR](https://github.com/lodash/lodash/pull/5065)\n",
      "disclosureTime": "2020-10-16T16:47:34Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.21"
      ],
      "id": "SNYK-JS-LODASH-1018905",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2020-28500"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:26:11.286253Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:49Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a"
        },
        {
          "title": "GitHub Fix PR",
          "url": "https://github.com/lodash/lodash/pull/5065"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger-ui-react@3.25.0",
        "swagger-client@3.12.0",
        "lodash@4.17.20"
      ],
      "upgradePath": [
        false,
        "swagger-ui-react@3.25.0",
        "swagger-client@3.12.0",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.20"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-11-17T14:07:17.048472Z",
      "credit": [
        "Marc Hassan"
      ],
      "cvssScore": 7.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Command Injection via `template`.\r\n\r\n### PoC\r\n```js\r\nvar _ = require('lodash');\r\n\r\n_.template('', { variable: '){console.log(process.env)}; with(obj' })()\r\n```\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c)\n- [Vulnerable Code](https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js#L14851)\n",
      "disclosureTime": "2020-11-17T13:02:10Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.21"
      ],
      "id": "SNYK-JS-LODASH-1040724",
      "identifiers": {
        "CWE": [
          "CWE-78"
        ],
        "GHSA": [
          "GHSA-35jh-r3h4-6jhm"
        ],
        "CVE": [
          "CVE-2021-23337"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:28:18.096614Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:50Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js%23L14851"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Command Injection",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger-ui-react@3.25.0",
        "swagger-client@3.12.0",
        "lodash@4.17.20"
      ],
      "upgradePath": [
        false,
        "swagger-ui-react@3.25.0",
        "swagger-client@3.12.0",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.20"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2020-10-16T16:48:40.985673Z",
      "credit": [
        "Liyuan Chen"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `toNumber`, `trim` and `trimEnd` functions.\r\n\r\n### POC\r\n```\r\nvar lo = require('lodash');\r\n\r\nfunction build_blank (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\n\r\nvar s = build_blank(50000)\r\nvar time0 = Date.now();\r\nlo.trim(s)\r\nvar time_cost0 = Date.now() - time0;\r\nconsole.log(\"time_cost0: \" + time_cost0)\r\n\r\nvar time1 = Date.now();\r\nlo.toNumber(s)\r\nvar time_cost1 = Date.now() - time1;\r\nconsole.log(\"time_cost1: \" + time_cost1)\r\n\r\nvar time2 = Date.now();\r\nlo.trimEnd(s)\r\nvar time_cost2 = Date.now() - time2;\r\nconsole.log(\"time_cost2: \" + time_cost2)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a)\n- [GitHub Fix PR](https://github.com/lodash/lodash/pull/5065)\n",
      "disclosureTime": "2020-10-16T16:47:34Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.21"
      ],
      "id": "SNYK-JS-LODASH-1018905",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2020-28500"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:26:11.286253Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:49Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a"
        },
        {
          "title": "GitHub Fix PR",
          "url": "https://github.com/lodash/lodash/pull/5065"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger-ui@3.25.0",
        "react-redux@4.4.10",
        "lodash@4.17.20"
      ],
      "upgradePath": [
        false,
        "swagger-ui@3.25.0",
        "react-redux@4.4.10",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.20"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-11-17T14:07:17.048472Z",
      "credit": [
        "Marc Hassan"
      ],
      "cvssScore": 7.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Command Injection via `template`.\r\n\r\n### PoC\r\n```js\r\nvar _ = require('lodash');\r\n\r\n_.template('', { variable: '){console.log(process.env)}; with(obj' })()\r\n```\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c)\n- [Vulnerable Code](https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js#L14851)\n",
      "disclosureTime": "2020-11-17T13:02:10Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.21"
      ],
      "id": "SNYK-JS-LODASH-1040724",
      "identifiers": {
        "CWE": [
          "CWE-78"
        ],
        "GHSA": [
          "GHSA-35jh-r3h4-6jhm"
        ],
        "CVE": [
          "CVE-2021-23337"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:28:18.096614Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:50Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js%23L14851"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Command Injection",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger-ui@3.25.0",
        "react-redux@4.4.10",
        "lodash@4.17.20"
      ],
      "upgradePath": [
        false,
        "swagger-ui@3.25.0",
        "react-redux@4.4.10",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.20"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2020-10-16T16:48:40.985673Z",
      "credit": [
        "Liyuan Chen"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `toNumber`, `trim` and `trimEnd` functions.\r\n\r\n### POC\r\n```\r\nvar lo = require('lodash');\r\n\r\nfunction build_blank (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\n\r\nvar s = build_blank(50000)\r\nvar time0 = Date.now();\r\nlo.trim(s)\r\nvar time_cost0 = Date.now() - time0;\r\nconsole.log(\"time_cost0: \" + time_cost0)\r\n\r\nvar time1 = Date.now();\r\nlo.toNumber(s)\r\nvar time_cost1 = Date.now() - time1;\r\nconsole.log(\"time_cost1: \" + time_cost1)\r\n\r\nvar time2 = Date.now();\r\nlo.trimEnd(s)\r\nvar time_cost2 = Date.now() - time2;\r\nconsole.log(\"time_cost2: \" + time_cost2)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a)\n- [GitHub Fix PR](https://github.com/lodash/lodash/pull/5065)\n",
      "disclosureTime": "2020-10-16T16:47:34Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.21"
      ],
      "id": "SNYK-JS-LODASH-1018905",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2020-28500"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:26:11.286253Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:49Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a"
        },
        {
          "title": "GitHub Fix PR",
          "url": "https://github.com/lodash/lodash/pull/5065"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger-ui-react@3.25.0",
        "react-redux@4.4.10",
        "lodash@4.17.20"
      ],
      "upgradePath": [
        false,
        "swagger-ui-react@3.25.0",
        "react-redux@4.4.10",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.20"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-11-17T14:07:17.048472Z",
      "credit": [
        "Marc Hassan"
      ],
      "cvssScore": 7.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Command Injection via `template`.\r\n\r\n### PoC\r\n```js\r\nvar _ = require('lodash');\r\n\r\n_.template('', { variable: '){console.log(process.env)}; with(obj' })()\r\n```\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c)\n- [Vulnerable Code](https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js#L14851)\n",
      "disclosureTime": "2020-11-17T13:02:10Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.21"
      ],
      "id": "SNYK-JS-LODASH-1040724",
      "identifiers": {
        "CWE": [
          "CWE-78"
        ],
        "GHSA": [
          "GHSA-35jh-r3h4-6jhm"
        ],
        "CVE": [
          "CVE-2021-23337"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:28:18.096614Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:50Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js%23L14851"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Command Injection",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger-ui-react@3.25.0",
        "react-redux@4.4.10",
        "lodash@4.17.20"
      ],
      "upgradePath": [
        false,
        "swagger-ui-react@3.25.0",
        "react-redux@4.4.10",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.20"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2020-10-16T16:48:40.985673Z",
      "credit": [
        "Liyuan Chen"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `toNumber`, `trim` and `trimEnd` functions.\r\n\r\n### POC\r\n```\r\nvar lo = require('lodash');\r\n\r\nfunction build_blank (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\n\r\nvar s = build_blank(50000)\r\nvar time0 = Date.now();\r\nlo.trim(s)\r\nvar time_cost0 = Date.now() - time0;\r\nconsole.log(\"time_cost0: \" + time_cost0)\r\n\r\nvar time1 = Date.now();\r\nlo.toNumber(s)\r\nvar time_cost1 = Date.now() - time1;\r\nconsole.log(\"time_cost1: \" + time_cost1)\r\n\r\nvar time2 = Date.now();\r\nlo.trimEnd(s)\r\nvar time_cost2 = Date.now() - time2;\r\nconsole.log(\"time_cost2: \" + time_cost2)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a)\n- [GitHub Fix PR](https://github.com/lodash/lodash/pull/5065)\n",
      "disclosureTime": "2020-10-16T16:47:34Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.21"
      ],
      "id": "SNYK-JS-LODASH-1018905",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2020-28500"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:26:11.286253Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:49Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a"
        },
        {
          "title": "GitHub Fix PR",
          "url": "https://github.com/lodash/lodash/pull/5065"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger-ui@3.25.0",
        "redux@3.7.2",
        "lodash@4.17.20"
      ],
      "upgradePath": [
        false,
        "swagger-ui@3.25.0",
        "redux@3.7.2",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.20"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-11-17T14:07:17.048472Z",
      "credit": [
        "Marc Hassan"
      ],
      "cvssScore": 7.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Command Injection via `template`.\r\n\r\n### PoC\r\n```js\r\nvar _ = require('lodash');\r\n\r\n_.template('', { variable: '){console.log(process.env)}; with(obj' })()\r\n```\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c)\n- [Vulnerable Code](https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js#L14851)\n",
      "disclosureTime": "2020-11-17T13:02:10Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.21"
      ],
      "id": "SNYK-JS-LODASH-1040724",
      "identifiers": {
        "CWE": [
          "CWE-78"
        ],
        "GHSA": [
          "GHSA-35jh-r3h4-6jhm"
        ],
        "CVE": [
          "CVE-2021-23337"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:28:18.096614Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:50Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js%23L14851"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Command Injection",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger-ui@3.25.0",
        "redux@3.7.2",
        "lodash@4.17.20"
      ],
      "upgradePath": [
        false,
        "swagger-ui@3.25.0",
        "redux@3.7.2",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.20"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2020-10-16T16:48:40.985673Z",
      "credit": [
        "Liyuan Chen"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `toNumber`, `trim` and `trimEnd` functions.\r\n\r\n### POC\r\n```\r\nvar lo = require('lodash');\r\n\r\nfunction build_blank (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\n\r\nvar s = build_blank(50000)\r\nvar time0 = Date.now();\r\nlo.trim(s)\r\nvar time_cost0 = Date.now() - time0;\r\nconsole.log(\"time_cost0: \" + time_cost0)\r\n\r\nvar time1 = Date.now();\r\nlo.toNumber(s)\r\nvar time_cost1 = Date.now() - time1;\r\nconsole.log(\"time_cost1: \" + time_cost1)\r\n\r\nvar time2 = Date.now();\r\nlo.trimEnd(s)\r\nvar time_cost2 = Date.now() - time2;\r\nconsole.log(\"time_cost2: \" + time_cost2)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a)\n- [GitHub Fix PR](https://github.com/lodash/lodash/pull/5065)\n",
      "disclosureTime": "2020-10-16T16:47:34Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.21"
      ],
      "id": "SNYK-JS-LODASH-1018905",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2020-28500"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:26:11.286253Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:49Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a"
        },
        {
          "title": "GitHub Fix PR",
          "url": "https://github.com/lodash/lodash/pull/5065"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger-ui-react@3.25.0",
        "redux@3.7.2",
        "lodash@4.17.20"
      ],
      "upgradePath": [
        false,
        "swagger-ui-react@3.25.0",
        "redux@3.7.2",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.20"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-11-17T14:07:17.048472Z",
      "credit": [
        "Marc Hassan"
      ],
      "cvssScore": 7.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Command Injection via `template`.\r\n\r\n### PoC\r\n```js\r\nvar _ = require('lodash');\r\n\r\n_.template('', { variable: '){console.log(process.env)}; with(obj' })()\r\n```\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c)\n- [Vulnerable Code](https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js#L14851)\n",
      "disclosureTime": "2020-11-17T13:02:10Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.21"
      ],
      "id": "SNYK-JS-LODASH-1040724",
      "identifiers": {
        "CWE": [
          "CWE-78"
        ],
        "GHSA": [
          "GHSA-35jh-r3h4-6jhm"
        ],
        "CVE": [
          "CVE-2021-23337"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:28:18.096614Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:50Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js%23L14851"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Command Injection",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger-ui-react@3.25.0",
        "redux@3.7.2",
        "lodash@4.17.20"
      ],
      "upgradePath": [
        false,
        "swagger-ui-react@3.25.0",
        "redux@3.7.2",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.20"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2020-10-16T16:48:40.985673Z",
      "credit": [
        "Liyuan Chen"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `toNumber`, `trim` and `trimEnd` functions.\r\n\r\n### POC\r\n```\r\nvar lo = require('lodash');\r\n\r\nfunction build_blank (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\n\r\nvar s = build_blank(50000)\r\nvar time0 = Date.now();\r\nlo.trim(s)\r\nvar time_cost0 = Date.now() - time0;\r\nconsole.log(\"time_cost0: \" + time_cost0)\r\n\r\nvar time1 = Date.now();\r\nlo.toNumber(s)\r\nvar time_cost1 = Date.now() - time1;\r\nconsole.log(\"time_cost1: \" + time_cost1)\r\n\r\nvar time2 = Date.now();\r\nlo.trimEnd(s)\r\nvar time_cost2 = Date.now() - time2;\r\nconsole.log(\"time_cost2: \" + time_cost2)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a)\n- [GitHub Fix PR](https://github.com/lodash/lodash/pull/5065)\n",
      "disclosureTime": "2020-10-16T16:47:34Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.21"
      ],
      "id": "SNYK-JS-LODASH-1018905",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2020-28500"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:26:11.286253Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:49Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a"
        },
        {
          "title": "GitHub Fix PR",
          "url": "https://github.com/lodash/lodash/pull/5065"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "graphiql@0.17.5",
        "codemirror-graphql@0.11.6",
        "graphql-language-service-parser@1.5.2",
        "graphql-config@2.2.1",
        "lodash@4.17.20"
      ],
      "upgradePath": [
        false,
        "graphiql@0.17.5",
        "codemirror-graphql@0.11.6",
        "graphql-language-service-parser@1.5.2",
        "graphql-config@2.2.1",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.20"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-11-17T14:07:17.048472Z",
      "credit": [
        "Marc Hassan"
      ],
      "cvssScore": 7.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Command Injection via `template`.\r\n\r\n### PoC\r\n```js\r\nvar _ = require('lodash');\r\n\r\n_.template('', { variable: '){console.log(process.env)}; with(obj' })()\r\n```\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c)\n- [Vulnerable Code](https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js#L14851)\n",
      "disclosureTime": "2020-11-17T13:02:10Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.21"
      ],
      "id": "SNYK-JS-LODASH-1040724",
      "identifiers": {
        "CWE": [
          "CWE-78"
        ],
        "GHSA": [
          "GHSA-35jh-r3h4-6jhm"
        ],
        "CVE": [
          "CVE-2021-23337"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:28:18.096614Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:50Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js%23L14851"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Command Injection",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "graphiql@0.17.5",
        "codemirror-graphql@0.11.6",
        "graphql-language-service-parser@1.5.2",
        "graphql-config@2.2.1",
        "lodash@4.17.20"
      ],
      "upgradePath": [
        false,
        "graphiql@0.17.5",
        "codemirror-graphql@0.11.6",
        "graphql-language-service-parser@1.5.2",
        "graphql-config@2.2.1",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.20"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2020-10-16T16:48:40.985673Z",
      "credit": [
        "Liyuan Chen"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `toNumber`, `trim` and `trimEnd` functions.\r\n\r\n### POC\r\n```\r\nvar lo = require('lodash');\r\n\r\nfunction build_blank (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\n\r\nvar s = build_blank(50000)\r\nvar time0 = Date.now();\r\nlo.trim(s)\r\nvar time_cost0 = Date.now() - time0;\r\nconsole.log(\"time_cost0: \" + time_cost0)\r\n\r\nvar time1 = Date.now();\r\nlo.toNumber(s)\r\nvar time_cost1 = Date.now() - time1;\r\nconsole.log(\"time_cost1: \" + time_cost1)\r\n\r\nvar time2 = Date.now();\r\nlo.trimEnd(s)\r\nvar time_cost2 = Date.now() - time2;\r\nconsole.log(\"time_cost2: \" + time_cost2)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a)\n- [GitHub Fix PR](https://github.com/lodash/lodash/pull/5065)\n",
      "disclosureTime": "2020-10-16T16:47:34Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.21"
      ],
      "id": "SNYK-JS-LODASH-1018905",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2020-28500"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:26:11.286253Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:49Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a"
        },
        {
          "title": "GitHub Fix PR",
          "url": "https://github.com/lodash/lodash/pull/5065"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "graphiql@0.17.5",
        "codemirror-graphql@0.11.6",
        "graphql-language-service-interface@2.3.3",
        "graphql-config@2.2.1",
        "lodash@4.17.20"
      ],
      "upgradePath": [
        false,
        "graphiql@0.17.5",
        "codemirror-graphql@0.11.6",
        "graphql-language-service-interface@2.3.3",
        "graphql-config@2.2.1",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.20"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-11-17T14:07:17.048472Z",
      "credit": [
        "Marc Hassan"
      ],
      "cvssScore": 7.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Command Injection via `template`.\r\n\r\n### PoC\r\n```js\r\nvar _ = require('lodash');\r\n\r\n_.template('', { variable: '){console.log(process.env)}; with(obj' })()\r\n```\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c)\n- [Vulnerable Code](https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js#L14851)\n",
      "disclosureTime": "2020-11-17T13:02:10Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.21"
      ],
      "id": "SNYK-JS-LODASH-1040724",
      "identifiers": {
        "CWE": [
          "CWE-78"
        ],
        "GHSA": [
          "GHSA-35jh-r3h4-6jhm"
        ],
        "CVE": [
          "CVE-2021-23337"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:28:18.096614Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:50Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js%23L14851"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Command Injection",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "graphiql@0.17.5",
        "codemirror-graphql@0.11.6",
        "graphql-language-service-interface@2.3.3",
        "graphql-config@2.2.1",
        "lodash@4.17.20"
      ],
      "upgradePath": [
        false,
        "graphiql@0.17.5",
        "codemirror-graphql@0.11.6",
        "graphql-language-service-interface@2.3.3",
        "graphql-config@2.2.1",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.20"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2020-10-16T16:48:40.985673Z",
      "credit": [
        "Liyuan Chen"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `toNumber`, `trim` and `trimEnd` functions.\r\n\r\n### POC\r\n```\r\nvar lo = require('lodash');\r\n\r\nfunction build_blank (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\n\r\nvar s = build_blank(50000)\r\nvar time0 = Date.now();\r\nlo.trim(s)\r\nvar time_cost0 = Date.now() - time0;\r\nconsole.log(\"time_cost0: \" + time_cost0)\r\n\r\nvar time1 = Date.now();\r\nlo.toNumber(s)\r\nvar time_cost1 = Date.now() - time1;\r\nconsole.log(\"time_cost1: \" + time_cost1)\r\n\r\nvar time2 = Date.now();\r\nlo.trimEnd(s)\r\nvar time_cost2 = Date.now() - time2;\r\nconsole.log(\"time_cost2: \" + time_cost2)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a)\n- [GitHub Fix PR](https://github.com/lodash/lodash/pull/5065)\n",
      "disclosureTime": "2020-10-16T16:47:34Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.21"
      ],
      "id": "SNYK-JS-LODASH-1018905",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2020-28500"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:26:11.286253Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:49Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a"
        },
        {
          "title": "GitHub Fix PR",
          "url": "https://github.com/lodash/lodash/pull/5065"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "graphiql@0.17.5",
        "codemirror-graphql@0.11.6",
        "graphql-language-service-parser@1.5.2",
        "graphql-config@2.2.1",
        "graphql-import@0.7.1",
        "lodash@4.17.20"
      ],
      "upgradePath": [
        false,
        "graphiql@0.17.5",
        "codemirror-graphql@0.11.6",
        "graphql-language-service-parser@1.5.2",
        "graphql-config@2.2.1",
        "graphql-import@0.7.1",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.20"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-11-17T14:07:17.048472Z",
      "credit": [
        "Marc Hassan"
      ],
      "cvssScore": 7.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Command Injection via `template`.\r\n\r\n### PoC\r\n```js\r\nvar _ = require('lodash');\r\n\r\n_.template('', { variable: '){console.log(process.env)}; with(obj' })()\r\n```\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c)\n- [Vulnerable Code](https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js#L14851)\n",
      "disclosureTime": "2020-11-17T13:02:10Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.21"
      ],
      "id": "SNYK-JS-LODASH-1040724",
      "identifiers": {
        "CWE": [
          "CWE-78"
        ],
        "GHSA": [
          "GHSA-35jh-r3h4-6jhm"
        ],
        "CVE": [
          "CVE-2021-23337"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:28:18.096614Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:50Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js%23L14851"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Command Injection",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "graphiql@0.17.5",
        "codemirror-graphql@0.11.6",
        "graphql-language-service-parser@1.5.2",
        "graphql-config@2.2.1",
        "graphql-import@0.7.1",
        "lodash@4.17.20"
      ],
      "upgradePath": [
        false,
        "graphiql@0.17.5",
        "codemirror-graphql@0.11.6",
        "graphql-language-service-parser@1.5.2",
        "graphql-config@2.2.1",
        "graphql-import@0.7.1",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.20"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2020-10-16T16:48:40.985673Z",
      "credit": [
        "Liyuan Chen"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `toNumber`, `trim` and `trimEnd` functions.\r\n\r\n### POC\r\n```\r\nvar lo = require('lodash');\r\n\r\nfunction build_blank (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\n\r\nvar s = build_blank(50000)\r\nvar time0 = Date.now();\r\nlo.trim(s)\r\nvar time_cost0 = Date.now() - time0;\r\nconsole.log(\"time_cost0: \" + time_cost0)\r\n\r\nvar time1 = Date.now();\r\nlo.toNumber(s)\r\nvar time_cost1 = Date.now() - time1;\r\nconsole.log(\"time_cost1: \" + time_cost1)\r\n\r\nvar time2 = Date.now();\r\nlo.trimEnd(s)\r\nvar time_cost2 = Date.now() - time2;\r\nconsole.log(\"time_cost2: \" + time_cost2)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a)\n- [GitHub Fix PR](https://github.com/lodash/lodash/pull/5065)\n",
      "disclosureTime": "2020-10-16T16:47:34Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.21"
      ],
      "id": "SNYK-JS-LODASH-1018905",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2020-28500"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:26:11.286253Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:49Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a"
        },
        {
          "title": "GitHub Fix PR",
          "url": "https://github.com/lodash/lodash/pull/5065"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "graphiql@0.17.5",
        "codemirror-graphql@0.11.6",
        "graphql-language-service-interface@2.3.3",
        "graphql-config@2.2.1",
        "graphql-import@0.7.1",
        "lodash@4.17.20"
      ],
      "upgradePath": [
        false,
        "graphiql@0.17.5",
        "codemirror-graphql@0.11.6",
        "graphql-language-service-interface@2.3.3",
        "graphql-config@2.2.1",
        "graphql-import@0.7.1",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.20"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-11-17T14:07:17.048472Z",
      "credit": [
        "Marc Hassan"
      ],
      "cvssScore": 7.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Command Injection via `template`.\r\n\r\n### PoC\r\n```js\r\nvar _ = require('lodash');\r\n\r\n_.template('', { variable: '){console.log(process.env)}; with(obj' })()\r\n```\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c)\n- [Vulnerable Code](https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js#L14851)\n",
      "disclosureTime": "2020-11-17T13:02:10Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.21"
      ],
      "id": "SNYK-JS-LODASH-1040724",
      "identifiers": {
        "CWE": [
          "CWE-78"
        ],
        "GHSA": [
          "GHSA-35jh-r3h4-6jhm"
        ],
        "CVE": [
          "CVE-2021-23337"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:28:18.096614Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:50Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js%23L14851"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Command Injection",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "graphiql@0.17.5",
        "codemirror-graphql@0.11.6",
        "graphql-language-service-interface@2.3.3",
        "graphql-config@2.2.1",
        "graphql-import@0.7.1",
        "lodash@4.17.20"
      ],
      "upgradePath": [
        false,
        "graphiql@0.17.5",
        "codemirror-graphql@0.11.6",
        "graphql-language-service-interface@2.3.3",
        "graphql-config@2.2.1",
        "graphql-import@0.7.1",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.20"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2020-10-16T16:48:40.985673Z",
      "credit": [
        "Liyuan Chen"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `toNumber`, `trim` and `trimEnd` functions.\r\n\r\n### POC\r\n```\r\nvar lo = require('lodash');\r\n\r\nfunction build_blank (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\n\r\nvar s = build_blank(50000)\r\nvar time0 = Date.now();\r\nlo.trim(s)\r\nvar time_cost0 = Date.now() - time0;\r\nconsole.log(\"time_cost0: \" + time_cost0)\r\n\r\nvar time1 = Date.now();\r\nlo.toNumber(s)\r\nvar time_cost1 = Date.now() - time1;\r\nconsole.log(\"time_cost1: \" + time_cost1)\r\n\r\nvar time2 = Date.now();\r\nlo.trimEnd(s)\r\nvar time_cost2 = Date.now() - time2;\r\nconsole.log(\"time_cost2: \" + time_cost2)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a)\n- [GitHub Fix PR](https://github.com/lodash/lodash/pull/5065)\n",
      "disclosureTime": "2020-10-16T16:47:34Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.21"
      ],
      "id": "SNYK-JS-LODASH-1018905",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2020-28500"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:26:11.286253Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:49Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a"
        },
        {
          "title": "GitHub Fix PR",
          "url": "https://github.com/lodash/lodash/pull/5065"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "graphiql@0.17.5",
        "codemirror-graphql@0.11.6",
        "graphql-language-service-parser@1.5.2",
        "graphql-language-service-types@1.5.2",
        "graphql-config@2.2.1",
        "lodash@4.17.20"
      ],
      "upgradePath": [
        false,
        "graphiql@0.17.5",
        "codemirror-graphql@0.11.6",
        "graphql-language-service-parser@1.5.2",
        "graphql-language-service-types@1.5.2",
        "graphql-config@2.2.1",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.20"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-11-17T14:07:17.048472Z",
      "credit": [
        "Marc Hassan"
      ],
      "cvssScore": 7.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Command Injection via `template`.\r\n\r\n### PoC\r\n```js\r\nvar _ = require('lodash');\r\n\r\n_.template('', { variable: '){console.log(process.env)}; with(obj' })()\r\n```\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c)\n- [Vulnerable Code](https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js#L14851)\n",
      "disclosureTime": "2020-11-17T13:02:10Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.21"
      ],
      "id": "SNYK-JS-LODASH-1040724",
      "identifiers": {
        "CWE": [
          "CWE-78"
        ],
        "GHSA": [
          "GHSA-35jh-r3h4-6jhm"
        ],
        "CVE": [
          "CVE-2021-23337"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:28:18.096614Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:50Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js%23L14851"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Command Injection",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "graphiql@0.17.5",
        "codemirror-graphql@0.11.6",
        "graphql-language-service-parser@1.5.2",
        "graphql-language-service-types@1.5.2",
        "graphql-config@2.2.1",
        "lodash@4.17.20"
      ],
      "upgradePath": [
        false,
        "graphiql@0.17.5",
        "codemirror-graphql@0.11.6",
        "graphql-language-service-parser@1.5.2",
        "graphql-language-service-types@1.5.2",
        "graphql-config@2.2.1",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.20"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2020-10-16T16:48:40.985673Z",
      "credit": [
        "Liyuan Chen"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `toNumber`, `trim` and `trimEnd` functions.\r\n\r\n### POC\r\n```\r\nvar lo = require('lodash');\r\n\r\nfunction build_blank (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\n\r\nvar s = build_blank(50000)\r\nvar time0 = Date.now();\r\nlo.trim(s)\r\nvar time_cost0 = Date.now() - time0;\r\nconsole.log(\"time_cost0: \" + time_cost0)\r\n\r\nvar time1 = Date.now();\r\nlo.toNumber(s)\r\nvar time_cost1 = Date.now() - time1;\r\nconsole.log(\"time_cost1: \" + time_cost1)\r\n\r\nvar time2 = Date.now();\r\nlo.trimEnd(s)\r\nvar time_cost2 = Date.now() - time2;\r\nconsole.log(\"time_cost2: \" + time_cost2)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a)\n- [GitHub Fix PR](https://github.com/lodash/lodash/pull/5065)\n",
      "disclosureTime": "2020-10-16T16:47:34Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.21"
      ],
      "id": "SNYK-JS-LODASH-1018905",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2020-28500"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:26:11.286253Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:49Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a"
        },
        {
          "title": "GitHub Fix PR",
          "url": "https://github.com/lodash/lodash/pull/5065"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "graphiql@0.17.5",
        "codemirror-graphql@0.11.6",
        "graphql-language-service-interface@2.3.3",
        "graphql-language-service-types@1.5.2",
        "graphql-config@2.2.1",
        "lodash@4.17.20"
      ],
      "upgradePath": [
        false,
        "graphiql@0.17.5",
        "codemirror-graphql@0.11.6",
        "graphql-language-service-interface@2.3.3",
        "graphql-language-service-types@1.5.2",
        "graphql-config@2.2.1",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.20"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-11-17T14:07:17.048472Z",
      "credit": [
        "Marc Hassan"
      ],
      "cvssScore": 7.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Command Injection via `template`.\r\n\r\n### PoC\r\n```js\r\nvar _ = require('lodash');\r\n\r\n_.template('', { variable: '){console.log(process.env)}; with(obj' })()\r\n```\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c)\n- [Vulnerable Code](https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js#L14851)\n",
      "disclosureTime": "2020-11-17T13:02:10Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.21"
      ],
      "id": "SNYK-JS-LODASH-1040724",
      "identifiers": {
        "CWE": [
          "CWE-78"
        ],
        "GHSA": [
          "GHSA-35jh-r3h4-6jhm"
        ],
        "CVE": [
          "CVE-2021-23337"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:28:18.096614Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:50Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js%23L14851"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Command Injection",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "graphiql@0.17.5",
        "codemirror-graphql@0.11.6",
        "graphql-language-service-interface@2.3.3",
        "graphql-language-service-types@1.5.2",
        "graphql-config@2.2.1",
        "lodash@4.17.20"
      ],
      "upgradePath": [
        false,
        "graphiql@0.17.5",
        "codemirror-graphql@0.11.6",
        "graphql-language-service-interface@2.3.3",
        "graphql-language-service-types@1.5.2",
        "graphql-config@2.2.1",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.20"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2020-10-16T16:48:40.985673Z",
      "credit": [
        "Liyuan Chen"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `toNumber`, `trim` and `trimEnd` functions.\r\n\r\n### POC\r\n```\r\nvar lo = require('lodash');\r\n\r\nfunction build_blank (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\n\r\nvar s = build_blank(50000)\r\nvar time0 = Date.now();\r\nlo.trim(s)\r\nvar time_cost0 = Date.now() - time0;\r\nconsole.log(\"time_cost0: \" + time_cost0)\r\n\r\nvar time1 = Date.now();\r\nlo.toNumber(s)\r\nvar time_cost1 = Date.now() - time1;\r\nconsole.log(\"time_cost1: \" + time_cost1)\r\n\r\nvar time2 = Date.now();\r\nlo.trimEnd(s)\r\nvar time_cost2 = Date.now() - time2;\r\nconsole.log(\"time_cost2: \" + time_cost2)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a)\n- [GitHub Fix PR](https://github.com/lodash/lodash/pull/5065)\n",
      "disclosureTime": "2020-10-16T16:47:34Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.21"
      ],
      "id": "SNYK-JS-LODASH-1018905",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2020-28500"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:26:11.286253Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:49Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a"
        },
        {
          "title": "GitHub Fix PR",
          "url": "https://github.com/lodash/lodash/pull/5065"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "graphiql@0.17.5",
        "codemirror-graphql@0.11.6",
        "graphql-language-service-interface@2.3.3",
        "graphql-language-service-parser@1.5.2",
        "graphql-config@2.2.1",
        "lodash@4.17.20"
      ],
      "upgradePath": [
        false,
        "graphiql@0.17.5",
        "codemirror-graphql@0.11.6",
        "graphql-language-service-interface@2.3.3",
        "graphql-language-service-parser@1.5.2",
        "graphql-config@2.2.1",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.20"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-11-17T14:07:17.048472Z",
      "credit": [
        "Marc Hassan"
      ],
      "cvssScore": 7.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Command Injection via `template`.\r\n\r\n### PoC\r\n```js\r\nvar _ = require('lodash');\r\n\r\n_.template('', { variable: '){console.log(process.env)}; with(obj' })()\r\n```\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c)\n- [Vulnerable Code](https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js#L14851)\n",
      "disclosureTime": "2020-11-17T13:02:10Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.21"
      ],
      "id": "SNYK-JS-LODASH-1040724",
      "identifiers": {
        "CWE": [
          "CWE-78"
        ],
        "GHSA": [
          "GHSA-35jh-r3h4-6jhm"
        ],
        "CVE": [
          "CVE-2021-23337"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:28:18.096614Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:50Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js%23L14851"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Command Injection",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "graphiql@0.17.5",
        "codemirror-graphql@0.11.6",
        "graphql-language-service-interface@2.3.3",
        "graphql-language-service-parser@1.5.2",
        "graphql-config@2.2.1",
        "lodash@4.17.20"
      ],
      "upgradePath": [
        false,
        "graphiql@0.17.5",
        "codemirror-graphql@0.11.6",
        "graphql-language-service-interface@2.3.3",
        "graphql-language-service-parser@1.5.2",
        "graphql-config@2.2.1",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.20"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2020-10-16T16:48:40.985673Z",
      "credit": [
        "Liyuan Chen"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `toNumber`, `trim` and `trimEnd` functions.\r\n\r\n### POC\r\n```\r\nvar lo = require('lodash');\r\n\r\nfunction build_blank (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\n\r\nvar s = build_blank(50000)\r\nvar time0 = Date.now();\r\nlo.trim(s)\r\nvar time_cost0 = Date.now() - time0;\r\nconsole.log(\"time_cost0: \" + time_cost0)\r\n\r\nvar time1 = Date.now();\r\nlo.toNumber(s)\r\nvar time_cost1 = Date.now() - time1;\r\nconsole.log(\"time_cost1: \" + time_cost1)\r\n\r\nvar time2 = Date.now();\r\nlo.trimEnd(s)\r\nvar time_cost2 = Date.now() - time2;\r\nconsole.log(\"time_cost2: \" + time_cost2)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a)\n- [GitHub Fix PR](https://github.com/lodash/lodash/pull/5065)\n",
      "disclosureTime": "2020-10-16T16:47:34Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.21"
      ],
      "id": "SNYK-JS-LODASH-1018905",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2020-28500"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:26:11.286253Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:49Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a"
        },
        {
          "title": "GitHub Fix PR",
          "url": "https://github.com/lodash/lodash/pull/5065"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "graphiql@0.17.5",
        "codemirror-graphql@0.11.6",
        "graphql-language-service-interface@2.3.3",
        "graphql-language-service-utils@2.3.3",
        "graphql-config@2.2.1",
        "lodash@4.17.20"
      ],
      "upgradePath": [
        false,
        "graphiql@0.17.5",
        "codemirror-graphql@0.11.6",
        "graphql-language-service-interface@2.3.3",
        "graphql-language-service-utils@2.3.3",
        "graphql-config@2.2.1",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.20"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-11-17T14:07:17.048472Z",
      "credit": [
        "Marc Hassan"
      ],
      "cvssScore": 7.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Command Injection via `template`.\r\n\r\n### PoC\r\n```js\r\nvar _ = require('lodash');\r\n\r\n_.template('', { variable: '){console.log(process.env)}; with(obj' })()\r\n```\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c)\n- [Vulnerable Code](https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js#L14851)\n",
      "disclosureTime": "2020-11-17T13:02:10Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.21"
      ],
      "id": "SNYK-JS-LODASH-1040724",
      "identifiers": {
        "CWE": [
          "CWE-78"
        ],
        "GHSA": [
          "GHSA-35jh-r3h4-6jhm"
        ],
        "CVE": [
          "CVE-2021-23337"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:28:18.096614Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:50Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js%23L14851"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Command Injection",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "graphiql@0.17.5",
        "codemirror-graphql@0.11.6",
        "graphql-language-service-interface@2.3.3",
        "graphql-language-service-utils@2.3.3",
        "graphql-config@2.2.1",
        "lodash@4.17.20"
      ],
      "upgradePath": [
        false,
        "graphiql@0.17.5",
        "codemirror-graphql@0.11.6",
        "graphql-language-service-interface@2.3.3",
        "graphql-language-service-utils@2.3.3",
        "graphql-config@2.2.1",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.20"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2020-10-16T16:48:40.985673Z",
      "credit": [
        "Liyuan Chen"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `toNumber`, `trim` and `trimEnd` functions.\r\n\r\n### POC\r\n```\r\nvar lo = require('lodash');\r\n\r\nfunction build_blank (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\n\r\nvar s = build_blank(50000)\r\nvar time0 = Date.now();\r\nlo.trim(s)\r\nvar time_cost0 = Date.now() - time0;\r\nconsole.log(\"time_cost0: \" + time_cost0)\r\n\r\nvar time1 = Date.now();\r\nlo.toNumber(s)\r\nvar time_cost1 = Date.now() - time1;\r\nconsole.log(\"time_cost1: \" + time_cost1)\r\n\r\nvar time2 = Date.now();\r\nlo.trimEnd(s)\r\nvar time_cost2 = Date.now() - time2;\r\nconsole.log(\"time_cost2: \" + time_cost2)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a)\n- [GitHub Fix PR](https://github.com/lodash/lodash/pull/5065)\n",
      "disclosureTime": "2020-10-16T16:47:34Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.21"
      ],
      "id": "SNYK-JS-LODASH-1018905",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2020-28500"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:26:11.286253Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:49Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a"
        },
        {
          "title": "GitHub Fix PR",
          "url": "https://github.com/lodash/lodash/pull/5065"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "graphiql@0.17.5",
        "codemirror-graphql@0.11.6",
        "graphql-language-service-parser@1.5.2",
        "graphql-language-service-types@1.5.2",
        "graphql-config@2.2.1",
        "graphql-import@0.7.1",
        "lodash@4.17.20"
      ],
      "upgradePath": [
        false,
        "graphiql@0.17.5",
        "codemirror-graphql@0.11.6",
        "graphql-language-service-parser@1.5.2",
        "graphql-language-service-types@1.5.2",
        "graphql-config@2.2.1",
        "graphql-import@0.7.1",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.20"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-11-17T14:07:17.048472Z",
      "credit": [
        "Marc Hassan"
      ],
      "cvssScore": 7.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Command Injection via `template`.\r\n\r\n### PoC\r\n```js\r\nvar _ = require('lodash');\r\n\r\n_.template('', { variable: '){console.log(process.env)}; with(obj' })()\r\n```\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c)\n- [Vulnerable Code](https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js#L14851)\n",
      "disclosureTime": "2020-11-17T13:02:10Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.21"
      ],
      "id": "SNYK-JS-LODASH-1040724",
      "identifiers": {
        "CWE": [
          "CWE-78"
        ],
        "GHSA": [
          "GHSA-35jh-r3h4-6jhm"
        ],
        "CVE": [
          "CVE-2021-23337"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:28:18.096614Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:50Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js%23L14851"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Command Injection",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "graphiql@0.17.5",
        "codemirror-graphql@0.11.6",
        "graphql-language-service-parser@1.5.2",
        "graphql-language-service-types@1.5.2",
        "graphql-config@2.2.1",
        "graphql-import@0.7.1",
        "lodash@4.17.20"
      ],
      "upgradePath": [
        false,
        "graphiql@0.17.5",
        "codemirror-graphql@0.11.6",
        "graphql-language-service-parser@1.5.2",
        "graphql-language-service-types@1.5.2",
        "graphql-config@2.2.1",
        "graphql-import@0.7.1",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.20"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2020-10-16T16:48:40.985673Z",
      "credit": [
        "Liyuan Chen"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `toNumber`, `trim` and `trimEnd` functions.\r\n\r\n### POC\r\n```\r\nvar lo = require('lodash');\r\n\r\nfunction build_blank (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\n\r\nvar s = build_blank(50000)\r\nvar time0 = Date.now();\r\nlo.trim(s)\r\nvar time_cost0 = Date.now() - time0;\r\nconsole.log(\"time_cost0: \" + time_cost0)\r\n\r\nvar time1 = Date.now();\r\nlo.toNumber(s)\r\nvar time_cost1 = Date.now() - time1;\r\nconsole.log(\"time_cost1: \" + time_cost1)\r\n\r\nvar time2 = Date.now();\r\nlo.trimEnd(s)\r\nvar time_cost2 = Date.now() - time2;\r\nconsole.log(\"time_cost2: \" + time_cost2)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a)\n- [GitHub Fix PR](https://github.com/lodash/lodash/pull/5065)\n",
      "disclosureTime": "2020-10-16T16:47:34Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.21"
      ],
      "id": "SNYK-JS-LODASH-1018905",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2020-28500"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:26:11.286253Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:49Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a"
        },
        {
          "title": "GitHub Fix PR",
          "url": "https://github.com/lodash/lodash/pull/5065"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "graphiql@0.17.5",
        "codemirror-graphql@0.11.6",
        "graphql-language-service-interface@2.3.3",
        "graphql-language-service-types@1.5.2",
        "graphql-config@2.2.1",
        "graphql-import@0.7.1",
        "lodash@4.17.20"
      ],
      "upgradePath": [
        false,
        "graphiql@0.17.5",
        "codemirror-graphql@0.11.6",
        "graphql-language-service-interface@2.3.3",
        "graphql-language-service-types@1.5.2",
        "graphql-config@2.2.1",
        "graphql-import@0.7.1",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.20"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-11-17T14:07:17.048472Z",
      "credit": [
        "Marc Hassan"
      ],
      "cvssScore": 7.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Command Injection via `template`.\r\n\r\n### PoC\r\n```js\r\nvar _ = require('lodash');\r\n\r\n_.template('', { variable: '){console.log(process.env)}; with(obj' })()\r\n```\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c)\n- [Vulnerable Code](https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js#L14851)\n",
      "disclosureTime": "2020-11-17T13:02:10Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.21"
      ],
      "id": "SNYK-JS-LODASH-1040724",
      "identifiers": {
        "CWE": [
          "CWE-78"
        ],
        "GHSA": [
          "GHSA-35jh-r3h4-6jhm"
        ],
        "CVE": [
          "CVE-2021-23337"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:28:18.096614Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:50Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js%23L14851"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Command Injection",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "graphiql@0.17.5",
        "codemirror-graphql@0.11.6",
        "graphql-language-service-interface@2.3.3",
        "graphql-language-service-types@1.5.2",
        "graphql-config@2.2.1",
        "graphql-import@0.7.1",
        "lodash@4.17.20"
      ],
      "upgradePath": [
        false,
        "graphiql@0.17.5",
        "codemirror-graphql@0.11.6",
        "graphql-language-service-interface@2.3.3",
        "graphql-language-service-types@1.5.2",
        "graphql-config@2.2.1",
        "graphql-import@0.7.1",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.20"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2020-10-16T16:48:40.985673Z",
      "credit": [
        "Liyuan Chen"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `toNumber`, `trim` and `trimEnd` functions.\r\n\r\n### POC\r\n```\r\nvar lo = require('lodash');\r\n\r\nfunction build_blank (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\n\r\nvar s = build_blank(50000)\r\nvar time0 = Date.now();\r\nlo.trim(s)\r\nvar time_cost0 = Date.now() - time0;\r\nconsole.log(\"time_cost0: \" + time_cost0)\r\n\r\nvar time1 = Date.now();\r\nlo.toNumber(s)\r\nvar time_cost1 = Date.now() - time1;\r\nconsole.log(\"time_cost1: \" + time_cost1)\r\n\r\nvar time2 = Date.now();\r\nlo.trimEnd(s)\r\nvar time_cost2 = Date.now() - time2;\r\nconsole.log(\"time_cost2: \" + time_cost2)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a)\n- [GitHub Fix PR](https://github.com/lodash/lodash/pull/5065)\n",
      "disclosureTime": "2020-10-16T16:47:34Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.21"
      ],
      "id": "SNYK-JS-LODASH-1018905",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2020-28500"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:26:11.286253Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:49Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a"
        },
        {
          "title": "GitHub Fix PR",
          "url": "https://github.com/lodash/lodash/pull/5065"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "graphiql@0.17.5",
        "codemirror-graphql@0.11.6",
        "graphql-language-service-interface@2.3.3",
        "graphql-language-service-parser@1.5.2",
        "graphql-config@2.2.1",
        "graphql-import@0.7.1",
        "lodash@4.17.20"
      ],
      "upgradePath": [
        false,
        "graphiql@0.17.5",
        "codemirror-graphql@0.11.6",
        "graphql-language-service-interface@2.3.3",
        "graphql-language-service-parser@1.5.2",
        "graphql-config@2.2.1",
        "graphql-import@0.7.1",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.20"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-11-17T14:07:17.048472Z",
      "credit": [
        "Marc Hassan"
      ],
      "cvssScore": 7.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Command Injection via `template`.\r\n\r\n### PoC\r\n```js\r\nvar _ = require('lodash');\r\n\r\n_.template('', { variable: '){console.log(process.env)}; with(obj' })()\r\n```\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c)\n- [Vulnerable Code](https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js#L14851)\n",
      "disclosureTime": "2020-11-17T13:02:10Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.21"
      ],
      "id": "SNYK-JS-LODASH-1040724",
      "identifiers": {
        "CWE": [
          "CWE-78"
        ],
        "GHSA": [
          "GHSA-35jh-r3h4-6jhm"
        ],
        "CVE": [
          "CVE-2021-23337"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:28:18.096614Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:50Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js%23L14851"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Command Injection",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "graphiql@0.17.5",
        "codemirror-graphql@0.11.6",
        "graphql-language-service-interface@2.3.3",
        "graphql-language-service-parser@1.5.2",
        "graphql-config@2.2.1",
        "graphql-import@0.7.1",
        "lodash@4.17.20"
      ],
      "upgradePath": [
        false,
        "graphiql@0.17.5",
        "codemirror-graphql@0.11.6",
        "graphql-language-service-interface@2.3.3",
        "graphql-language-service-parser@1.5.2",
        "graphql-config@2.2.1",
        "graphql-import@0.7.1",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.20"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2020-10-16T16:48:40.985673Z",
      "credit": [
        "Liyuan Chen"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `toNumber`, `trim` and `trimEnd` functions.\r\n\r\n### POC\r\n```\r\nvar lo = require('lodash');\r\n\r\nfunction build_blank (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\n\r\nvar s = build_blank(50000)\r\nvar time0 = Date.now();\r\nlo.trim(s)\r\nvar time_cost0 = Date.now() - time0;\r\nconsole.log(\"time_cost0: \" + time_cost0)\r\n\r\nvar time1 = Date.now();\r\nlo.toNumber(s)\r\nvar time_cost1 = Date.now() - time1;\r\nconsole.log(\"time_cost1: \" + time_cost1)\r\n\r\nvar time2 = Date.now();\r\nlo.trimEnd(s)\r\nvar time_cost2 = Date.now() - time2;\r\nconsole.log(\"time_cost2: \" + time_cost2)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a)\n- [GitHub Fix PR](https://github.com/lodash/lodash/pull/5065)\n",
      "disclosureTime": "2020-10-16T16:47:34Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.21"
      ],
      "id": "SNYK-JS-LODASH-1018905",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2020-28500"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:26:11.286253Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:49Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a"
        },
        {
          "title": "GitHub Fix PR",
          "url": "https://github.com/lodash/lodash/pull/5065"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "graphiql@0.17.5",
        "codemirror-graphql@0.11.6",
        "graphql-language-service-interface@2.3.3",
        "graphql-language-service-utils@2.3.3",
        "graphql-config@2.2.1",
        "graphql-import@0.7.1",
        "lodash@4.17.20"
      ],
      "upgradePath": [
        false,
        "graphiql@0.17.5",
        "codemirror-graphql@0.11.6",
        "graphql-language-service-interface@2.3.3",
        "graphql-language-service-utils@2.3.3",
        "graphql-config@2.2.1",
        "graphql-import@0.7.1",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.20"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-11-17T14:07:17.048472Z",
      "credit": [
        "Marc Hassan"
      ],
      "cvssScore": 7.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Command Injection via `template`.\r\n\r\n### PoC\r\n```js\r\nvar _ = require('lodash');\r\n\r\n_.template('', { variable: '){console.log(process.env)}; with(obj' })()\r\n```\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c)\n- [Vulnerable Code](https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js#L14851)\n",
      "disclosureTime": "2020-11-17T13:02:10Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.21"
      ],
      "id": "SNYK-JS-LODASH-1040724",
      "identifiers": {
        "CWE": [
          "CWE-78"
        ],
        "GHSA": [
          "GHSA-35jh-r3h4-6jhm"
        ],
        "CVE": [
          "CVE-2021-23337"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:28:18.096614Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:50Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js%23L14851"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Command Injection",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "graphiql@0.17.5",
        "codemirror-graphql@0.11.6",
        "graphql-language-service-interface@2.3.3",
        "graphql-language-service-utils@2.3.3",
        "graphql-config@2.2.1",
        "graphql-import@0.7.1",
        "lodash@4.17.20"
      ],
      "upgradePath": [
        false,
        "graphiql@0.17.5",
        "codemirror-graphql@0.11.6",
        "graphql-language-service-interface@2.3.3",
        "graphql-language-service-utils@2.3.3",
        "graphql-config@2.2.1",
        "graphql-import@0.7.1",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.20"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2020-10-16T16:48:40.985673Z",
      "credit": [
        "Liyuan Chen"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `toNumber`, `trim` and `trimEnd` functions.\r\n\r\n### POC\r\n```\r\nvar lo = require('lodash');\r\n\r\nfunction build_blank (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\n\r\nvar s = build_blank(50000)\r\nvar time0 = Date.now();\r\nlo.trim(s)\r\nvar time_cost0 = Date.now() - time0;\r\nconsole.log(\"time_cost0: \" + time_cost0)\r\n\r\nvar time1 = Date.now();\r\nlo.toNumber(s)\r\nvar time_cost1 = Date.now() - time1;\r\nconsole.log(\"time_cost1: \" + time_cost1)\r\n\r\nvar time2 = Date.now();\r\nlo.trimEnd(s)\r\nvar time_cost2 = Date.now() - time2;\r\nconsole.log(\"time_cost2: \" + time_cost2)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a)\n- [GitHub Fix PR](https://github.com/lodash/lodash/pull/5065)\n",
      "disclosureTime": "2020-10-16T16:47:34Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.21"
      ],
      "id": "SNYK-JS-LODASH-1018905",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2020-28500"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:26:11.286253Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:49Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a"
        },
        {
          "title": "GitHub Fix PR",
          "url": "https://github.com/lodash/lodash/pull/5065"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "graphiql@0.17.5",
        "codemirror-graphql@0.11.6",
        "graphql-language-service-interface@2.3.3",
        "graphql-language-service-parser@1.5.2",
        "graphql-language-service-types@1.5.2",
        "graphql-config@2.2.1",
        "lodash@4.17.20"
      ],
      "upgradePath": [
        false,
        "graphiql@0.17.5",
        "codemirror-graphql@0.11.6",
        "graphql-language-service-interface@2.3.3",
        "graphql-language-service-parser@1.5.2",
        "graphql-language-service-types@1.5.2",
        "graphql-config@2.2.1",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.20"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-11-17T14:07:17.048472Z",
      "credit": [
        "Marc Hassan"
      ],
      "cvssScore": 7.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Command Injection via `template`.\r\n\r\n### PoC\r\n```js\r\nvar _ = require('lodash');\r\n\r\n_.template('', { variable: '){console.log(process.env)}; with(obj' })()\r\n```\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c)\n- [Vulnerable Code](https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js#L14851)\n",
      "disclosureTime": "2020-11-17T13:02:10Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.21"
      ],
      "id": "SNYK-JS-LODASH-1040724",
      "identifiers": {
        "CWE": [
          "CWE-78"
        ],
        "GHSA": [
          "GHSA-35jh-r3h4-6jhm"
        ],
        "CVE": [
          "CVE-2021-23337"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:28:18.096614Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:50Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js%23L14851"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Command Injection",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "graphiql@0.17.5",
        "codemirror-graphql@0.11.6",
        "graphql-language-service-interface@2.3.3",
        "graphql-language-service-parser@1.5.2",
        "graphql-language-service-types@1.5.2",
        "graphql-config@2.2.1",
        "lodash@4.17.20"
      ],
      "upgradePath": [
        false,
        "graphiql@0.17.5",
        "codemirror-graphql@0.11.6",
        "graphql-language-service-interface@2.3.3",
        "graphql-language-service-parser@1.5.2",
        "graphql-language-service-types@1.5.2",
        "graphql-config@2.2.1",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.20"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2020-10-16T16:48:40.985673Z",
      "credit": [
        "Liyuan Chen"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `toNumber`, `trim` and `trimEnd` functions.\r\n\r\n### POC\r\n```\r\nvar lo = require('lodash');\r\n\r\nfunction build_blank (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\n\r\nvar s = build_blank(50000)\r\nvar time0 = Date.now();\r\nlo.trim(s)\r\nvar time_cost0 = Date.now() - time0;\r\nconsole.log(\"time_cost0: \" + time_cost0)\r\n\r\nvar time1 = Date.now();\r\nlo.toNumber(s)\r\nvar time_cost1 = Date.now() - time1;\r\nconsole.log(\"time_cost1: \" + time_cost1)\r\n\r\nvar time2 = Date.now();\r\nlo.trimEnd(s)\r\nvar time_cost2 = Date.now() - time2;\r\nconsole.log(\"time_cost2: \" + time_cost2)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a)\n- [GitHub Fix PR](https://github.com/lodash/lodash/pull/5065)\n",
      "disclosureTime": "2020-10-16T16:47:34Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.21"
      ],
      "id": "SNYK-JS-LODASH-1018905",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2020-28500"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:26:11.286253Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:49Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a"
        },
        {
          "title": "GitHub Fix PR",
          "url": "https://github.com/lodash/lodash/pull/5065"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "graphiql@0.17.5",
        "codemirror-graphql@0.11.6",
        "graphql-language-service-interface@2.3.3",
        "graphql-language-service-utils@2.3.3",
        "graphql-language-service-types@1.5.2",
        "graphql-config@2.2.1",
        "lodash@4.17.20"
      ],
      "upgradePath": [
        false,
        "graphiql@0.17.5",
        "codemirror-graphql@0.11.6",
        "graphql-language-service-interface@2.3.3",
        "graphql-language-service-utils@2.3.3",
        "graphql-language-service-types@1.5.2",
        "graphql-config@2.2.1",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.20"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-11-17T14:07:17.048472Z",
      "credit": [
        "Marc Hassan"
      ],
      "cvssScore": 7.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Command Injection via `template`.\r\n\r\n### PoC\r\n```js\r\nvar _ = require('lodash');\r\n\r\n_.template('', { variable: '){console.log(process.env)}; with(obj' })()\r\n```\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c)\n- [Vulnerable Code](https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js#L14851)\n",
      "disclosureTime": "2020-11-17T13:02:10Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.21"
      ],
      "id": "SNYK-JS-LODASH-1040724",
      "identifiers": {
        "CWE": [
          "CWE-78"
        ],
        "GHSA": [
          "GHSA-35jh-r3h4-6jhm"
        ],
        "CVE": [
          "CVE-2021-23337"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:28:18.096614Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:50Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js%23L14851"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Command Injection",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "graphiql@0.17.5",
        "codemirror-graphql@0.11.6",
        "graphql-language-service-interface@2.3.3",
        "graphql-language-service-utils@2.3.3",
        "graphql-language-service-types@1.5.2",
        "graphql-config@2.2.1",
        "lodash@4.17.20"
      ],
      "upgradePath": [
        false,
        "graphiql@0.17.5",
        "codemirror-graphql@0.11.6",
        "graphql-language-service-interface@2.3.3",
        "graphql-language-service-utils@2.3.3",
        "graphql-language-service-types@1.5.2",
        "graphql-config@2.2.1",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.20"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2020-10-16T16:48:40.985673Z",
      "credit": [
        "Liyuan Chen"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `toNumber`, `trim` and `trimEnd` functions.\r\n\r\n### POC\r\n```\r\nvar lo = require('lodash');\r\n\r\nfunction build_blank (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\n\r\nvar s = build_blank(50000)\r\nvar time0 = Date.now();\r\nlo.trim(s)\r\nvar time_cost0 = Date.now() - time0;\r\nconsole.log(\"time_cost0: \" + time_cost0)\r\n\r\nvar time1 = Date.now();\r\nlo.toNumber(s)\r\nvar time_cost1 = Date.now() - time1;\r\nconsole.log(\"time_cost1: \" + time_cost1)\r\n\r\nvar time2 = Date.now();\r\nlo.trimEnd(s)\r\nvar time_cost2 = Date.now() - time2;\r\nconsole.log(\"time_cost2: \" + time_cost2)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a)\n- [GitHub Fix PR](https://github.com/lodash/lodash/pull/5065)\n",
      "disclosureTime": "2020-10-16T16:47:34Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.21"
      ],
      "id": "SNYK-JS-LODASH-1018905",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2020-28500"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:26:11.286253Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:49Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a"
        },
        {
          "title": "GitHub Fix PR",
          "url": "https://github.com/lodash/lodash/pull/5065"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "graphiql@0.17.5",
        "codemirror-graphql@0.11.6",
        "graphql-language-service-interface@2.3.3",
        "graphql-language-service-parser@1.5.2",
        "graphql-language-service-types@1.5.2",
        "graphql-config@2.2.1",
        "graphql-import@0.7.1",
        "lodash@4.17.20"
      ],
      "upgradePath": [
        false,
        "graphiql@0.17.5",
        "codemirror-graphql@0.11.6",
        "graphql-language-service-interface@2.3.3",
        "graphql-language-service-parser@1.5.2",
        "graphql-language-service-types@1.5.2",
        "graphql-config@2.2.1",
        "graphql-import@0.7.1",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.20"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-11-17T14:07:17.048472Z",
      "credit": [
        "Marc Hassan"
      ],
      "cvssScore": 7.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Command Injection via `template`.\r\n\r\n### PoC\r\n```js\r\nvar _ = require('lodash');\r\n\r\n_.template('', { variable: '){console.log(process.env)}; with(obj' })()\r\n```\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c)\n- [Vulnerable Code](https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js#L14851)\n",
      "disclosureTime": "2020-11-17T13:02:10Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.21"
      ],
      "id": "SNYK-JS-LODASH-1040724",
      "identifiers": {
        "CWE": [
          "CWE-78"
        ],
        "GHSA": [
          "GHSA-35jh-r3h4-6jhm"
        ],
        "CVE": [
          "CVE-2021-23337"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:28:18.096614Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:50Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js%23L14851"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Command Injection",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "graphiql@0.17.5",
        "codemirror-graphql@0.11.6",
        "graphql-language-service-interface@2.3.3",
        "graphql-language-service-parser@1.5.2",
        "graphql-language-service-types@1.5.2",
        "graphql-config@2.2.1",
        "graphql-import@0.7.1",
        "lodash@4.17.20"
      ],
      "upgradePath": [
        false,
        "graphiql@0.17.5",
        "codemirror-graphql@0.11.6",
        "graphql-language-service-interface@2.3.3",
        "graphql-language-service-parser@1.5.2",
        "graphql-language-service-types@1.5.2",
        "graphql-config@2.2.1",
        "graphql-import@0.7.1",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.20"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2020-10-16T16:48:40.985673Z",
      "credit": [
        "Liyuan Chen"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `toNumber`, `trim` and `trimEnd` functions.\r\n\r\n### POC\r\n```\r\nvar lo = require('lodash');\r\n\r\nfunction build_blank (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\n\r\nvar s = build_blank(50000)\r\nvar time0 = Date.now();\r\nlo.trim(s)\r\nvar time_cost0 = Date.now() - time0;\r\nconsole.log(\"time_cost0: \" + time_cost0)\r\n\r\nvar time1 = Date.now();\r\nlo.toNumber(s)\r\nvar time_cost1 = Date.now() - time1;\r\nconsole.log(\"time_cost1: \" + time_cost1)\r\n\r\nvar time2 = Date.now();\r\nlo.trimEnd(s)\r\nvar time_cost2 = Date.now() - time2;\r\nconsole.log(\"time_cost2: \" + time_cost2)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a)\n- [GitHub Fix PR](https://github.com/lodash/lodash/pull/5065)\n",
      "disclosureTime": "2020-10-16T16:47:34Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.21"
      ],
      "id": "SNYK-JS-LODASH-1018905",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2020-28500"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:26:11.286253Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:49Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a"
        },
        {
          "title": "GitHub Fix PR",
          "url": "https://github.com/lodash/lodash/pull/5065"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "graphiql@0.17.5",
        "codemirror-graphql@0.11.6",
        "graphql-language-service-interface@2.3.3",
        "graphql-language-service-utils@2.3.3",
        "graphql-language-service-types@1.5.2",
        "graphql-config@2.2.1",
        "graphql-import@0.7.1",
        "lodash@4.17.20"
      ],
      "upgradePath": [
        false,
        "graphiql@0.17.5",
        "codemirror-graphql@0.11.6",
        "graphql-language-service-interface@2.3.3",
        "graphql-language-service-utils@2.3.3",
        "graphql-language-service-types@1.5.2",
        "graphql-config@2.2.1",
        "graphql-import@0.7.1",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.20"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-11-17T14:07:17.048472Z",
      "credit": [
        "Marc Hassan"
      ],
      "cvssScore": 7.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Command Injection via `template`.\r\n\r\n### PoC\r\n```js\r\nvar _ = require('lodash');\r\n\r\n_.template('', { variable: '){console.log(process.env)}; with(obj' })()\r\n```\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c)\n- [Vulnerable Code](https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js#L14851)\n",
      "disclosureTime": "2020-11-17T13:02:10Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.21"
      ],
      "id": "SNYK-JS-LODASH-1040724",
      "identifiers": {
        "CWE": [
          "CWE-78"
        ],
        "GHSA": [
          "GHSA-35jh-r3h4-6jhm"
        ],
        "CVE": [
          "CVE-2021-23337"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:28:18.096614Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:50Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js%23L14851"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Command Injection",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "graphiql@0.17.5",
        "codemirror-graphql@0.11.6",
        "graphql-language-service-interface@2.3.3",
        "graphql-language-service-utils@2.3.3",
        "graphql-language-service-types@1.5.2",
        "graphql-config@2.2.1",
        "graphql-import@0.7.1",
        "lodash@4.17.20"
      ],
      "upgradePath": [
        false,
        "graphiql@0.17.5",
        "codemirror-graphql@0.11.6",
        "graphql-language-service-interface@2.3.3",
        "graphql-language-service-utils@2.3.3",
        "graphql-language-service-types@1.5.2",
        "graphql-config@2.2.1",
        "graphql-import@0.7.1",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.20"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2020-10-16T16:48:40.985673Z",
      "credit": [
        "Liyuan Chen"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `toNumber`, `trim` and `trimEnd` functions.\r\n\r\n### POC\r\n```\r\nvar lo = require('lodash');\r\n\r\nfunction build_blank (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\n\r\nvar s = build_blank(50000)\r\nvar time0 = Date.now();\r\nlo.trim(s)\r\nvar time_cost0 = Date.now() - time0;\r\nconsole.log(\"time_cost0: \" + time_cost0)\r\n\r\nvar time1 = Date.now();\r\nlo.toNumber(s)\r\nvar time_cost1 = Date.now() - time1;\r\nconsole.log(\"time_cost1: \" + time_cost1)\r\n\r\nvar time2 = Date.now();\r\nlo.trimEnd(s)\r\nvar time_cost2 = Date.now() - time2;\r\nconsole.log(\"time_cost2: \" + time_cost2)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a)\n- [GitHub Fix PR](https://github.com/lodash/lodash/pull/5065)\n",
      "disclosureTime": "2020-10-16T16:47:34Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.21"
      ],
      "id": "SNYK-JS-LODASH-1018905",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2020-28500"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:26:11.286253Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:49Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a"
        },
        {
          "title": "GitHub Fix PR",
          "url": "https://github.com/lodash/lodash/pull/5065"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "graphql-to-postman@0.0.6",
        "lodash@4.17.15"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.15"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-11-17T14:07:17.048472Z",
      "credit": [
        "Marc Hassan"
      ],
      "cvssScore": 7.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Command Injection via `template`.\r\n\r\n### PoC\r\n```js\r\nvar _ = require('lodash');\r\n\r\n_.template('', { variable: '){console.log(process.env)}; with(obj' })()\r\n```\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c)\n- [Vulnerable Code](https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js#L14851)\n",
      "disclosureTime": "2020-11-17T13:02:10Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.21"
      ],
      "id": "SNYK-JS-LODASH-1040724",
      "identifiers": {
        "CWE": [
          "CWE-78"
        ],
        "GHSA": [
          "GHSA-35jh-r3h4-6jhm"
        ],
        "CVE": [
          "CVE-2021-23337"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:28:18.096614Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:50Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js%23L14851"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Command Injection",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "graphql-to-postman@0.0.6",
        "lodash@4.17.15"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.15"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-04-28T14:32:13.683154Z",
      "credit": [
        "posix"
      ],
      "cvssScore": 8.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The function `zipObjectDeep` can be tricked into adding or modifying properties of the Object prototype. These properties will be present on all objects.\r\n\r\n## PoC\r\n```\r\nconst _ = require('lodash');\r\n_.zipObjectDeep(['__proto__.z'],[123])\r\nconsole.log(z) // 123\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.20 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c84fe82760fb2d3e03a63379b297a1cc1a2fce12)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4759)\n",
      "disclosureTime": "2020-04-27T22:14:18Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.20"
      ],
      "id": "SNYK-JS-LODASH-567746",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "NSP": [
          "1523"
        ],
        "CVE": [
          "CVE-2020-8203"
        ],
        "GHSA": [
          "GHSA-p6mc-m468-83gw"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:28:33.431814Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [
        {
          "comments": [],
          "id": "patch:SNYK-JS-LODASH-567746:0",
          "modificationTime": "2020-04-30T14:28:46.729327Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/lodash/20200430/lodash_0_0_20200430_6baae67d501e4c45021280876d42efe351e77551.patch"
          ],
          "version": ">=4.14.2"
        }
      ],
      "proprietary": false,
      "publicationTime": "2020-04-28T14:59:14Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/c84fe82760fb2d3e03a63379b297a1cc1a2fce12"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/lodash/lodash/pull/4759"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.20"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "graphql-to-postman@0.0.6",
        "lodash@4.17.15"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": true,
      "name": "lodash",
      "version": "4.17.15"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-08-21T12:52:58.443440Z",
      "credit": [
        "awarau"
      ],
      "cvssScore": 7.3,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `setWith` and `set` functions.\r\n\r\n## PoC by awarau\r\n* Create a JS file with this contents:\r\n```\r\nlod = require('lodash')\r\nlod.setWith({}, \"__proto__[test]\", \"123\")\r\nlod.set({}, \"__proto__[test2]\", \"456\")\r\nconsole.log(Object.prototype)\r\n```\r\n* Execute it with `node`\r\n* Observe that `test` and `test2` is now in the `Object.prototype`.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.17 or higher.\n## References\n- [HackerOne Report](https://hackerone.com/reports/864701)\n",
      "disclosureTime": "2020-08-21T10:34:29Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.17"
      ],
      "id": "SNYK-JS-LODASH-608086",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": []
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-05-25T11:18:25.335427Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-08-21T12:53:03Z",
      "references": [
        {
          "title": "HackerOne Report",
          "url": "https://hackerone.com/reports/864701"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.17"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "graphql-to-postman@0.0.6",
        "lodash@4.17.15"
      ],
      "upgradePath": [
        false,
        "graphql-to-postman@0.0.8",
        "lodash@4.17.19"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.15"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2020-10-16T16:48:40.985673Z",
      "credit": [
        "Liyuan Chen"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `toNumber`, `trim` and `trimEnd` functions.\r\n\r\n### POC\r\n```\r\nvar lo = require('lodash');\r\n\r\nfunction build_blank (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\n\r\nvar s = build_blank(50000)\r\nvar time0 = Date.now();\r\nlo.trim(s)\r\nvar time_cost0 = Date.now() - time0;\r\nconsole.log(\"time_cost0: \" + time_cost0)\r\n\r\nvar time1 = Date.now();\r\nlo.toNumber(s)\r\nvar time_cost1 = Date.now() - time1;\r\nconsole.log(\"time_cost1: \" + time_cost1)\r\n\r\nvar time2 = Date.now();\r\nlo.trimEnd(s)\r\nvar time_cost2 = Date.now() - time2;\r\nconsole.log(\"time_cost2: \" + time_cost2)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a)\n- [GitHub Fix PR](https://github.com/lodash/lodash/pull/5065)\n",
      "disclosureTime": "2020-10-16T16:47:34Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.21"
      ],
      "id": "SNYK-JS-LODASH-1018905",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2020-28500"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:26:11.286253Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:49Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a"
        },
        {
          "title": "GitHub Fix PR",
          "url": "https://github.com/lodash/lodash/pull/5065"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "graphql-to-postman@0.0.6",
        "postman-collection@3.5.5",
        "lodash@4.17.15"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.15"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-11-17T14:07:17.048472Z",
      "credit": [
        "Marc Hassan"
      ],
      "cvssScore": 7.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Command Injection via `template`.\r\n\r\n### PoC\r\n```js\r\nvar _ = require('lodash');\r\n\r\n_.template('', { variable: '){console.log(process.env)}; with(obj' })()\r\n```\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c)\n- [Vulnerable Code](https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js#L14851)\n",
      "disclosureTime": "2020-11-17T13:02:10Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.21"
      ],
      "id": "SNYK-JS-LODASH-1040724",
      "identifiers": {
        "CWE": [
          "CWE-78"
        ],
        "GHSA": [
          "GHSA-35jh-r3h4-6jhm"
        ],
        "CVE": [
          "CVE-2021-23337"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:28:18.096614Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:50Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js%23L14851"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Command Injection",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "graphql-to-postman@0.0.6",
        "postman-collection@3.5.5",
        "lodash@4.17.15"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.15"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-04-28T14:32:13.683154Z",
      "credit": [
        "posix"
      ],
      "cvssScore": 8.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The function `zipObjectDeep` can be tricked into adding or modifying properties of the Object prototype. These properties will be present on all objects.\r\n\r\n## PoC\r\n```\r\nconst _ = require('lodash');\r\n_.zipObjectDeep(['__proto__.z'],[123])\r\nconsole.log(z) // 123\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.20 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c84fe82760fb2d3e03a63379b297a1cc1a2fce12)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4759)\n",
      "disclosureTime": "2020-04-27T22:14:18Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.20"
      ],
      "id": "SNYK-JS-LODASH-567746",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "NSP": [
          "1523"
        ],
        "CVE": [
          "CVE-2020-8203"
        ],
        "GHSA": [
          "GHSA-p6mc-m468-83gw"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:28:33.431814Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [
        {
          "comments": [],
          "id": "patch:SNYK-JS-LODASH-567746:0",
          "modificationTime": "2020-04-30T14:28:46.729327Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/lodash/20200430/lodash_0_0_20200430_6baae67d501e4c45021280876d42efe351e77551.patch"
          ],
          "version": ">=4.14.2"
        }
      ],
      "proprietary": false,
      "publicationTime": "2020-04-28T14:59:14Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/c84fe82760fb2d3e03a63379b297a1cc1a2fce12"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/lodash/lodash/pull/4759"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.20"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "graphql-to-postman@0.0.6",
        "postman-collection@3.5.5",
        "lodash@4.17.15"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": true,
      "name": "lodash",
      "version": "4.17.15"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-08-21T12:52:58.443440Z",
      "credit": [
        "awarau"
      ],
      "cvssScore": 7.3,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `setWith` and `set` functions.\r\n\r\n## PoC by awarau\r\n* Create a JS file with this contents:\r\n```\r\nlod = require('lodash')\r\nlod.setWith({}, \"__proto__[test]\", \"123\")\r\nlod.set({}, \"__proto__[test2]\", \"456\")\r\nconsole.log(Object.prototype)\r\n```\r\n* Execute it with `node`\r\n* Observe that `test` and `test2` is now in the `Object.prototype`.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.17 or higher.\n## References\n- [HackerOne Report](https://hackerone.com/reports/864701)\n",
      "disclosureTime": "2020-08-21T10:34:29Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.17"
      ],
      "id": "SNYK-JS-LODASH-608086",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": []
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-05-25T11:18:25.335427Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-08-21T12:53:03Z",
      "references": [
        {
          "title": "HackerOne Report",
          "url": "https://hackerone.com/reports/864701"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.17"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "graphql-to-postman@0.0.6",
        "postman-collection@3.5.5",
        "lodash@4.17.15"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.15"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2020-10-16T16:48:40.985673Z",
      "credit": [
        "Liyuan Chen"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `toNumber`, `trim` and `trimEnd` functions.\r\n\r\n### POC\r\n```\r\nvar lo = require('lodash');\r\n\r\nfunction build_blank (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\n\r\nvar s = build_blank(50000)\r\nvar time0 = Date.now();\r\nlo.trim(s)\r\nvar time_cost0 = Date.now() - time0;\r\nconsole.log(\"time_cost0: \" + time_cost0)\r\n\r\nvar time1 = Date.now();\r\nlo.toNumber(s)\r\nvar time_cost1 = Date.now() - time1;\r\nconsole.log(\"time_cost1: \" + time_cost1)\r\n\r\nvar time2 = Date.now();\r\nlo.trimEnd(s)\r\nvar time_cost2 = Date.now() - time2;\r\nconsole.log(\"time_cost2: \" + time_cost2)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a)\n- [GitHub Fix PR](https://github.com/lodash/lodash/pull/5065)\n",
      "disclosureTime": "2020-10-16T16:47:34Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.21"
      ],
      "id": "SNYK-JS-LODASH-1018905",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2020-28500"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:26:11.286253Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:49Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a"
        },
        {
          "title": "GitHub Fix PR",
          "url": "https://github.com/lodash/lodash/pull/5065"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger2-postman2-converter@0.0.3",
        "lodash@4.17.5"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.5"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-11-17T14:07:17.048472Z",
      "credit": [
        "Marc Hassan"
      ],
      "cvssScore": 7.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Command Injection via `template`.\r\n\r\n### PoC\r\n```js\r\nvar _ = require('lodash');\r\n\r\n_.template('', { variable: '){console.log(process.env)}; with(obj' })()\r\n```\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c)\n- [Vulnerable Code](https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js#L14851)\n",
      "disclosureTime": "2020-11-17T13:02:10Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.21"
      ],
      "id": "SNYK-JS-LODASH-1040724",
      "identifiers": {
        "CWE": [
          "CWE-78"
        ],
        "GHSA": [
          "GHSA-35jh-r3h4-6jhm"
        ],
        "CVE": [
          "CVE-2021-23337"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:28:18.096614Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:50Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js%23L14851"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Command Injection",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger2-postman2-converter@0.0.3",
        "lodash@4.17.5"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.5"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2019-06-19T12:04:21.040000Z",
      "credit": [
        "Snyk Security Team"
      ],
      "cvssScore": 7.3,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The function `defaultsDeep` could be tricked into adding or modifying properties of `Object.prototype` using a `constructor` payload.\r\n\r\n## PoC by Snyk\r\n```\r\nconst mergeFn = require('lodash').defaultsDeep;\r\nconst payload = '{\"constructor\": {\"prototype\": {\"a0\": true}}}'\r\n\r\nfunction check() {\r\n    mergeFn({}, JSON.parse(payload));\r\n    if (({})[`a0`] === true) {\r\n        console.log(`Vulnerable to Prototype Pollution via ${payload}`);\r\n    }\r\n  }\r\n\r\ncheck();\r\n```\r\n\r\nFor more information, check out our [blog post](https://snyk.io/blog/snyk-research-team-discovers-severe-prototype-pollution-security-vulnerabilities-affecting-all-versions-of-lodash/)\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.12 or higher.\n## References\n- [GitHub Issue](https://github.com/lodash/lodash/issues/4348)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4336)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4355)\n- [GitHub PR](https://github.com/sailshq/lodash/pull/1)\n- [Node Security Advisory](https://www.npmjs.com/advisories/1065)\n- [Snyk Blog](https://snyk.io/blog/snyk-research-team-discovers-severe-prototype-pollution-security-vulnerabilities-affecting-all-versions-of-lodash/)\n",
      "disclosureTime": "2019-06-19T11:45:02Z",
      "exploit": "Proof of Concept",
      "functions": [
        {
          "functionId": {
            "filePath": "lodash.js",
            "className": null,
            "functionName": "runInContext.customDefaultsMerge"
          },
          "version": [
            ">=4.17.3 <4.17.12"
          ]
        }
      ],
      "fixedIn": [
        "4.17.12"
      ],
      "id": "SNYK-JS-LODASH-450202",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "NSP": [
          "1065"
        ],
        "CVE": [
          "CVE-2019-10744"
        ],
        "GHSA": [
          "GHSA-jf85-cpcp-j695"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:25:20.940478Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [
        {
          "comments": [],
          "id": "patch:SNYK-JS-LODASH-450202:0",
          "modificationTime": "2019-12-03T11:40:45.719849Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/lodash/20190702/lodash_20190702_0_0_1f8ea07746963a535385a5befc19fa687a627d2b.patch"
          ],
          "version": "=4.17.11"
        }
      ],
      "proprietary": true,
      "publicationTime": "2019-07-02T11:45:01Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/lodash/lodash/issues/4348"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/lodash/lodash/pull/4336"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/lodash/lodash/pull/4355"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/sailshq/lodash/pull/1"
        },
        {
          "title": "Node Security Advisory",
          "url": "https://www.npmjs.com/advisories/1065"
        },
        {
          "title": "Snyk Blog",
          "url": "https://snyk.io/blog/snyk-research-team-discovers-severe-prototype-pollution-security-vulnerabilities-affecting-all-versions-of-lodash/"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [
        {
          "functionId": {
            "filePath": "lodash.js",
            "functionName": "runInContext.customDefaultsMerge"
          },
          "version": [
            ">=4.17.3 <4.17.12"
          ]
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.12"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger2-postman2-converter@0.0.3",
        "lodash@4.17.5"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.5"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-04-28T14:32:13.683154Z",
      "credit": [
        "posix"
      ],
      "cvssScore": 8.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The function `zipObjectDeep` can be tricked into adding or modifying properties of the Object prototype. These properties will be present on all objects.\r\n\r\n## PoC\r\n```\r\nconst _ = require('lodash');\r\n_.zipObjectDeep(['__proto__.z'],[123])\r\nconsole.log(z) // 123\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.20 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c84fe82760fb2d3e03a63379b297a1cc1a2fce12)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4759)\n",
      "disclosureTime": "2020-04-27T22:14:18Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.20"
      ],
      "id": "SNYK-JS-LODASH-567746",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "NSP": [
          "1523"
        ],
        "CVE": [
          "CVE-2020-8203"
        ],
        "GHSA": [
          "GHSA-p6mc-m468-83gw"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:28:33.431814Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [
        {
          "comments": [],
          "id": "patch:SNYK-JS-LODASH-567746:0",
          "modificationTime": "2020-04-30T14:28:46.729327Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/lodash/20200430/lodash_0_0_20200430_6baae67d501e4c45021280876d42efe351e77551.patch"
          ],
          "version": ">=4.14.2"
        }
      ],
      "proprietary": false,
      "publicationTime": "2020-04-28T14:59:14Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/c84fe82760fb2d3e03a63379b297a1cc1a2fce12"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/lodash/lodash/pull/4759"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.20"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger2-postman2-converter@0.0.3",
        "lodash@4.17.5"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": true,
      "name": "lodash",
      "version": "4.17.5"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-08-21T12:52:58.443440Z",
      "credit": [
        "awarau"
      ],
      "cvssScore": 7.3,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `setWith` and `set` functions.\r\n\r\n## PoC by awarau\r\n* Create a JS file with this contents:\r\n```\r\nlod = require('lodash')\r\nlod.setWith({}, \"__proto__[test]\", \"123\")\r\nlod.set({}, \"__proto__[test2]\", \"456\")\r\nconsole.log(Object.prototype)\r\n```\r\n* Execute it with `node`\r\n* Observe that `test` and `test2` is now in the `Object.prototype`.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.17 or higher.\n## References\n- [HackerOne Report](https://hackerone.com/reports/864701)\n",
      "disclosureTime": "2020-08-21T10:34:29Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.17"
      ],
      "id": "SNYK-JS-LODASH-608086",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": []
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-05-25T11:18:25.335427Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-08-21T12:53:03Z",
      "references": [
        {
          "title": "HackerOne Report",
          "url": "https://hackerone.com/reports/864701"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.17"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger2-postman2-converter@0.0.3",
        "lodash@4.17.5"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.5"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2019-02-03T09:06:37.726000Z",
      "credit": [
        "asgerf"
      ],
      "cvssScore": 7.3,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The functions `merge`, `mergeWith`, and `defaultsDeep` could be tricked into adding or modifying properties of `Object.prototype`. This is due to an incomplete fix to `CVE-2018-3721`.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.11 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/90e6199a161b6445b01454517b40ef65ebecd2ad)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4337)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/1066)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/1068)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/1071)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/782)\n- [POC: HackerOne Report](https://hackerone.com/reports/380873)\n",
      "disclosureTime": "2018-08-31T18:21:00Z",
      "exploit": "Proof of Concept",
      "functions": [
        {
          "functionId": {
            "filePath": "lodash.js",
            "className": null,
            "functionName": "safeGet"
          },
          "version": [
            ">=4.17.5 <4.17.11"
          ]
        },
        {
          "functionId": {
            "filePath": "lodash.js",
            "className": null,
            "functionName": "runInContext.baseMerge"
          },
          "version": [
            ">=4.0.0 <4.17.5"
          ]
        },
        {
          "functionId": {
            "filePath": "lodash.js",
            "className": null,
            "functionName": "runInContext.baseMergeDeep"
          },
          "version": [
            ">=4.0.0 <4.17.5"
          ]
        },
        {
          "functionId": {
            "filePath": "lodash.js",
            "className": null,
            "functionName": "runInContext.assignMergeValue"
          },
          "version": [
            ">=4.0.0 <4.17.5"
          ]
        },
        {
          "functionId": {
            "filePath": "index.js",
            "className": null,
            "functionName": "runInContext.baseMerge"
          },
          "version": [
            ">=3.0.0 <4.0.0"
          ]
        },
        {
          "functionId": {
            "filePath": "index.js",
            "className": null,
            "functionName": "runInContext.baseMergeDeep"
          },
          "version": [
            ">=3.0.0 <4.0.0"
          ]
        },
        {
          "functionId": {
            "filePath": "lodash.js",
            "className": null,
            "functionName": "runInContext.mergeDefaults"
          },
          "version": [
            ">=4.0.0 <4.17.3"
          ]
        },
        {
          "functionId": {
            "filePath": "lodash.js",
            "className": null,
            "functionName": "runInContext.merge"
          },
          "version": [
            ">=2.0.0 <3.0.0"
          ]
        },
        {
          "functionId": {
            "filePath": "lodash.js",
            "className": null,
            "functionName": "merge"
          },
          "version": [
            ">=0.9.0 <1.0.0"
          ]
        },
        {
          "functionId": {
            "filePath": "dist/lodash.js",
            "className": null,
            "functionName": "merge"
          },
          "version": [
            ">=1.0.0 <1.0.3"
          ]
        },
        {
          "functionId": {
            "filePath": "dist/lodash.js",
            "className": null,
            "functionName": "runInContext.merge"
          },
          "version": [
            ">=1.1.0 <2.0.0"
          ]
        }
      ],
      "fixedIn": [
        "4.17.11"
      ],
      "id": "SNYK-JS-LODASH-73638",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "NSP": [
          "782",
          "1066",
          "1068",
          "1071"
        ],
        "CVE": [
          "CVE-2018-16487"
        ],
        "GHSA": [
          "GHSA-4xc9-xhrj-v574"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:27:17.510305Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2019-02-01T18:21:00Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/90e6199a161b6445b01454517b40ef65ebecd2ad"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/lodash/lodash/pull/4337"
        },
        {
          "title": "NPM Security Advisory",
          "url": "https://www.npmjs.com/advisories/1066"
        },
        {
          "title": "NPM Security Advisory",
          "url": "https://www.npmjs.com/advisories/1068"
        },
        {
          "title": "NPM Security Advisory",
          "url": "https://www.npmjs.com/advisories/1071"
        },
        {
          "title": "NPM Security Advisory",
          "url": "https://www.npmjs.com/advisories/782"
        },
        {
          "title": "POC: HackerOne Report",
          "url": "https://hackerone.com/reports/380873"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [
        {
          "functionId": {
            "filePath": "lodash.js",
            "functionName": "safeGet"
          },
          "version": [
            ">=4.17.5 <4.17.11"
          ]
        },
        {
          "functionId": {
            "filePath": "lodash.js",
            "functionName": "runInContext.baseMerge"
          },
          "version": [
            ">=4.0.0 <4.17.5"
          ]
        },
        {
          "functionId": {
            "filePath": "lodash.js",
            "functionName": "runInContext.baseMergeDeep"
          },
          "version": [
            ">=4.0.0 <4.17.5"
          ]
        },
        {
          "functionId": {
            "filePath": "lodash.js",
            "functionName": "runInContext.assignMergeValue"
          },
          "version": [
            ">=4.0.0 <4.17.5"
          ]
        },
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "runInContext.baseMerge"
          },
          "version": [
            ">=3.0.0 <4.0.0"
          ]
        },
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "runInContext.baseMergeDeep"
          },
          "version": [
            ">=3.0.0 <4.0.0"
          ]
        },
        {
          "functionId": {
            "filePath": "lodash.js",
            "functionName": "runInContext.mergeDefaults"
          },
          "version": [
            ">=4.0.0 <4.17.3"
          ]
        },
        {
          "functionId": {
            "filePath": "lodash.js",
            "functionName": "runInContext.merge"
          },
          "version": [
            ">=2.0.0 <3.0.0"
          ]
        },
        {
          "functionId": {
            "filePath": "lodash.js",
            "functionName": "merge"
          },
          "version": [
            ">=0.9.0 <1.0.0"
          ]
        },
        {
          "functionId": {
            "filePath": "dist/lodash.js",
            "functionName": "merge"
          },
          "version": [
            ">=1.0.0 <1.0.3"
          ]
        },
        {
          "functionId": {
            "filePath": "dist/lodash.js",
            "functionName": "runInContext.merge"
          },
          "version": [
            ">=1.1.0 <2.0.0"
          ]
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.11"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger2-postman2-converter@0.0.3",
        "lodash@4.17.5"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.5"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:H/UI:N/S:U/C:N/I:N/A:H/E:P",
      "alternativeIds": [],
      "creationTime": "2019-02-03T09:18:05.060741Z",
      "credit": [
        "cristianstaicu"
      ],
      "cvssScore": 4.4,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). It parses dates using regex strings, which may cause a slowdown of 2 seconds per 50k characters.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `lodash` to version 4.17.11 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/5c08f18d365b64063bfbfa686cbb97cdd6267347)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4450)\n- [POC: GitHub Issue](https://github.com/lodash/lodash/issues/3359)\n",
      "disclosureTime": "2017-09-05T09:14:29Z",
      "exploit": "Proof of Concept",
      "functions": [
        {
          "functionId": {
            "filePath": "lodash.js",
            "className": null,
            "functionName": "hasUnicodeWord"
          },
          "version": [
            ">=4.15.0 <4.17.11"
          ]
        }
      ],
      "fixedIn": [
        "4.17.11"
      ],
      "id": "SNYK-JS-LODASH-73639",
      "identifiers": {
        "CWE": [
          "CWE-185"
        ],
        "CVE": [
          "CVE-2019-1010266"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:27:32.267901Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2019-04-05T09:14:22Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/5c08f18d365b64063bfbfa686cbb97cdd6267347"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/lodash/lodash/pull/4450"
        },
        {
          "title": "POC: GitHub Issue",
          "url": "https://github.com/lodash/lodash/issues/3359"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [
        {
          "functionId": {
            "filePath": "lodash.js",
            "functionName": "hasUnicodeWord"
          },
          "version": [
            ">=4.15.0 <4.17.11"
          ]
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.11"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger2-postman2-converter@0.0.3",
        "lodash@4.17.5"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.5"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2022-03-27T14:00:23.274733Z",
      "credit": [
        "posix"
      ],
      "cvssScore": 8.2,
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Prototype Pollution. The function `zipObjectDeep` can be tricked into adding or modifying properties of the Object prototype. These properties will be present on all objects.\r\n\r\n## PoC\r\n```\r\nconst _ = require('lodash');\r\n_.zipObjectDeep(['__proto__.z'],[123])\r\nconsole.log(z) // 123\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash-es` to version 4.17.20 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c84fe82760fb2d3e03a63379b297a1cc1a2fce12)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4759)\n",
      "disclosureTime": "2020-04-27T22:14:18Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.20"
      ],
      "id": "SNYK-JS-LODASHES-2434283",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "NSP": [
          "1523"
        ],
        "CVE": [
          "CVE-2020-8203"
        ],
        "GHSA": [
          "GHSA-p6mc-m468-83gw"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:28:33.431814Z",
      "moduleName": "lodash-es",
      "packageManager": "npm",
      "packageName": "lodash-es",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-04-28T14:59:14Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/c84fe82760fb2d3e03a63379b297a1cc1a2fce12"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/lodash/lodash/pull/4759"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.20"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger-ui@3.25.0",
        "redux@3.7.2",
        "lodash-es@4.17.15"
      ],
      "upgradePath": [
        false,
        "swagger-ui@3.25.0",
        "redux@3.7.2",
        "lodash-es@4.17.20"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash-es",
      "version": "4.17.15"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2022-03-27T14:00:56.359552Z",
      "credit": [
        "Marc Hassan"
      ],
      "cvssScore": 7.2,
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Command Injection via `template`.\r\n\r\n### PoC\r\n```js\r\nvar _ = require('lodash');\r\n\r\n_.template('', { variable: '){console.log(process.env)}; with(obj' })()\r\n```\n## Remediation\nUpgrade `lodash-es` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c)\n- [Vulnerable Code](https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js#L14851)\n",
      "disclosureTime": "2020-11-17T13:02:10Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.21"
      ],
      "id": "SNYK-JS-LODASHES-2434284",
      "identifiers": {
        "CWE": [
          "CWE-78"
        ],
        "GHSA": [
          "GHSA-35jh-r3h4-6jhm"
        ],
        "CVE": [
          "CVE-2021-23337"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:28:18.096614Z",
      "moduleName": "lodash-es",
      "packageManager": "npm",
      "packageName": "lodash-es",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:50Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js%23L14851"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Command Injection",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger-ui@3.25.0",
        "redux@3.7.2",
        "lodash-es@4.17.15"
      ],
      "upgradePath": [
        false,
        "swagger-ui@3.25.0",
        "redux@3.7.2",
        "lodash-es@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash-es",
      "version": "4.17.15"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2022-03-27T14:01:59.637773Z",
      "credit": [
        "awarau"
      ],
      "cvssScore": 7.3,
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `setWith` and `set` functions.\r\n\r\n## PoC by awarau\r\n* Create a JS file with this contents:\r\n```\r\nlod = require('lodash')\r\nlod.setWith({}, \"__proto__[test]\", \"123\")\r\nlod.set({}, \"__proto__[test2]\", \"456\")\r\nconsole.log(Object.prototype)\r\n```\r\n* Execute it with `node`\r\n* Observe that `test` and `test2` is now in the `Object.prototype`.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash-es` to version 4.17.20 or higher.\n## References\n- [HackerOne Report](https://hackerone.com/reports/864701)\n",
      "disclosureTime": "2020-08-21T10:34:29Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.20"
      ],
      "id": "SNYK-JS-LODASHES-2434285",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": []
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-05-25T11:18:25.335427Z",
      "moduleName": "lodash-es",
      "packageManager": "npm",
      "packageName": "lodash-es",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-08-21T12:53:03Z",
      "references": [
        {
          "title": "HackerOne Report",
          "url": "https://hackerone.com/reports/864701"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.20"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger-ui@3.25.0",
        "redux@3.7.2",
        "lodash-es@4.17.15"
      ],
      "upgradePath": [
        false,
        "swagger-ui@3.25.0",
        "redux@3.7.2",
        "lodash-es@4.17.20"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash-es",
      "version": "4.17.15"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2022-03-27T14:03:57.745561Z",
      "credit": [
        "Liyuan Chen"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `toNumber`, `trim` and `trimEnd` functions.\r\n\r\n### POC\r\n```\r\nvar lo = require('lodash');\r\n\r\nfunction build_blank (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\n\r\nvar s = build_blank(50000)\r\nvar time0 = Date.now();\r\nlo.trim(s)\r\nvar time_cost0 = Date.now() - time0;\r\nconsole.log(\"time_cost0: \" + time_cost0)\r\n\r\nvar time1 = Date.now();\r\nlo.toNumber(s)\r\nvar time_cost1 = Date.now() - time1;\r\nconsole.log(\"time_cost1: \" + time_cost1)\r\n\r\nvar time2 = Date.now();\r\nlo.trimEnd(s)\r\nvar time_cost2 = Date.now() - time2;\r\nconsole.log(\"time_cost2: \" + time_cost2)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `lodash-es` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a)\n- [GitHub Fix PR](https://github.com/lodash/lodash/pull/5065)\n",
      "disclosureTime": "2020-10-16T16:47:34Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.21"
      ],
      "id": "SNYK-JS-LODASHES-2434289",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2020-28500"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:26:11.286253Z",
      "moduleName": "lodash-es",
      "packageManager": "npm",
      "packageName": "lodash-es",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:49Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a"
        },
        {
          "title": "GitHub Fix PR",
          "url": "https://github.com/lodash/lodash/pull/5065"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger-ui@3.25.0",
        "redux@3.7.2",
        "lodash-es@4.17.15"
      ],
      "upgradePath": [
        false,
        "swagger-ui@3.25.0",
        "redux@3.7.2",
        "lodash-es@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash-es",
      "version": "4.17.15"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2022-03-27T14:00:23.274733Z",
      "credit": [
        "posix"
      ],
      "cvssScore": 8.2,
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Prototype Pollution. The function `zipObjectDeep` can be tricked into adding or modifying properties of the Object prototype. These properties will be present on all objects.\r\n\r\n## PoC\r\n```\r\nconst _ = require('lodash');\r\n_.zipObjectDeep(['__proto__.z'],[123])\r\nconsole.log(z) // 123\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash-es` to version 4.17.20 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c84fe82760fb2d3e03a63379b297a1cc1a2fce12)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4759)\n",
      "disclosureTime": "2020-04-27T22:14:18Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.20"
      ],
      "id": "SNYK-JS-LODASHES-2434283",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "NSP": [
          "1523"
        ],
        "CVE": [
          "CVE-2020-8203"
        ],
        "GHSA": [
          "GHSA-p6mc-m468-83gw"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:28:33.431814Z",
      "moduleName": "lodash-es",
      "packageManager": "npm",
      "packageName": "lodash-es",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-04-28T14:59:14Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/c84fe82760fb2d3e03a63379b297a1cc1a2fce12"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/lodash/lodash/pull/4759"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.20"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger-ui-react@3.25.0",
        "redux@3.7.2",
        "lodash-es@4.17.15"
      ],
      "upgradePath": [
        false,
        "swagger-ui-react@3.25.0",
        "redux@3.7.2",
        "lodash-es@4.17.20"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash-es",
      "version": "4.17.15"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2022-03-27T14:00:56.359552Z",
      "credit": [
        "Marc Hassan"
      ],
      "cvssScore": 7.2,
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Command Injection via `template`.\r\n\r\n### PoC\r\n```js\r\nvar _ = require('lodash');\r\n\r\n_.template('', { variable: '){console.log(process.env)}; with(obj' })()\r\n```\n## Remediation\nUpgrade `lodash-es` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c)\n- [Vulnerable Code](https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js#L14851)\n",
      "disclosureTime": "2020-11-17T13:02:10Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.21"
      ],
      "id": "SNYK-JS-LODASHES-2434284",
      "identifiers": {
        "CWE": [
          "CWE-78"
        ],
        "GHSA": [
          "GHSA-35jh-r3h4-6jhm"
        ],
        "CVE": [
          "CVE-2021-23337"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:28:18.096614Z",
      "moduleName": "lodash-es",
      "packageManager": "npm",
      "packageName": "lodash-es",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:50Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js%23L14851"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Command Injection",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger-ui-react@3.25.0",
        "redux@3.7.2",
        "lodash-es@4.17.15"
      ],
      "upgradePath": [
        false,
        "swagger-ui-react@3.25.0",
        "redux@3.7.2",
        "lodash-es@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash-es",
      "version": "4.17.15"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2022-03-27T14:01:59.637773Z",
      "credit": [
        "awarau"
      ],
      "cvssScore": 7.3,
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `setWith` and `set` functions.\r\n\r\n## PoC by awarau\r\n* Create a JS file with this contents:\r\n```\r\nlod = require('lodash')\r\nlod.setWith({}, \"__proto__[test]\", \"123\")\r\nlod.set({}, \"__proto__[test2]\", \"456\")\r\nconsole.log(Object.prototype)\r\n```\r\n* Execute it with `node`\r\n* Observe that `test` and `test2` is now in the `Object.prototype`.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash-es` to version 4.17.20 or higher.\n## References\n- [HackerOne Report](https://hackerone.com/reports/864701)\n",
      "disclosureTime": "2020-08-21T10:34:29Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.20"
      ],
      "id": "SNYK-JS-LODASHES-2434285",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": []
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-05-25T11:18:25.335427Z",
      "moduleName": "lodash-es",
      "packageManager": "npm",
      "packageName": "lodash-es",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-08-21T12:53:03Z",
      "references": [
        {
          "title": "HackerOne Report",
          "url": "https://hackerone.com/reports/864701"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.20"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger-ui-react@3.25.0",
        "redux@3.7.2",
        "lodash-es@4.17.15"
      ],
      "upgradePath": [
        false,
        "swagger-ui-react@3.25.0",
        "redux@3.7.2",
        "lodash-es@4.17.20"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash-es",
      "version": "4.17.15"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2022-03-27T14:03:57.745561Z",
      "credit": [
        "Liyuan Chen"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `toNumber`, `trim` and `trimEnd` functions.\r\n\r\n### POC\r\n```\r\nvar lo = require('lodash');\r\n\r\nfunction build_blank (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\n\r\nvar s = build_blank(50000)\r\nvar time0 = Date.now();\r\nlo.trim(s)\r\nvar time_cost0 = Date.now() - time0;\r\nconsole.log(\"time_cost0: \" + time_cost0)\r\n\r\nvar time1 = Date.now();\r\nlo.toNumber(s)\r\nvar time_cost1 = Date.now() - time1;\r\nconsole.log(\"time_cost1: \" + time_cost1)\r\n\r\nvar time2 = Date.now();\r\nlo.trimEnd(s)\r\nvar time_cost2 = Date.now() - time2;\r\nconsole.log(\"time_cost2: \" + time_cost2)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `lodash-es` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a)\n- [GitHub Fix PR](https://github.com/lodash/lodash/pull/5065)\n",
      "disclosureTime": "2020-10-16T16:47:34Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.21"
      ],
      "id": "SNYK-JS-LODASHES-2434289",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2020-28500"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:26:11.286253Z",
      "moduleName": "lodash-es",
      "packageManager": "npm",
      "packageName": "lodash-es",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:49Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a"
        },
        {
          "title": "GitHub Fix PR",
          "url": "https://github.com/lodash/lodash/pull/5065"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger-ui-react@3.25.0",
        "redux@3.7.2",
        "lodash-es@4.17.15"
      ],
      "upgradePath": [
        false,
        "swagger-ui-react@3.25.0",
        "redux@3.7.2",
        "lodash-es@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash-es",
      "version": "4.17.15"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2021-03-22T12:03:39.360085Z",
      "credit": [
        "Marc Hassan"
      ],
      "cvssScore": 7.2,
      "description": "## Overview\n[lodash.template](https://www.npmjs.com/package/lodash.template) is a The Lodash method _.template exported as a Node.js module.\n\nAffected versions of this package are vulnerable to Command Injection via `template`.\r\n\r\n### PoC\r\n```js\r\nvar _ = require('lodash');\r\n\r\n_.template('', { variable: '){console.log(process.env)}; with(obj' })()\r\n```\n## Remediation\nThere is no fixed version for `lodash.template`.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c)\n- [Vulnerable Code](https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js#L14851)\n",
      "disclosureTime": "2020-11-17T13:02:10Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [],
      "id": "SNYK-JS-LODASHTEMPLATE-1088054",
      "identifiers": {
        "CWE": [
          "CWE-78"
        ],
        "GHSA": [
          "GHSA-35jh-r3h4-6jhm"
        ],
        "CVE": [
          "CVE-2021-23337"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:28:18.096614Z",
      "moduleName": "lodash.template",
      "packageManager": "npm",
      "packageName": "lodash.template",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:50Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js%23L14851"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Command Injection",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "*"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger-ui@3.25.0",
        "remarkable@1.7.4",
        "autolinker@0.28.1",
        "gulp-header@1.8.12",
        "lodash.template@4.5.0"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "lodash.template",
      "version": "4.5.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2021-03-22T12:03:39.360085Z",
      "credit": [
        "Marc Hassan"
      ],
      "cvssScore": 7.2,
      "description": "## Overview\n[lodash.template](https://www.npmjs.com/package/lodash.template) is a The Lodash method _.template exported as a Node.js module.\n\nAffected versions of this package are vulnerable to Command Injection via `template`.\r\n\r\n### PoC\r\n```js\r\nvar _ = require('lodash');\r\n\r\n_.template('', { variable: '){console.log(process.env)}; with(obj' })()\r\n```\n## Remediation\nThere is no fixed version for `lodash.template`.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c)\n- [Vulnerable Code](https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js#L14851)\n",
      "disclosureTime": "2020-11-17T13:02:10Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [],
      "id": "SNYK-JS-LODASHTEMPLATE-1088054",
      "identifiers": {
        "CWE": [
          "CWE-78"
        ],
        "GHSA": [
          "GHSA-35jh-r3h4-6jhm"
        ],
        "CVE": [
          "CVE-2021-23337"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:28:18.096614Z",
      "moduleName": "lodash.template",
      "packageManager": "npm",
      "packageName": "lodash.template",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:50Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js%23L14851"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Command Injection",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "*"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger-ui-react@3.25.0",
        "remarkable@1.7.4",
        "autolinker@0.28.1",
        "gulp-header@1.8.12",
        "lodash.template@4.5.0"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "lodash.template",
      "version": "4.5.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [],
      "creationTime": "2022-01-09T12:32:53.638297Z",
      "credit": [
        "Fujinami Hiroya"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[markdown-it](https://www.npmjs.com/package/markdown-it) is a modern pluggable markdown parser.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `/s+$/` in line 23 of `lib/rules_inline/newline.js`. This expression is used to remove trailing whitespaces from a string, however, it also matches non-trailing whitespaces.\r\nIn the worst-case scenario, the matching process would take computation time proportional to the square of the length of the non-trailing whitespaces. It is possible that a string containing more than tens of thousands characters, as `markdown-it` handles `Markdown`, would be passed over the network, resulting in significant computational time.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `markdown-it` to version 12.3.2 or higher.\n## References\n- [GitHub Commit](https://github.com/markdown-it/markdown-it/commit/ffc49ab46b5b751cd2be0aabb146f2ef84986101)\n",
      "disclosureTime": "2022-01-09T12:22:24Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "12.3.2"
      ],
      "id": "SNYK-JS-MARKDOWNIT-2331914",
      "identifiers": {
        "CWE": [
          "CWE-1333"
        ],
        "CVE": [
          "CVE-2022-21670"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-01-11T11:44:58.462314Z",
      "moduleName": "markdown-it",
      "packageManager": "npm",
      "packageName": "markdown-it",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-01-09T15:54:45Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/markdown-it/markdown-it/commit/ffc49ab46b5b751cd2be0aabb146f2ef84986101"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<12.3.2"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "@asyncapi/react-component@0.17.11",
        "markdown-it@11.0.1"
      ],
      "upgradePath": [
        false,
        "@asyncapi/react-component@0.24.20",
        "markdown-it@12.3.2"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "markdown-it",
      "version": "11.0.1"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [],
      "creationTime": "2022-01-09T12:32:53.638297Z",
      "credit": [
        "Fujinami Hiroya"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[markdown-it](https://www.npmjs.com/package/markdown-it) is a modern pluggable markdown parser.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `/s+$/` in line 23 of `lib/rules_inline/newline.js`. This expression is used to remove trailing whitespaces from a string, however, it also matches non-trailing whitespaces.\r\nIn the worst-case scenario, the matching process would take computation time proportional to the square of the length of the non-trailing whitespaces. It is possible that a string containing more than tens of thousands characters, as `markdown-it` handles `Markdown`, would be passed over the network, resulting in significant computational time.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `markdown-it` to version 12.3.2 or higher.\n## References\n- [GitHub Commit](https://github.com/markdown-it/markdown-it/commit/ffc49ab46b5b751cd2be0aabb146f2ef84986101)\n",
      "disclosureTime": "2022-01-09T12:22:24Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "12.3.2"
      ],
      "id": "SNYK-JS-MARKDOWNIT-2331914",
      "identifiers": {
        "CWE": [
          "CWE-1333"
        ],
        "CVE": [
          "CVE-2022-21670"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-01-11T11:44:58.462314Z",
      "moduleName": "markdown-it",
      "packageManager": "npm",
      "packageName": "markdown-it",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-01-09T15:54:45Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/markdown-it/markdown-it/commit/ffc49ab46b5b751cd2be0aabb146f2ef84986101"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<12.3.2"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "graphiql@0.17.5",
        "markdown-it@10.0.0"
      ],
      "upgradePath": [
        false,
        "graphiql@1.4.7",
        "markdown-it@12.3.2"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "markdown-it",
      "version": "10.0.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
      "alternativeIds": [],
      "creationTime": "2021-02-09T10:22:06.210622Z",
      "credit": [
        "Carlo Stearns",
        "Trevor Buckner"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n[marked](https://marked.js.org/) is a low-level compiler for parsing markdown without caching or blocking for long periods of time.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). 3 or more groups of odd and even numbered consecutive underscores (`___`) followed by a character causes extended processing.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `marked` to version 2.0.0 or higher.\n## References\n- [GitHub Commit](https://github.com/markedjs/marked/commit/7293251c438e3ee968970f7609f1a27f9007bccd)\n- [GitHub Issue](https://github.com/markedjs/marked/issues/1927)\n- [GitHub PR](https://github.com/markedjs/marked/pull/1864)\n",
      "disclosureTime": "2021-02-09T10:14:35Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "2.0.0"
      ],
      "id": "SNYK-JS-MARKED-1070800",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "NSP": [
          "1623"
        ],
        "CVE": [
          "CVE-2021-21306"
        ],
        "GHSA": [
          "GHSA-4r62-v4vq-hr96"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-05-16T13:14:28.201863Z",
      "moduleName": "marked",
      "packageManager": "npm",
      "packageName": "marked",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-02-09T16:34:47Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/markedjs/marked/commit/7293251c438e3ee968970f7609f1a27f9007bccd"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/markedjs/marked/issues/1927"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/markedjs/marked/pull/1864"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=1.1.1 <2.0.0"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "openapi-to-postmanv2@1.2.7",
        "postman-collection@3.6.6",
        "marked@1.1.1"
      ],
      "upgradePath": [
        false,
        "openapi-to-postmanv2@2.7.0",
        "postman-collection@3.6.11",
        "marked@2.0.1"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "marked",
      "version": "1.1.1"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2022-01-16T09:07:08.101529Z",
      "credit": [
        "MakeNowJust"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[marked](https://marked.js.org/) is a low-level compiler for parsing markdown without caching or blocking for long periods of time.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) when passing unsanitized user input to `inline.reflinkSearch`, if it is not being parsed by a time-limited worker thread.\r\n\r\n## PoC\r\n```js\r\nimport * as marked from 'marked';\r\n\r\nconsole.log(marked.parse(`[x]: x\r\n\r\n\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](`));\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `marked` to version 4.0.10 or higher.\n## References\n- [GitHub Commit](https://github.com/markedjs/marked/commit/c4a3ccd344b6929afa8a1d50ac54a721e57012c0)\n",
      "disclosureTime": "2022-01-16T08:58:04Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.0.10"
      ],
      "id": "SNYK-JS-MARKED-2342073",
      "identifiers": {
        "CWE": [
          "CWE-1333"
        ],
        "GHSA": [
          "GHSA-5v2h-r2cx-5xgj"
        ],
        "CVE": [
          "CVE-2022-21681"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-01-16T15:24:00.022317Z",
      "moduleName": "marked",
      "packageManager": "npm",
      "packageName": "marked",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-01-16T14:42:47.883887Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/markedjs/marked/commit/c4a3ccd344b6929afa8a1d50ac54a721e57012c0"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.0.10"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "openapi-to-postmanv2@1.2.7",
        "postman-collection@3.6.6",
        "marked@1.1.1"
      ],
      "upgradePath": [
        false,
        "openapi-to-postmanv2@2.10.0",
        "postman-collection@4.0.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "marked",
      "version": "1.1.1"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2022-01-16T12:11:35.068696Z",
      "credit": [
        "MakeNowJust"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[marked](https://marked.js.org/) is a low-level compiler for parsing markdown without caching or blocking for long periods of time.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) when unsanitized user input is passed to `block.def`.\r\n\r\n## PoC\r\n```js\r\nimport * as marked from \"marked\";\r\nmarked.parse(`[x]:${' '.repeat(1500)}x ${' '.repeat(1500)} x`);\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `marked` to version 4.0.10 or higher.\n## References\n- [GitHub Commit](https://github.com/markedjs/marked/commit/c4a3ccd344b6929afa8a1d50ac54a721e57012c0)\n- [GitHub Release](https://github.com/markedjs/marked/releases/tag/v4.0.10)\n",
      "disclosureTime": "2022-01-14T21:04:41Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.0.10"
      ],
      "id": "SNYK-JS-MARKED-2342082",
      "identifiers": {
        "CWE": [
          "CWE-1333"
        ],
        "GHSA": [
          "GHSA-rrrm-qjm4-v8hf"
        ],
        "CVE": [
          "CVE-2022-21680"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-01-16T15:23:59.302316Z",
      "moduleName": "marked",
      "packageManager": "npm",
      "packageName": "marked",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-01-16T15:23:59.300943Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/markedjs/marked/commit/c4a3ccd344b6929afa8a1d50ac54a721e57012c0"
        },
        {
          "title": "GitHub Release",
          "url": "https://github.com/markedjs/marked/releases/tag/v4.0.10"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.0.10"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "openapi-to-postmanv2@1.2.7",
        "postman-collection@3.6.6",
        "marked@1.1.1"
      ],
      "upgradePath": [
        false,
        "openapi-to-postmanv2@2.10.0",
        "postman-collection@4.0.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "marked",
      "version": "1.1.1"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
      "alternativeIds": [],
      "creationTime": "2021-02-09T10:22:06.210622Z",
      "credit": [
        "Carlo Stearns",
        "Trevor Buckner"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n[marked](https://marked.js.org/) is a low-level compiler for parsing markdown without caching or blocking for long periods of time.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). 3 or more groups of odd and even numbered consecutive underscores (`___`) followed by a character causes extended processing.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `marked` to version 2.0.0 or higher.\n## References\n- [GitHub Commit](https://github.com/markedjs/marked/commit/7293251c438e3ee968970f7609f1a27f9007bccd)\n- [GitHub Issue](https://github.com/markedjs/marked/issues/1927)\n- [GitHub PR](https://github.com/markedjs/marked/pull/1864)\n",
      "disclosureTime": "2021-02-09T10:14:35Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "2.0.0"
      ],
      "id": "SNYK-JS-MARKED-1070800",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "NSP": [
          "1623"
        ],
        "CVE": [
          "CVE-2021-21306"
        ],
        "GHSA": [
          "GHSA-4r62-v4vq-hr96"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-05-16T13:14:28.201863Z",
      "moduleName": "marked",
      "packageManager": "npm",
      "packageName": "marked",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-02-09T16:34:47Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/markedjs/marked/commit/7293251c438e3ee968970f7609f1a27f9007bccd"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/markedjs/marked/issues/1927"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/markedjs/marked/pull/1864"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=1.1.1 <2.0.0"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger2-postman2-converter@0.0.3",
        "postman-collection@3.6.6",
        "marked@1.1.1"
      ],
      "upgradePath": [
        false,
        "swagger2-postman2-converter@0.0.3",
        "postman-collection@3.6.10",
        "marked@2.0.1"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "marked",
      "version": "1.1.1"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2022-01-16T09:07:08.101529Z",
      "credit": [
        "MakeNowJust"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[marked](https://marked.js.org/) is a low-level compiler for parsing markdown without caching or blocking for long periods of time.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) when passing unsanitized user input to `inline.reflinkSearch`, if it is not being parsed by a time-limited worker thread.\r\n\r\n## PoC\r\n```js\r\nimport * as marked from 'marked';\r\n\r\nconsole.log(marked.parse(`[x]: x\r\n\r\n\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](`));\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `marked` to version 4.0.10 or higher.\n## References\n- [GitHub Commit](https://github.com/markedjs/marked/commit/c4a3ccd344b6929afa8a1d50ac54a721e57012c0)\n",
      "disclosureTime": "2022-01-16T08:58:04Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.0.10"
      ],
      "id": "SNYK-JS-MARKED-2342073",
      "identifiers": {
        "CWE": [
          "CWE-1333"
        ],
        "GHSA": [
          "GHSA-5v2h-r2cx-5xgj"
        ],
        "CVE": [
          "CVE-2022-21681"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-01-16T15:24:00.022317Z",
      "moduleName": "marked",
      "packageManager": "npm",
      "packageName": "marked",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-01-16T14:42:47.883887Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/markedjs/marked/commit/c4a3ccd344b6929afa8a1d50ac54a721e57012c0"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.0.10"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger2-postman2-converter@0.0.3",
        "postman-collection@3.6.6",
        "marked@1.1.1"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "marked",
      "version": "1.1.1"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2022-01-16T12:11:35.068696Z",
      "credit": [
        "MakeNowJust"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[marked](https://marked.js.org/) is a low-level compiler for parsing markdown without caching or blocking for long periods of time.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) when unsanitized user input is passed to `block.def`.\r\n\r\n## PoC\r\n```js\r\nimport * as marked from \"marked\";\r\nmarked.parse(`[x]:${' '.repeat(1500)}x ${' '.repeat(1500)} x`);\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `marked` to version 4.0.10 or higher.\n## References\n- [GitHub Commit](https://github.com/markedjs/marked/commit/c4a3ccd344b6929afa8a1d50ac54a721e57012c0)\n- [GitHub Release](https://github.com/markedjs/marked/releases/tag/v4.0.10)\n",
      "disclosureTime": "2022-01-14T21:04:41Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.0.10"
      ],
      "id": "SNYK-JS-MARKED-2342082",
      "identifiers": {
        "CWE": [
          "CWE-1333"
        ],
        "GHSA": [
          "GHSA-rrrm-qjm4-v8hf"
        ],
        "CVE": [
          "CVE-2022-21680"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-01-16T15:23:59.302316Z",
      "moduleName": "marked",
      "packageManager": "npm",
      "packageName": "marked",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-01-16T15:23:59.300943Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/markedjs/marked/commit/c4a3ccd344b6929afa8a1d50ac54a721e57012c0"
        },
        {
          "title": "GitHub Release",
          "url": "https://github.com/markedjs/marked/releases/tag/v4.0.10"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.0.10"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger2-postman2-converter@0.0.3",
        "postman-collection@3.6.6",
        "marked@1.1.1"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "marked",
      "version": "1.1.1"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2022-01-16T09:07:08.101529Z",
      "credit": [
        "MakeNowJust"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[marked](https://marked.js.org/) is a low-level compiler for parsing markdown without caching or blocking for long periods of time.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) when passing unsanitized user input to `inline.reflinkSearch`, if it is not being parsed by a time-limited worker thread.\r\n\r\n## PoC\r\n```js\r\nimport * as marked from 'marked';\r\n\r\nconsole.log(marked.parse(`[x]: x\r\n\r\n\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](`));\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `marked` to version 4.0.10 or higher.\n## References\n- [GitHub Commit](https://github.com/markedjs/marked/commit/c4a3ccd344b6929afa8a1d50ac54a721e57012c0)\n",
      "disclosureTime": "2022-01-16T08:58:04Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.0.10"
      ],
      "id": "SNYK-JS-MARKED-2342073",
      "identifiers": {
        "CWE": [
          "CWE-1333"
        ],
        "GHSA": [
          "GHSA-5v2h-r2cx-5xgj"
        ],
        "CVE": [
          "CVE-2022-21681"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-01-16T15:24:00.022317Z",
      "moduleName": "marked",
      "packageManager": "npm",
      "packageName": "marked",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-01-16T14:42:47.883887Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/markedjs/marked/commit/c4a3ccd344b6929afa8a1d50ac54a721e57012c0"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.0.10"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "graphql-to-postman@0.0.6",
        "postman-collection@3.5.5",
        "marked@0.7.0"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "marked",
      "version": "0.7.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2022-01-16T12:11:35.068696Z",
      "credit": [
        "MakeNowJust"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[marked](https://marked.js.org/) is a low-level compiler for parsing markdown without caching or blocking for long periods of time.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) when unsanitized user input is passed to `block.def`.\r\n\r\n## PoC\r\n```js\r\nimport * as marked from \"marked\";\r\nmarked.parse(`[x]:${' '.repeat(1500)}x ${' '.repeat(1500)} x`);\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `marked` to version 4.0.10 or higher.\n## References\n- [GitHub Commit](https://github.com/markedjs/marked/commit/c4a3ccd344b6929afa8a1d50ac54a721e57012c0)\n- [GitHub Release](https://github.com/markedjs/marked/releases/tag/v4.0.10)\n",
      "disclosureTime": "2022-01-14T21:04:41Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.0.10"
      ],
      "id": "SNYK-JS-MARKED-2342082",
      "identifiers": {
        "CWE": [
          "CWE-1333"
        ],
        "GHSA": [
          "GHSA-rrrm-qjm4-v8hf"
        ],
        "CVE": [
          "CVE-2022-21680"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-01-16T15:23:59.302316Z",
      "moduleName": "marked",
      "packageManager": "npm",
      "packageName": "marked",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-01-16T15:23:59.300943Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/markedjs/marked/commit/c4a3ccd344b6929afa8a1d50ac54a721e57012c0"
        },
        {
          "title": "GitHub Release",
          "url": "https://github.com/markedjs/marked/releases/tag/v4.0.10"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.0.10"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "graphql-to-postman@0.0.6",
        "postman-collection@3.5.5",
        "marked@0.7.0"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "marked",
      "version": "0.7.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H/E:U/RL:O/RC:R",
      "alternativeIds": [],
      "creationTime": "2020-07-13T15:50:25.938503Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 5.9,
      "description": "## Overview\n[marked](https://marked.js.org/) is a low-level compiler for parsing markdown without caching or blocking for long periods of time.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). The `em` regex within `src/rules.js` file have multiple unused capture groups which could lead to a denial of service attack if user input is reachable.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `marked` to version 1.1.1 or higher.\n## References\n- [GitHub Commit](https://github.com/markedjs/marked/commit/bd4f8c464befad2b304d51e33e89e567326e62e0)\n",
      "disclosureTime": "2020-07-13T15:47:58Z",
      "exploit": "Unproven",
      "functions": [],
      "fixedIn": [
        "1.1.1"
      ],
      "id": "SNYK-JS-MARKED-584281",
      "identifiers": {
        "CWE": [
          "CWE-1333"
        ],
        "CVE": []
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-09-23T16:58:42.707391Z",
      "moduleName": "marked",
      "packageManager": "npm",
      "packageName": "marked",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-07-27T15:44:09Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/markedjs/marked/commit/bd4f8c464befad2b304d51e33e89e567326e62e0"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<1.1.1"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "graphql-to-postman@0.0.6",
        "postman-collection@3.5.5",
        "marked@0.7.0"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "marked",
      "version": "0.7.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2020-11-22T15:18:43.156000Z",
      "credit": [
        "Alessio Della Libera (d3lla)"
      ],
      "cvssScore": 7.3,
      "description": "## Overview\n[merge](https://github.com/yeikos/js.merge) is a library that allows you to merge multiple objects into one, optionally creating a new cloned object. Similar to the jQuery.extend but more flexible. Works in Node.js and the browser.\n\nAffected versions of this package are vulnerable to Prototype Pollution via `_recursiveMerge `. \r\n\r\n## PoC: \r\n\r\n```javascript\r\nconst merge = require('merge');\r\n\r\nconst payload2 = JSON.parse('{\"x\": {\"__proto__\":{\"polluted\":\"yes\"}}}');\r\n\r\nlet obj1 = {x: {y:1}};\r\n\r\nconsole.log(\"Before : \" + obj1.polluted);\r\nmerge.recursive(obj1, payload2);\r\nconsole.log(\"After : \" + obj1.polluted);\r\nconsole.log(\"After : \" + {}.polluted);\r\n```\r\n\r\nOutput:\r\n```console\r\nBefore : undefined\r\nAfter : yes\r\nAfter : yes\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `merge` to version 2.1.1 or higher.\n## References\n- [GitHub Commit](https://github.com/yeikos/js.merge/commit/7b0ddc2701d813f2ba289b32d6a4b9d4cc235fb4)\n- [Vulnerable Code](https://github.com/yeikos/js.merge/blob/master/src/index.ts#L64)\n",
      "disclosureTime": "2020-11-22T15:13:53Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "2.1.1"
      ],
      "id": "SNYK-JS-MERGE-1042987",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-7wpw-2hjm-89gp"
        ],
        "CVE": [
          "CVE-2020-28499"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-07-06T14:08:07.366296Z",
      "moduleName": "merge",
      "packageManager": "npm",
      "packageName": "merge",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-23T16:42:39.612000Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/yeikos/js.merge/commit/7b0ddc2701d813f2ba289b32d6a4b9d4cc235fb4"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/yeikos/js.merge/blob/master/src/index.ts%23L64"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<2.1.1"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "@asyncapi/react-component@0.17.11",
        "merge@2.1.0"
      ],
      "upgradePath": [
        false,
        "@asyncapi/react-component@0.17.11",
        "merge@2.1.1"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "merge",
      "version": "2.1.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:L",
      "alternativeIds": [],
      "creationTime": "2019-04-14T13:48:38.689764Z",
      "credit": [
        "gregnb"
      ],
      "cvssScore": 6.3,
      "description": "## Overview\n[mui-datatables](https://github.com/gregnb/mui-datatables) is a data tables component built on Material-UI.\n\nAffected versions of this package are vulnerable to CSV Injection. CSV Injection, also known as Formula Injection, occurs when websites embed untrusted input inside CSV files. When a spreadsheet program is used to open a CSV, any cells starting with '=' will be interpreted by the software as a formula. Maliciously crafted formulas can be used for three key attacks:\r\n\r\n* Hijacking the user's computer by exploiting vulnerabilities in the spreadsheet software.\r\n* Hijacking the user's computer by exploiting the user's tendency to ignore security warnings in spreadsheets that they downloaded from their own website\r\n* Exfiltrating contents from the spreadsheet, or other open spreadsheets.\r\n\r\n## Proof Of Concept (PoC)\r\n```js\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport MUIDataTable from \"mui-datatables\";\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    const columns = [\"Name\", \"Title\", \"Location\", \"Age\", \"Salary\"];\r\n\r\n    const data = [\r\n      [\"=cmd|' /C calc'!A0\", \"Business Analyst\", \"Minneapolis\", 30, \"$100,000\"],\r\n      [\"Aiden Lloyd\", \"Business Consultant\", \"Dallas\", 55, \"$200,000\"],\r\n      [\"Jaden Collins\", \"Attorney\", \"Santa Ana\", 27, \"$500,000\"]\r\n    ];\r\n    const options = {\r\n      filterType: \"dropdown\",\r\n      responsive: \"scroll\"\r\n    };\r\n    return (\r\n      <MUIDataTable\r\n        title={\"ACME Employee list\"}\r\n        data={data}\r\n        columns={columns}\r\n        options={options}\r\n      />\r\n    );\r\n  }\r\n}\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n```\n## Remediation\nUpgrade `mui-datatables` to version 2.14.0 or higher.\n## References\n- [GitHub Issue](https://github.com/gregnb/mui-datatables/issues/529)\n- [GitHub PR](https://github.com/gregnb/mui-datatables/pull/1155)\n",
      "disclosureTime": "2019-03-29T16:28:09Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "2.14.0"
      ],
      "id": "SNYK-JS-MUIDATATABLES-174185",
      "identifiers": {
        "CWE": [
          "CWE-74"
        ],
        "CVE": []
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-12-14T14:41:14.322275Z",
      "moduleName": "mui-datatables",
      "packageManager": "npm",
      "packageName": "mui-datatables",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2019-04-14T16:28:09Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/gregnb/mui-datatables/issues/529"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/gregnb/mui-datatables/pull/1155"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "CSV Injection",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<2.14.0"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "mui-datatables@2.13.0"
      ],
      "upgradePath": [
        false,
        "mui-datatables@2.14.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "mui-datatables",
      "version": "2.13.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N",
      "alternativeIds": [],
      "creationTime": "2022-01-17T12:08:00.675849Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 6.5,
      "description": "## Overview\n[node-fetch](https://www.npmjs.com/package/node-fetch) is a light-weight module that brings window.fetch to node.js\n\nAffected versions of this package are vulnerable to Information Exposure when fetching a remote url with Cookie, if it get a `Location` response header, it will follow that url and try to fetch that url with provided cookie. This can lead to forwarding secure headers to 3th party.\n## Remediation\nUpgrade `node-fetch` to version 2.6.7, 3.1.1 or higher.\n## References\n- [Github Commit](https://github.com/node-fetch/node-fetch/commit/1ef4b560a17e644a02a3bfdea7631ffeee578b35)\n- [GitHub Commit](https://github.com/node-fetch/node-fetch/commit/36e47e8a6406185921e4985dcbeff140d73eaa10)\n- [GitHub Commit](https://github.com/node-fetch/node-fetch/pull/1449/commits/5c32f002fdd65b1c6a8f1e3620210813d45c7e60)\n- [GitHub PR](https://github.com/node-fetch/node-fetch/pull/1449)\n",
      "disclosureTime": "2022-01-17T12:00:01Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "2.6.7",
        "3.1.1"
      ],
      "id": "SNYK-JS-NODEFETCH-2342118",
      "identifiers": {
        "CWE": [
          "CWE-200"
        ],
        "CVE": [
          "CVE-2022-0235",
          "CVE-2022-1365"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-18T09:45:11.278222Z",
      "moduleName": "node-fetch",
      "packageManager": "npm",
      "packageName": "node-fetch",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-01-17T16:25:00Z",
      "references": [
        {
          "title": "Github Commit",
          "url": "https://github.com/node-fetch/node-fetch/commit/1ef4b560a17e644a02a3bfdea7631ffeee578b35"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/node-fetch/node-fetch/commit/36e47e8a6406185921e4985dcbeff140d73eaa10"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/node-fetch/node-fetch/pull/1449/commits/5c32f002fdd65b1c6a8f1e3620210813d45c7e60"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/node-fetch/node-fetch/pull/1449"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Information Exposure",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<2.6.7",
          ">=3.0.0 <3.1.1"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "@asyncapi/react-component@0.17.11",
        "@asyncapi/parser@1.3.1",
        "node-fetch@2.6.1"
      ],
      "upgradePath": [
        false,
        "@asyncapi/react-component@0.17.11",
        "@asyncapi/parser@1.3.1",
        "node-fetch@2.6.7"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "node-fetch",
      "version": "2.6.1"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N",
      "alternativeIds": [],
      "creationTime": "2022-01-17T12:08:00.675849Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 6.5,
      "description": "## Overview\n[node-fetch](https://www.npmjs.com/package/node-fetch) is a light-weight module that brings window.fetch to node.js\n\nAffected versions of this package are vulnerable to Information Exposure when fetching a remote url with Cookie, if it get a `Location` response header, it will follow that url and try to fetch that url with provided cookie. This can lead to forwarding secure headers to 3th party.\n## Remediation\nUpgrade `node-fetch` to version 2.6.7, 3.1.1 or higher.\n## References\n- [Github Commit](https://github.com/node-fetch/node-fetch/commit/1ef4b560a17e644a02a3bfdea7631ffeee578b35)\n- [GitHub Commit](https://github.com/node-fetch/node-fetch/commit/36e47e8a6406185921e4985dcbeff140d73eaa10)\n- [GitHub Commit](https://github.com/node-fetch/node-fetch/pull/1449/commits/5c32f002fdd65b1c6a8f1e3620210813d45c7e60)\n- [GitHub PR](https://github.com/node-fetch/node-fetch/pull/1449)\n",
      "disclosureTime": "2022-01-17T12:00:01Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "2.6.7",
        "3.1.1"
      ],
      "id": "SNYK-JS-NODEFETCH-2342118",
      "identifiers": {
        "CWE": [
          "CWE-200"
        ],
        "CVE": [
          "CVE-2022-0235",
          "CVE-2022-1365"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-18T09:45:11.278222Z",
      "moduleName": "node-fetch",
      "packageManager": "npm",
      "packageName": "node-fetch",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-01-17T16:25:00Z",
      "references": [
        {
          "title": "Github Commit",
          "url": "https://github.com/node-fetch/node-fetch/commit/1ef4b560a17e644a02a3bfdea7631ffeee578b35"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/node-fetch/node-fetch/commit/36e47e8a6406185921e4985dcbeff140d73eaa10"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/node-fetch/node-fetch/pull/1449/commits/5c32f002fdd65b1c6a8f1e3620210813d45c7e60"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/node-fetch/node-fetch/pull/1449"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Information Exposure",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<2.6.7",
          ">=3.0.0 <3.1.1"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger-client@3.12.0",
        "cross-fetch@3.0.6",
        "node-fetch@2.6.1"
      ],
      "upgradePath": [
        false,
        "swagger-client@3.12.0",
        "cross-fetch@3.1.5",
        "node-fetch@2.6.7"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "node-fetch",
      "version": "2.6.1"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N",
      "alternativeIds": [],
      "creationTime": "2022-01-17T12:08:00.675849Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 6.5,
      "description": "## Overview\n[node-fetch](https://www.npmjs.com/package/node-fetch) is a light-weight module that brings window.fetch to node.js\n\nAffected versions of this package are vulnerable to Information Exposure when fetching a remote url with Cookie, if it get a `Location` response header, it will follow that url and try to fetch that url with provided cookie. This can lead to forwarding secure headers to 3th party.\n## Remediation\nUpgrade `node-fetch` to version 2.6.7, 3.1.1 or higher.\n## References\n- [Github Commit](https://github.com/node-fetch/node-fetch/commit/1ef4b560a17e644a02a3bfdea7631ffeee578b35)\n- [GitHub Commit](https://github.com/node-fetch/node-fetch/commit/36e47e8a6406185921e4985dcbeff140d73eaa10)\n- [GitHub Commit](https://github.com/node-fetch/node-fetch/pull/1449/commits/5c32f002fdd65b1c6a8f1e3620210813d45c7e60)\n- [GitHub PR](https://github.com/node-fetch/node-fetch/pull/1449)\n",
      "disclosureTime": "2022-01-17T12:00:01Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "2.6.7",
        "3.1.1"
      ],
      "id": "SNYK-JS-NODEFETCH-2342118",
      "identifiers": {
        "CWE": [
          "CWE-200"
        ],
        "CVE": [
          "CVE-2022-0235",
          "CVE-2022-1365"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-18T09:45:11.278222Z",
      "moduleName": "node-fetch",
      "packageManager": "npm",
      "packageName": "node-fetch",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-01-17T16:25:00Z",
      "references": [
        {
          "title": "Github Commit",
          "url": "https://github.com/node-fetch/node-fetch/commit/1ef4b560a17e644a02a3bfdea7631ffeee578b35"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/node-fetch/node-fetch/commit/36e47e8a6406185921e4985dcbeff140d73eaa10"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/node-fetch/node-fetch/pull/1449/commits/5c32f002fdd65b1c6a8f1e3620210813d45c7e60"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/node-fetch/node-fetch/pull/1449"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Information Exposure",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<2.6.7",
          ">=3.0.0 <3.1.1"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger-ui@3.25.0",
        "swagger-client@3.12.0",
        "cross-fetch@3.0.6",
        "node-fetch@2.6.1"
      ],
      "upgradePath": [
        false,
        "swagger-ui@3.25.0",
        "swagger-client@3.12.0",
        "cross-fetch@3.1.5",
        "node-fetch@2.6.7"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "node-fetch",
      "version": "2.6.1"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N",
      "alternativeIds": [],
      "creationTime": "2022-01-17T12:08:00.675849Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 6.5,
      "description": "## Overview\n[node-fetch](https://www.npmjs.com/package/node-fetch) is a light-weight module that brings window.fetch to node.js\n\nAffected versions of this package are vulnerable to Information Exposure when fetching a remote url with Cookie, if it get a `Location` response header, it will follow that url and try to fetch that url with provided cookie. This can lead to forwarding secure headers to 3th party.\n## Remediation\nUpgrade `node-fetch` to version 2.6.7, 3.1.1 or higher.\n## References\n- [Github Commit](https://github.com/node-fetch/node-fetch/commit/1ef4b560a17e644a02a3bfdea7631ffeee578b35)\n- [GitHub Commit](https://github.com/node-fetch/node-fetch/commit/36e47e8a6406185921e4985dcbeff140d73eaa10)\n- [GitHub Commit](https://github.com/node-fetch/node-fetch/pull/1449/commits/5c32f002fdd65b1c6a8f1e3620210813d45c7e60)\n- [GitHub PR](https://github.com/node-fetch/node-fetch/pull/1449)\n",
      "disclosureTime": "2022-01-17T12:00:01Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "2.6.7",
        "3.1.1"
      ],
      "id": "SNYK-JS-NODEFETCH-2342118",
      "identifiers": {
        "CWE": [
          "CWE-200"
        ],
        "CVE": [
          "CVE-2022-0235",
          "CVE-2022-1365"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-18T09:45:11.278222Z",
      "moduleName": "node-fetch",
      "packageManager": "npm",
      "packageName": "node-fetch",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-01-17T16:25:00Z",
      "references": [
        {
          "title": "Github Commit",
          "url": "https://github.com/node-fetch/node-fetch/commit/1ef4b560a17e644a02a3bfdea7631ffeee578b35"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/node-fetch/node-fetch/commit/36e47e8a6406185921e4985dcbeff140d73eaa10"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/node-fetch/node-fetch/pull/1449/commits/5c32f002fdd65b1c6a8f1e3620210813d45c7e60"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/node-fetch/node-fetch/pull/1449"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Information Exposure",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<2.6.7",
          ">=3.0.0 <3.1.1"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger-ui-react@3.25.0",
        "swagger-client@3.12.0",
        "cross-fetch@3.0.6",
        "node-fetch@2.6.1"
      ],
      "upgradePath": [
        false,
        "swagger-ui-react@3.25.0",
        "swagger-client@3.12.0",
        "cross-fetch@3.1.5",
        "node-fetch@2.6.7"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "node-fetch",
      "version": "2.6.1"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N",
      "alternativeIds": [],
      "creationTime": "2022-01-17T12:08:00.675849Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 6.5,
      "description": "## Overview\n[node-fetch](https://www.npmjs.com/package/node-fetch) is a light-weight module that brings window.fetch to node.js\n\nAffected versions of this package are vulnerable to Information Exposure when fetching a remote url with Cookie, if it get a `Location` response header, it will follow that url and try to fetch that url with provided cookie. This can lead to forwarding secure headers to 3th party.\n## Remediation\nUpgrade `node-fetch` to version 2.6.7, 3.1.1 or higher.\n## References\n- [Github Commit](https://github.com/node-fetch/node-fetch/commit/1ef4b560a17e644a02a3bfdea7631ffeee578b35)\n- [GitHub Commit](https://github.com/node-fetch/node-fetch/commit/36e47e8a6406185921e4985dcbeff140d73eaa10)\n- [GitHub Commit](https://github.com/node-fetch/node-fetch/pull/1449/commits/5c32f002fdd65b1c6a8f1e3620210813d45c7e60)\n- [GitHub PR](https://github.com/node-fetch/node-fetch/pull/1449)\n",
      "disclosureTime": "2022-01-17T12:00:01Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "2.6.7",
        "3.1.1"
      ],
      "id": "SNYK-JS-NODEFETCH-2342118",
      "identifiers": {
        "CWE": [
          "CWE-200"
        ],
        "CVE": [
          "CVE-2022-0235",
          "CVE-2022-1365"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-18T09:45:11.278222Z",
      "moduleName": "node-fetch",
      "packageManager": "npm",
      "packageName": "node-fetch",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-01-17T16:25:00Z",
      "references": [
        {
          "title": "Github Commit",
          "url": "https://github.com/node-fetch/node-fetch/commit/1ef4b560a17e644a02a3bfdea7631ffeee578b35"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/node-fetch/node-fetch/commit/36e47e8a6406185921e4985dcbeff140d73eaa10"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/node-fetch/node-fetch/pull/1449/commits/5c32f002fdd65b1c6a8f1e3620210813d45c7e60"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/node-fetch/node-fetch/pull/1449"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Information Exposure",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<2.6.7",
          ">=3.0.0 <3.1.1"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "graphiql@0.17.5",
        "codemirror-graphql@0.11.6",
        "graphql-language-service-parser@1.5.2",
        "graphql-config@2.2.1",
        "graphql-request@1.8.2",
        "cross-fetch@2.2.2",
        "node-fetch@2.1.2"
      ],
      "upgradePath": [
        false,
        "graphiql@0.17.5",
        "codemirror-graphql@0.11.6",
        "graphql-language-service-parser@1.6.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "node-fetch",
      "version": "2.1.2"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H/E:U/RL:O/RC:R",
      "alternativeIds": [],
      "creationTime": "2020-09-11T10:50:56.354201Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 5.9,
      "description": "## Overview\n[node-fetch](https://www.npmjs.com/package/node-fetch) is a light-weight module that brings window.fetch to node.js\n\nAffected versions of this package are vulnerable to Denial of Service. Node Fetch did not honor the `size` option after following a redirect, which means that when a content size was over the limit, a FetchError would never get thrown and the process would end without failure.\n## Remediation\nUpgrade `node-fetch` to version 2.6.1, 3.0.0-beta.9 or higher.\n## References\n- [GitHub Advisory](https://github.com/node-fetch/node-fetch/security/advisories/GHSA-w7rc-rwvf-8q5r)\n- [GitHub Commit](https://github.com/node-fetch/node-fetch/commit/2358a6c2563d1730a0cdaccc197c611949f6a334)\n",
      "disclosureTime": "2020-09-10T17:55:53Z",
      "exploit": "Unproven",
      "functions": [
        {
          "functionId": {
            "filePath": "lib/index.js",
            "className": null,
            "functionName": "fetch"
          },
          "version": [
            ">1.7.1 <1.7.4",
            ">2.0.0-alpha.7 <2.6.1"
          ]
        }
      ],
      "fixedIn": [
        "2.6.1",
        "3.0.0-beta.9"
      ],
      "id": "SNYK-JS-NODEFETCH-674311",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w7rc-rwvf-8q5r"
        ],
        "CVE": [
          "CVE-2020-15168"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-01-26T16:47:31.069025Z",
      "moduleName": "node-fetch",
      "packageManager": "npm",
      "packageName": "node-fetch",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-09-11T14:12:46Z",
      "references": [
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/node-fetch/node-fetch/security/advisories/GHSA-w7rc-rwvf-8q5r"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/node-fetch/node-fetch/commit/2358a6c2563d1730a0cdaccc197c611949f6a334"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Denial of Service",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [
        {
          "functionId": {
            "filePath": "lib/index.js",
            "functionName": "fetch"
          },
          "version": [
            ">1.7.1 <1.7.4",
            ">2.0.0-alpha.7 <2.6.1"
          ]
        }
      ],
      "semver": {
        "vulnerable": [
          "<2.6.1",
          ">=3.0.0-beta.1 <3.0.0-beta.9"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "graphiql@0.17.5",
        "codemirror-graphql@0.11.6",
        "graphql-language-service-parser@1.5.2",
        "graphql-config@2.2.1",
        "graphql-request@1.8.2",
        "cross-fetch@2.2.2",
        "node-fetch@2.1.2"
      ],
      "upgradePath": [
        false,
        "graphiql@0.17.5",
        "codemirror-graphql@0.11.6",
        "graphql-language-service-parser@1.6.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "node-fetch",
      "version": "2.1.2"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N",
      "alternativeIds": [],
      "creationTime": "2022-01-17T12:08:00.675849Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 6.5,
      "description": "## Overview\n[node-fetch](https://www.npmjs.com/package/node-fetch) is a light-weight module that brings window.fetch to node.js\n\nAffected versions of this package are vulnerable to Information Exposure when fetching a remote url with Cookie, if it get a `Location` response header, it will follow that url and try to fetch that url with provided cookie. This can lead to forwarding secure headers to 3th party.\n## Remediation\nUpgrade `node-fetch` to version 2.6.7, 3.1.1 or higher.\n## References\n- [Github Commit](https://github.com/node-fetch/node-fetch/commit/1ef4b560a17e644a02a3bfdea7631ffeee578b35)\n- [GitHub Commit](https://github.com/node-fetch/node-fetch/commit/36e47e8a6406185921e4985dcbeff140d73eaa10)\n- [GitHub Commit](https://github.com/node-fetch/node-fetch/pull/1449/commits/5c32f002fdd65b1c6a8f1e3620210813d45c7e60)\n- [GitHub PR](https://github.com/node-fetch/node-fetch/pull/1449)\n",
      "disclosureTime": "2022-01-17T12:00:01Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "2.6.7",
        "3.1.1"
      ],
      "id": "SNYK-JS-NODEFETCH-2342118",
      "identifiers": {
        "CWE": [
          "CWE-200"
        ],
        "CVE": [
          "CVE-2022-0235",
          "CVE-2022-1365"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-18T09:45:11.278222Z",
      "moduleName": "node-fetch",
      "packageManager": "npm",
      "packageName": "node-fetch",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-01-17T16:25:00Z",
      "references": [
        {
          "title": "Github Commit",
          "url": "https://github.com/node-fetch/node-fetch/commit/1ef4b560a17e644a02a3bfdea7631ffeee578b35"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/node-fetch/node-fetch/commit/36e47e8a6406185921e4985dcbeff140d73eaa10"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/node-fetch/node-fetch/pull/1449/commits/5c32f002fdd65b1c6a8f1e3620210813d45c7e60"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/node-fetch/node-fetch/pull/1449"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Information Exposure",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<2.6.7",
          ">=3.0.0 <3.1.1"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "graphiql@0.17.5",
        "codemirror-graphql@0.11.6",
        "graphql-language-service-interface@2.3.3",
        "graphql-config@2.2.1",
        "graphql-request@1.8.2",
        "cross-fetch@2.2.2",
        "node-fetch@2.1.2"
      ],
      "upgradePath": [
        false,
        "graphiql@0.17.5",
        "codemirror-graphql@0.11.6",
        "graphql-language-service-interface@2.4.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "node-fetch",
      "version": "2.1.2"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H/E:U/RL:O/RC:R",
      "alternativeIds": [],
      "creationTime": "2020-09-11T10:50:56.354201Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 5.9,
      "description": "## Overview\n[node-fetch](https://www.npmjs.com/package/node-fetch) is a light-weight module that brings window.fetch to node.js\n\nAffected versions of this package are vulnerable to Denial of Service. Node Fetch did not honor the `size` option after following a redirect, which means that when a content size was over the limit, a FetchError would never get thrown and the process would end without failure.\n## Remediation\nUpgrade `node-fetch` to version 2.6.1, 3.0.0-beta.9 or higher.\n## References\n- [GitHub Advisory](https://github.com/node-fetch/node-fetch/security/advisories/GHSA-w7rc-rwvf-8q5r)\n- [GitHub Commit](https://github.com/node-fetch/node-fetch/commit/2358a6c2563d1730a0cdaccc197c611949f6a334)\n",
      "disclosureTime": "2020-09-10T17:55:53Z",
      "exploit": "Unproven",
      "functions": [
        {
          "functionId": {
            "filePath": "lib/index.js",
            "className": null,
            "functionName": "fetch"
          },
          "version": [
            ">1.7.1 <1.7.4",
            ">2.0.0-alpha.7 <2.6.1"
          ]
        }
      ],
      "fixedIn": [
        "2.6.1",
        "3.0.0-beta.9"
      ],
      "id": "SNYK-JS-NODEFETCH-674311",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w7rc-rwvf-8q5r"
        ],
        "CVE": [
          "CVE-2020-15168"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-01-26T16:47:31.069025Z",
      "moduleName": "node-fetch",
      "packageManager": "npm",
      "packageName": "node-fetch",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-09-11T14:12:46Z",
      "references": [
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/node-fetch/node-fetch/security/advisories/GHSA-w7rc-rwvf-8q5r"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/node-fetch/node-fetch/commit/2358a6c2563d1730a0cdaccc197c611949f6a334"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Denial of Service",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [
        {
          "functionId": {
            "filePath": "lib/index.js",
            "functionName": "fetch"
          },
          "version": [
            ">1.7.1 <1.7.4",
            ">2.0.0-alpha.7 <2.6.1"
          ]
        }
      ],
      "semver": {
        "vulnerable": [
          "<2.6.1",
          ">=3.0.0-beta.1 <3.0.0-beta.9"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "graphiql@0.17.5",
        "codemirror-graphql@0.11.6",
        "graphql-language-service-interface@2.3.3",
        "graphql-config@2.2.1",
        "graphql-request@1.8.2",
        "cross-fetch@2.2.2",
        "node-fetch@2.1.2"
      ],
      "upgradePath": [
        false,
        "graphiql@0.17.5",
        "codemirror-graphql@0.11.6",
        "graphql-language-service-interface@2.4.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "node-fetch",
      "version": "2.1.2"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N",
      "alternativeIds": [],
      "creationTime": "2022-01-17T12:08:00.675849Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 6.5,
      "description": "## Overview\n[node-fetch](https://www.npmjs.com/package/node-fetch) is a light-weight module that brings window.fetch to node.js\n\nAffected versions of this package are vulnerable to Information Exposure when fetching a remote url with Cookie, if it get a `Location` response header, it will follow that url and try to fetch that url with provided cookie. This can lead to forwarding secure headers to 3th party.\n## Remediation\nUpgrade `node-fetch` to version 2.6.7, 3.1.1 or higher.\n## References\n- [Github Commit](https://github.com/node-fetch/node-fetch/commit/1ef4b560a17e644a02a3bfdea7631ffeee578b35)\n- [GitHub Commit](https://github.com/node-fetch/node-fetch/commit/36e47e8a6406185921e4985dcbeff140d73eaa10)\n- [GitHub Commit](https://github.com/node-fetch/node-fetch/pull/1449/commits/5c32f002fdd65b1c6a8f1e3620210813d45c7e60)\n- [GitHub PR](https://github.com/node-fetch/node-fetch/pull/1449)\n",
      "disclosureTime": "2022-01-17T12:00:01Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "2.6.7",
        "3.1.1"
      ],
      "id": "SNYK-JS-NODEFETCH-2342118",
      "identifiers": {
        "CWE": [
          "CWE-200"
        ],
        "CVE": [
          "CVE-2022-0235",
          "CVE-2022-1365"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-18T09:45:11.278222Z",
      "moduleName": "node-fetch",
      "packageManager": "npm",
      "packageName": "node-fetch",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-01-17T16:25:00Z",
      "references": [
        {
          "title": "Github Commit",
          "url": "https://github.com/node-fetch/node-fetch/commit/1ef4b560a17e644a02a3bfdea7631ffeee578b35"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/node-fetch/node-fetch/commit/36e47e8a6406185921e4985dcbeff140d73eaa10"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/node-fetch/node-fetch/pull/1449/commits/5c32f002fdd65b1c6a8f1e3620210813d45c7e60"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/node-fetch/node-fetch/pull/1449"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Information Exposure",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<2.6.7",
          ">=3.0.0 <3.1.1"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "graphiql@0.17.5",
        "codemirror-graphql@0.11.6",
        "graphql-language-service-parser@1.5.2",
        "graphql-language-service-types@1.5.2",
        "graphql-config@2.2.1",
        "graphql-request@1.8.2",
        "cross-fetch@2.2.2",
        "node-fetch@2.1.2"
      ],
      "upgradePath": [
        false,
        "graphiql@0.17.5",
        "codemirror-graphql@0.11.6",
        "graphql-language-service-parser@1.5.2",
        "graphql-language-service-types@1.6.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "node-fetch",
      "version": "2.1.2"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H/E:U/RL:O/RC:R",
      "alternativeIds": [],
      "creationTime": "2020-09-11T10:50:56.354201Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 5.9,
      "description": "## Overview\n[node-fetch](https://www.npmjs.com/package/node-fetch) is a light-weight module that brings window.fetch to node.js\n\nAffected versions of this package are vulnerable to Denial of Service. Node Fetch did not honor the `size` option after following a redirect, which means that when a content size was over the limit, a FetchError would never get thrown and the process would end without failure.\n## Remediation\nUpgrade `node-fetch` to version 2.6.1, 3.0.0-beta.9 or higher.\n## References\n- [GitHub Advisory](https://github.com/node-fetch/node-fetch/security/advisories/GHSA-w7rc-rwvf-8q5r)\n- [GitHub Commit](https://github.com/node-fetch/node-fetch/commit/2358a6c2563d1730a0cdaccc197c611949f6a334)\n",
      "disclosureTime": "2020-09-10T17:55:53Z",
      "exploit": "Unproven",
      "functions": [
        {
          "functionId": {
            "filePath": "lib/index.js",
            "className": null,
            "functionName": "fetch"
          },
          "version": [
            ">1.7.1 <1.7.4",
            ">2.0.0-alpha.7 <2.6.1"
          ]
        }
      ],
      "fixedIn": [
        "2.6.1",
        "3.0.0-beta.9"
      ],
      "id": "SNYK-JS-NODEFETCH-674311",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w7rc-rwvf-8q5r"
        ],
        "CVE": [
          "CVE-2020-15168"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-01-26T16:47:31.069025Z",
      "moduleName": "node-fetch",
      "packageManager": "npm",
      "packageName": "node-fetch",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-09-11T14:12:46Z",
      "references": [
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/node-fetch/node-fetch/security/advisories/GHSA-w7rc-rwvf-8q5r"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/node-fetch/node-fetch/commit/2358a6c2563d1730a0cdaccc197c611949f6a334"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Denial of Service",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [
        {
          "functionId": {
            "filePath": "lib/index.js",
            "functionName": "fetch"
          },
          "version": [
            ">1.7.1 <1.7.4",
            ">2.0.0-alpha.7 <2.6.1"
          ]
        }
      ],
      "semver": {
        "vulnerable": [
          "<2.6.1",
          ">=3.0.0-beta.1 <3.0.0-beta.9"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "graphiql@0.17.5",
        "codemirror-graphql@0.11.6",
        "graphql-language-service-parser@1.5.2",
        "graphql-language-service-types@1.5.2",
        "graphql-config@2.2.1",
        "graphql-request@1.8.2",
        "cross-fetch@2.2.2",
        "node-fetch@2.1.2"
      ],
      "upgradePath": [
        false,
        "graphiql@0.17.5",
        "codemirror-graphql@0.11.6",
        "graphql-language-service-parser@1.5.2",
        "graphql-language-service-types@1.6.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "node-fetch",
      "version": "2.1.2"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N",
      "alternativeIds": [],
      "creationTime": "2022-01-17T12:08:00.675849Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 6.5,
      "description": "## Overview\n[node-fetch](https://www.npmjs.com/package/node-fetch) is a light-weight module that brings window.fetch to node.js\n\nAffected versions of this package are vulnerable to Information Exposure when fetching a remote url with Cookie, if it get a `Location` response header, it will follow that url and try to fetch that url with provided cookie. This can lead to forwarding secure headers to 3th party.\n## Remediation\nUpgrade `node-fetch` to version 2.6.7, 3.1.1 or higher.\n## References\n- [Github Commit](https://github.com/node-fetch/node-fetch/commit/1ef4b560a17e644a02a3bfdea7631ffeee578b35)\n- [GitHub Commit](https://github.com/node-fetch/node-fetch/commit/36e47e8a6406185921e4985dcbeff140d73eaa10)\n- [GitHub Commit](https://github.com/node-fetch/node-fetch/pull/1449/commits/5c32f002fdd65b1c6a8f1e3620210813d45c7e60)\n- [GitHub PR](https://github.com/node-fetch/node-fetch/pull/1449)\n",
      "disclosureTime": "2022-01-17T12:00:01Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "2.6.7",
        "3.1.1"
      ],
      "id": "SNYK-JS-NODEFETCH-2342118",
      "identifiers": {
        "CWE": [
          "CWE-200"
        ],
        "CVE": [
          "CVE-2022-0235",
          "CVE-2022-1365"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-18T09:45:11.278222Z",
      "moduleName": "node-fetch",
      "packageManager": "npm",
      "packageName": "node-fetch",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-01-17T16:25:00Z",
      "references": [
        {
          "title": "Github Commit",
          "url": "https://github.com/node-fetch/node-fetch/commit/1ef4b560a17e644a02a3bfdea7631ffeee578b35"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/node-fetch/node-fetch/commit/36e47e8a6406185921e4985dcbeff140d73eaa10"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/node-fetch/node-fetch/pull/1449/commits/5c32f002fdd65b1c6a8f1e3620210813d45c7e60"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/node-fetch/node-fetch/pull/1449"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Information Exposure",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<2.6.7",
          ">=3.0.0 <3.1.1"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "graphiql@0.17.5",
        "codemirror-graphql@0.11.6",
        "graphql-language-service-interface@2.3.3",
        "graphql-language-service-types@1.5.2",
        "graphql-config@2.2.1",
        "graphql-request@1.8.2",
        "cross-fetch@2.2.2",
        "node-fetch@2.1.2"
      ],
      "upgradePath": [
        false,
        "graphiql@0.17.5",
        "codemirror-graphql@0.11.6",
        "graphql-language-service-interface@2.3.3",
        "graphql-language-service-types@1.6.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "node-fetch",
      "version": "2.1.2"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H/E:U/RL:O/RC:R",
      "alternativeIds": [],
      "creationTime": "2020-09-11T10:50:56.354201Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 5.9,
      "description": "## Overview\n[node-fetch](https://www.npmjs.com/package/node-fetch) is a light-weight module that brings window.fetch to node.js\n\nAffected versions of this package are vulnerable to Denial of Service. Node Fetch did not honor the `size` option after following a redirect, which means that when a content size was over the limit, a FetchError would never get thrown and the process would end without failure.\n## Remediation\nUpgrade `node-fetch` to version 2.6.1, 3.0.0-beta.9 or higher.\n## References\n- [GitHub Advisory](https://github.com/node-fetch/node-fetch/security/advisories/GHSA-w7rc-rwvf-8q5r)\n- [GitHub Commit](https://github.com/node-fetch/node-fetch/commit/2358a6c2563d1730a0cdaccc197c611949f6a334)\n",
      "disclosureTime": "2020-09-10T17:55:53Z",
      "exploit": "Unproven",
      "functions": [
        {
          "functionId": {
            "filePath": "lib/index.js",
            "className": null,
            "functionName": "fetch"
          },
          "version": [
            ">1.7.1 <1.7.4",
            ">2.0.0-alpha.7 <2.6.1"
          ]
        }
      ],
      "fixedIn": [
        "2.6.1",
        "3.0.0-beta.9"
      ],
      "id": "SNYK-JS-NODEFETCH-674311",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w7rc-rwvf-8q5r"
        ],
        "CVE": [
          "CVE-2020-15168"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-01-26T16:47:31.069025Z",
      "moduleName": "node-fetch",
      "packageManager": "npm",
      "packageName": "node-fetch",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-09-11T14:12:46Z",
      "references": [
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/node-fetch/node-fetch/security/advisories/GHSA-w7rc-rwvf-8q5r"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/node-fetch/node-fetch/commit/2358a6c2563d1730a0cdaccc197c611949f6a334"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Denial of Service",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [
        {
          "functionId": {
            "filePath": "lib/index.js",
            "functionName": "fetch"
          },
          "version": [
            ">1.7.1 <1.7.4",
            ">2.0.0-alpha.7 <2.6.1"
          ]
        }
      ],
      "semver": {
        "vulnerable": [
          "<2.6.1",
          ">=3.0.0-beta.1 <3.0.0-beta.9"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "graphiql@0.17.5",
        "codemirror-graphql@0.11.6",
        "graphql-language-service-interface@2.3.3",
        "graphql-language-service-types@1.5.2",
        "graphql-config@2.2.1",
        "graphql-request@1.8.2",
        "cross-fetch@2.2.2",
        "node-fetch@2.1.2"
      ],
      "upgradePath": [
        false,
        "graphiql@0.17.5",
        "codemirror-graphql@0.11.6",
        "graphql-language-service-interface@2.3.3",
        "graphql-language-service-types@1.6.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "node-fetch",
      "version": "2.1.2"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N",
      "alternativeIds": [],
      "creationTime": "2022-01-17T12:08:00.675849Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 6.5,
      "description": "## Overview\n[node-fetch](https://www.npmjs.com/package/node-fetch) is a light-weight module that brings window.fetch to node.js\n\nAffected versions of this package are vulnerable to Information Exposure when fetching a remote url with Cookie, if it get a `Location` response header, it will follow that url and try to fetch that url with provided cookie. This can lead to forwarding secure headers to 3th party.\n## Remediation\nUpgrade `node-fetch` to version 2.6.7, 3.1.1 or higher.\n## References\n- [Github Commit](https://github.com/node-fetch/node-fetch/commit/1ef4b560a17e644a02a3bfdea7631ffeee578b35)\n- [GitHub Commit](https://github.com/node-fetch/node-fetch/commit/36e47e8a6406185921e4985dcbeff140d73eaa10)\n- [GitHub Commit](https://github.com/node-fetch/node-fetch/pull/1449/commits/5c32f002fdd65b1c6a8f1e3620210813d45c7e60)\n- [GitHub PR](https://github.com/node-fetch/node-fetch/pull/1449)\n",
      "disclosureTime": "2022-01-17T12:00:01Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "2.6.7",
        "3.1.1"
      ],
      "id": "SNYK-JS-NODEFETCH-2342118",
      "identifiers": {
        "CWE": [
          "CWE-200"
        ],
        "CVE": [
          "CVE-2022-0235",
          "CVE-2022-1365"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-18T09:45:11.278222Z",
      "moduleName": "node-fetch",
      "packageManager": "npm",
      "packageName": "node-fetch",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-01-17T16:25:00Z",
      "references": [
        {
          "title": "Github Commit",
          "url": "https://github.com/node-fetch/node-fetch/commit/1ef4b560a17e644a02a3bfdea7631ffeee578b35"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/node-fetch/node-fetch/commit/36e47e8a6406185921e4985dcbeff140d73eaa10"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/node-fetch/node-fetch/pull/1449/commits/5c32f002fdd65b1c6a8f1e3620210813d45c7e60"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/node-fetch/node-fetch/pull/1449"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Information Exposure",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<2.6.7",
          ">=3.0.0 <3.1.1"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "graphiql@0.17.5",
        "codemirror-graphql@0.11.6",
        "graphql-language-service-interface@2.3.3",
        "graphql-language-service-parser@1.5.2",
        "graphql-config@2.2.1",
        "graphql-request@1.8.2",
        "cross-fetch@2.2.2",
        "node-fetch@2.1.2"
      ],
      "upgradePath": [
        false,
        "graphiql@0.17.5",
        "codemirror-graphql@0.11.6",
        "graphql-language-service-interface@2.3.3",
        "graphql-language-service-parser@1.6.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "node-fetch",
      "version": "2.1.2"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H/E:U/RL:O/RC:R",
      "alternativeIds": [],
      "creationTime": "2020-09-11T10:50:56.354201Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 5.9,
      "description": "## Overview\n[node-fetch](https://www.npmjs.com/package/node-fetch) is a light-weight module that brings window.fetch to node.js\n\nAffected versions of this package are vulnerable to Denial of Service. Node Fetch did not honor the `size` option after following a redirect, which means that when a content size was over the limit, a FetchError would never get thrown and the process would end without failure.\n## Remediation\nUpgrade `node-fetch` to version 2.6.1, 3.0.0-beta.9 or higher.\n## References\n- [GitHub Advisory](https://github.com/node-fetch/node-fetch/security/advisories/GHSA-w7rc-rwvf-8q5r)\n- [GitHub Commit](https://github.com/node-fetch/node-fetch/commit/2358a6c2563d1730a0cdaccc197c611949f6a334)\n",
      "disclosureTime": "2020-09-10T17:55:53Z",
      "exploit": "Unproven",
      "functions": [
        {
          "functionId": {
            "filePath": "lib/index.js",
            "className": null,
            "functionName": "fetch"
          },
          "version": [
            ">1.7.1 <1.7.4",
            ">2.0.0-alpha.7 <2.6.1"
          ]
        }
      ],
      "fixedIn": [
        "2.6.1",
        "3.0.0-beta.9"
      ],
      "id": "SNYK-JS-NODEFETCH-674311",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w7rc-rwvf-8q5r"
        ],
        "CVE": [
          "CVE-2020-15168"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-01-26T16:47:31.069025Z",
      "moduleName": "node-fetch",
      "packageManager": "npm",
      "packageName": "node-fetch",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-09-11T14:12:46Z",
      "references": [
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/node-fetch/node-fetch/security/advisories/GHSA-w7rc-rwvf-8q5r"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/node-fetch/node-fetch/commit/2358a6c2563d1730a0cdaccc197c611949f6a334"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Denial of Service",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [
        {
          "functionId": {
            "filePath": "lib/index.js",
            "functionName": "fetch"
          },
          "version": [
            ">1.7.1 <1.7.4",
            ">2.0.0-alpha.7 <2.6.1"
          ]
        }
      ],
      "semver": {
        "vulnerable": [
          "<2.6.1",
          ">=3.0.0-beta.1 <3.0.0-beta.9"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "graphiql@0.17.5",
        "codemirror-graphql@0.11.6",
        "graphql-language-service-interface@2.3.3",
        "graphql-language-service-parser@1.5.2",
        "graphql-config@2.2.1",
        "graphql-request@1.8.2",
        "cross-fetch@2.2.2",
        "node-fetch@2.1.2"
      ],
      "upgradePath": [
        false,
        "graphiql@0.17.5",
        "codemirror-graphql@0.11.6",
        "graphql-language-service-interface@2.3.3",
        "graphql-language-service-parser@1.6.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "node-fetch",
      "version": "2.1.2"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N",
      "alternativeIds": [],
      "creationTime": "2022-01-17T12:08:00.675849Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 6.5,
      "description": "## Overview\n[node-fetch](https://www.npmjs.com/package/node-fetch) is a light-weight module that brings window.fetch to node.js\n\nAffected versions of this package are vulnerable to Information Exposure when fetching a remote url with Cookie, if it get a `Location` response header, it will follow that url and try to fetch that url with provided cookie. This can lead to forwarding secure headers to 3th party.\n## Remediation\nUpgrade `node-fetch` to version 2.6.7, 3.1.1 or higher.\n## References\n- [Github Commit](https://github.com/node-fetch/node-fetch/commit/1ef4b560a17e644a02a3bfdea7631ffeee578b35)\n- [GitHub Commit](https://github.com/node-fetch/node-fetch/commit/36e47e8a6406185921e4985dcbeff140d73eaa10)\n- [GitHub Commit](https://github.com/node-fetch/node-fetch/pull/1449/commits/5c32f002fdd65b1c6a8f1e3620210813d45c7e60)\n- [GitHub PR](https://github.com/node-fetch/node-fetch/pull/1449)\n",
      "disclosureTime": "2022-01-17T12:00:01Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "2.6.7",
        "3.1.1"
      ],
      "id": "SNYK-JS-NODEFETCH-2342118",
      "identifiers": {
        "CWE": [
          "CWE-200"
        ],
        "CVE": [
          "CVE-2022-0235",
          "CVE-2022-1365"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-18T09:45:11.278222Z",
      "moduleName": "node-fetch",
      "packageManager": "npm",
      "packageName": "node-fetch",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-01-17T16:25:00Z",
      "references": [
        {
          "title": "Github Commit",
          "url": "https://github.com/node-fetch/node-fetch/commit/1ef4b560a17e644a02a3bfdea7631ffeee578b35"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/node-fetch/node-fetch/commit/36e47e8a6406185921e4985dcbeff140d73eaa10"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/node-fetch/node-fetch/pull/1449/commits/5c32f002fdd65b1c6a8f1e3620210813d45c7e60"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/node-fetch/node-fetch/pull/1449"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Information Exposure",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<2.6.7",
          ">=3.0.0 <3.1.1"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "graphiql@0.17.5",
        "codemirror-graphql@0.11.6",
        "graphql-language-service-interface@2.3.3",
        "graphql-language-service-utils@2.3.3",
        "graphql-config@2.2.1",
        "graphql-request@1.8.2",
        "cross-fetch@2.2.2",
        "node-fetch@2.1.2"
      ],
      "upgradePath": [
        false,
        "graphiql@0.17.5",
        "codemirror-graphql@0.11.6",
        "graphql-language-service-interface@2.3.3",
        "graphql-language-service-utils@2.4.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "node-fetch",
      "version": "2.1.2"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H/E:U/RL:O/RC:R",
      "alternativeIds": [],
      "creationTime": "2020-09-11T10:50:56.354201Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 5.9,
      "description": "## Overview\n[node-fetch](https://www.npmjs.com/package/node-fetch) is a light-weight module that brings window.fetch to node.js\n\nAffected versions of this package are vulnerable to Denial of Service. Node Fetch did not honor the `size` option after following a redirect, which means that when a content size was over the limit, a FetchError would never get thrown and the process would end without failure.\n## Remediation\nUpgrade `node-fetch` to version 2.6.1, 3.0.0-beta.9 or higher.\n## References\n- [GitHub Advisory](https://github.com/node-fetch/node-fetch/security/advisories/GHSA-w7rc-rwvf-8q5r)\n- [GitHub Commit](https://github.com/node-fetch/node-fetch/commit/2358a6c2563d1730a0cdaccc197c611949f6a334)\n",
      "disclosureTime": "2020-09-10T17:55:53Z",
      "exploit": "Unproven",
      "functions": [
        {
          "functionId": {
            "filePath": "lib/index.js",
            "className": null,
            "functionName": "fetch"
          },
          "version": [
            ">1.7.1 <1.7.4",
            ">2.0.0-alpha.7 <2.6.1"
          ]
        }
      ],
      "fixedIn": [
        "2.6.1",
        "3.0.0-beta.9"
      ],
      "id": "SNYK-JS-NODEFETCH-674311",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w7rc-rwvf-8q5r"
        ],
        "CVE": [
          "CVE-2020-15168"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-01-26T16:47:31.069025Z",
      "moduleName": "node-fetch",
      "packageManager": "npm",
      "packageName": "node-fetch",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-09-11T14:12:46Z",
      "references": [
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/node-fetch/node-fetch/security/advisories/GHSA-w7rc-rwvf-8q5r"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/node-fetch/node-fetch/commit/2358a6c2563d1730a0cdaccc197c611949f6a334"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Denial of Service",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [
        {
          "functionId": {
            "filePath": "lib/index.js",
            "functionName": "fetch"
          },
          "version": [
            ">1.7.1 <1.7.4",
            ">2.0.0-alpha.7 <2.6.1"
          ]
        }
      ],
      "semver": {
        "vulnerable": [
          "<2.6.1",
          ">=3.0.0-beta.1 <3.0.0-beta.9"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "graphiql@0.17.5",
        "codemirror-graphql@0.11.6",
        "graphql-language-service-interface@2.3.3",
        "graphql-language-service-utils@2.3.3",
        "graphql-config@2.2.1",
        "graphql-request@1.8.2",
        "cross-fetch@2.2.2",
        "node-fetch@2.1.2"
      ],
      "upgradePath": [
        false,
        "graphiql@0.17.5",
        "codemirror-graphql@0.11.6",
        "graphql-language-service-interface@2.3.3",
        "graphql-language-service-utils@2.4.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "node-fetch",
      "version": "2.1.2"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N",
      "alternativeIds": [],
      "creationTime": "2022-01-17T12:08:00.675849Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 6.5,
      "description": "## Overview\n[node-fetch](https://www.npmjs.com/package/node-fetch) is a light-weight module that brings window.fetch to node.js\n\nAffected versions of this package are vulnerable to Information Exposure when fetching a remote url with Cookie, if it get a `Location` response header, it will follow that url and try to fetch that url with provided cookie. This can lead to forwarding secure headers to 3th party.\n## Remediation\nUpgrade `node-fetch` to version 2.6.7, 3.1.1 or higher.\n## References\n- [Github Commit](https://github.com/node-fetch/node-fetch/commit/1ef4b560a17e644a02a3bfdea7631ffeee578b35)\n- [GitHub Commit](https://github.com/node-fetch/node-fetch/commit/36e47e8a6406185921e4985dcbeff140d73eaa10)\n- [GitHub Commit](https://github.com/node-fetch/node-fetch/pull/1449/commits/5c32f002fdd65b1c6a8f1e3620210813d45c7e60)\n- [GitHub PR](https://github.com/node-fetch/node-fetch/pull/1449)\n",
      "disclosureTime": "2022-01-17T12:00:01Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "2.6.7",
        "3.1.1"
      ],
      "id": "SNYK-JS-NODEFETCH-2342118",
      "identifiers": {
        "CWE": [
          "CWE-200"
        ],
        "CVE": [
          "CVE-2022-0235",
          "CVE-2022-1365"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-18T09:45:11.278222Z",
      "moduleName": "node-fetch",
      "packageManager": "npm",
      "packageName": "node-fetch",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-01-17T16:25:00Z",
      "references": [
        {
          "title": "Github Commit",
          "url": "https://github.com/node-fetch/node-fetch/commit/1ef4b560a17e644a02a3bfdea7631ffeee578b35"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/node-fetch/node-fetch/commit/36e47e8a6406185921e4985dcbeff140d73eaa10"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/node-fetch/node-fetch/pull/1449/commits/5c32f002fdd65b1c6a8f1e3620210813d45c7e60"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/node-fetch/node-fetch/pull/1449"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Information Exposure",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<2.6.7",
          ">=3.0.0 <3.1.1"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "graphiql@0.17.5",
        "codemirror-graphql@0.11.6",
        "graphql-language-service-interface@2.3.3",
        "graphql-language-service-parser@1.5.2",
        "graphql-language-service-types@1.5.2",
        "graphql-config@2.2.1",
        "graphql-request@1.8.2",
        "cross-fetch@2.2.2",
        "node-fetch@2.1.2"
      ],
      "upgradePath": [
        false,
        "graphiql@0.17.5",
        "codemirror-graphql@0.11.6",
        "graphql-language-service-interface@2.3.3",
        "graphql-language-service-parser@1.5.2",
        "graphql-language-service-types@1.6.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "node-fetch",
      "version": "2.1.2"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H/E:U/RL:O/RC:R",
      "alternativeIds": [],
      "creationTime": "2020-09-11T10:50:56.354201Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 5.9,
      "description": "## Overview\n[node-fetch](https://www.npmjs.com/package/node-fetch) is a light-weight module that brings window.fetch to node.js\n\nAffected versions of this package are vulnerable to Denial of Service. Node Fetch did not honor the `size` option after following a redirect, which means that when a content size was over the limit, a FetchError would never get thrown and the process would end without failure.\n## Remediation\nUpgrade `node-fetch` to version 2.6.1, 3.0.0-beta.9 or higher.\n## References\n- [GitHub Advisory](https://github.com/node-fetch/node-fetch/security/advisories/GHSA-w7rc-rwvf-8q5r)\n- [GitHub Commit](https://github.com/node-fetch/node-fetch/commit/2358a6c2563d1730a0cdaccc197c611949f6a334)\n",
      "disclosureTime": "2020-09-10T17:55:53Z",
      "exploit": "Unproven",
      "functions": [
        {
          "functionId": {
            "filePath": "lib/index.js",
            "className": null,
            "functionName": "fetch"
          },
          "version": [
            ">1.7.1 <1.7.4",
            ">2.0.0-alpha.7 <2.6.1"
          ]
        }
      ],
      "fixedIn": [
        "2.6.1",
        "3.0.0-beta.9"
      ],
      "id": "SNYK-JS-NODEFETCH-674311",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w7rc-rwvf-8q5r"
        ],
        "CVE": [
          "CVE-2020-15168"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-01-26T16:47:31.069025Z",
      "moduleName": "node-fetch",
      "packageManager": "npm",
      "packageName": "node-fetch",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-09-11T14:12:46Z",
      "references": [
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/node-fetch/node-fetch/security/advisories/GHSA-w7rc-rwvf-8q5r"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/node-fetch/node-fetch/commit/2358a6c2563d1730a0cdaccc197c611949f6a334"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Denial of Service",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [
        {
          "functionId": {
            "filePath": "lib/index.js",
            "functionName": "fetch"
          },
          "version": [
            ">1.7.1 <1.7.4",
            ">2.0.0-alpha.7 <2.6.1"
          ]
        }
      ],
      "semver": {
        "vulnerable": [
          "<2.6.1",
          ">=3.0.0-beta.1 <3.0.0-beta.9"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "graphiql@0.17.5",
        "codemirror-graphql@0.11.6",
        "graphql-language-service-interface@2.3.3",
        "graphql-language-service-parser@1.5.2",
        "graphql-language-service-types@1.5.2",
        "graphql-config@2.2.1",
        "graphql-request@1.8.2",
        "cross-fetch@2.2.2",
        "node-fetch@2.1.2"
      ],
      "upgradePath": [
        false,
        "graphiql@0.17.5",
        "codemirror-graphql@0.11.6",
        "graphql-language-service-interface@2.3.3",
        "graphql-language-service-parser@1.5.2",
        "graphql-language-service-types@1.6.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "node-fetch",
      "version": "2.1.2"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N",
      "alternativeIds": [],
      "creationTime": "2022-01-17T12:08:00.675849Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 6.5,
      "description": "## Overview\n[node-fetch](https://www.npmjs.com/package/node-fetch) is a light-weight module that brings window.fetch to node.js\n\nAffected versions of this package are vulnerable to Information Exposure when fetching a remote url with Cookie, if it get a `Location` response header, it will follow that url and try to fetch that url with provided cookie. This can lead to forwarding secure headers to 3th party.\n## Remediation\nUpgrade `node-fetch` to version 2.6.7, 3.1.1 or higher.\n## References\n- [Github Commit](https://github.com/node-fetch/node-fetch/commit/1ef4b560a17e644a02a3bfdea7631ffeee578b35)\n- [GitHub Commit](https://github.com/node-fetch/node-fetch/commit/36e47e8a6406185921e4985dcbeff140d73eaa10)\n- [GitHub Commit](https://github.com/node-fetch/node-fetch/pull/1449/commits/5c32f002fdd65b1c6a8f1e3620210813d45c7e60)\n- [GitHub PR](https://github.com/node-fetch/node-fetch/pull/1449)\n",
      "disclosureTime": "2022-01-17T12:00:01Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "2.6.7",
        "3.1.1"
      ],
      "id": "SNYK-JS-NODEFETCH-2342118",
      "identifiers": {
        "CWE": [
          "CWE-200"
        ],
        "CVE": [
          "CVE-2022-0235",
          "CVE-2022-1365"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-18T09:45:11.278222Z",
      "moduleName": "node-fetch",
      "packageManager": "npm",
      "packageName": "node-fetch",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-01-17T16:25:00Z",
      "references": [
        {
          "title": "Github Commit",
          "url": "https://github.com/node-fetch/node-fetch/commit/1ef4b560a17e644a02a3bfdea7631ffeee578b35"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/node-fetch/node-fetch/commit/36e47e8a6406185921e4985dcbeff140d73eaa10"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/node-fetch/node-fetch/pull/1449/commits/5c32f002fdd65b1c6a8f1e3620210813d45c7e60"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/node-fetch/node-fetch/pull/1449"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Information Exposure",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<2.6.7",
          ">=3.0.0 <3.1.1"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "graphiql@0.17.5",
        "codemirror-graphql@0.11.6",
        "graphql-language-service-interface@2.3.3",
        "graphql-language-service-utils@2.3.3",
        "graphql-language-service-types@1.5.2",
        "graphql-config@2.2.1",
        "graphql-request@1.8.2",
        "cross-fetch@2.2.2",
        "node-fetch@2.1.2"
      ],
      "upgradePath": [
        false,
        "graphiql@0.17.5",
        "codemirror-graphql@0.11.6",
        "graphql-language-service-interface@2.3.3",
        "graphql-language-service-utils@2.3.3",
        "graphql-language-service-types@1.6.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "node-fetch",
      "version": "2.1.2"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H/E:U/RL:O/RC:R",
      "alternativeIds": [],
      "creationTime": "2020-09-11T10:50:56.354201Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 5.9,
      "description": "## Overview\n[node-fetch](https://www.npmjs.com/package/node-fetch) is a light-weight module that brings window.fetch to node.js\n\nAffected versions of this package are vulnerable to Denial of Service. Node Fetch did not honor the `size` option after following a redirect, which means that when a content size was over the limit, a FetchError would never get thrown and the process would end without failure.\n## Remediation\nUpgrade `node-fetch` to version 2.6.1, 3.0.0-beta.9 or higher.\n## References\n- [GitHub Advisory](https://github.com/node-fetch/node-fetch/security/advisories/GHSA-w7rc-rwvf-8q5r)\n- [GitHub Commit](https://github.com/node-fetch/node-fetch/commit/2358a6c2563d1730a0cdaccc197c611949f6a334)\n",
      "disclosureTime": "2020-09-10T17:55:53Z",
      "exploit": "Unproven",
      "functions": [
        {
          "functionId": {
            "filePath": "lib/index.js",
            "className": null,
            "functionName": "fetch"
          },
          "version": [
            ">1.7.1 <1.7.4",
            ">2.0.0-alpha.7 <2.6.1"
          ]
        }
      ],
      "fixedIn": [
        "2.6.1",
        "3.0.0-beta.9"
      ],
      "id": "SNYK-JS-NODEFETCH-674311",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w7rc-rwvf-8q5r"
        ],
        "CVE": [
          "CVE-2020-15168"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-01-26T16:47:31.069025Z",
      "moduleName": "node-fetch",
      "packageManager": "npm",
      "packageName": "node-fetch",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-09-11T14:12:46Z",
      "references": [
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/node-fetch/node-fetch/security/advisories/GHSA-w7rc-rwvf-8q5r"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/node-fetch/node-fetch/commit/2358a6c2563d1730a0cdaccc197c611949f6a334"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Denial of Service",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [
        {
          "functionId": {
            "filePath": "lib/index.js",
            "functionName": "fetch"
          },
          "version": [
            ">1.7.1 <1.7.4",
            ">2.0.0-alpha.7 <2.6.1"
          ]
        }
      ],
      "semver": {
        "vulnerable": [
          "<2.6.1",
          ">=3.0.0-beta.1 <3.0.0-beta.9"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "graphiql@0.17.5",
        "codemirror-graphql@0.11.6",
        "graphql-language-service-interface@2.3.3",
        "graphql-language-service-utils@2.3.3",
        "graphql-language-service-types@1.5.2",
        "graphql-config@2.2.1",
        "graphql-request@1.8.2",
        "cross-fetch@2.2.2",
        "node-fetch@2.1.2"
      ],
      "upgradePath": [
        false,
        "graphiql@0.17.5",
        "codemirror-graphql@0.11.6",
        "graphql-language-service-interface@2.3.3",
        "graphql-language-service-utils@2.3.3",
        "graphql-language-service-types@1.6.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "node-fetch",
      "version": "2.1.2"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N",
      "alternativeIds": [],
      "creationTime": "2022-01-17T12:08:00.675849Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 6.5,
      "description": "## Overview\n[node-fetch](https://www.npmjs.com/package/node-fetch) is a light-weight module that brings window.fetch to node.js\n\nAffected versions of this package are vulnerable to Information Exposure when fetching a remote url with Cookie, if it get a `Location` response header, it will follow that url and try to fetch that url with provided cookie. This can lead to forwarding secure headers to 3th party.\n## Remediation\nUpgrade `node-fetch` to version 2.6.7, 3.1.1 or higher.\n## References\n- [Github Commit](https://github.com/node-fetch/node-fetch/commit/1ef4b560a17e644a02a3bfdea7631ffeee578b35)\n- [GitHub Commit](https://github.com/node-fetch/node-fetch/commit/36e47e8a6406185921e4985dcbeff140d73eaa10)\n- [GitHub Commit](https://github.com/node-fetch/node-fetch/pull/1449/commits/5c32f002fdd65b1c6a8f1e3620210813d45c7e60)\n- [GitHub PR](https://github.com/node-fetch/node-fetch/pull/1449)\n",
      "disclosureTime": "2022-01-17T12:00:01Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "2.6.7",
        "3.1.1"
      ],
      "id": "SNYK-JS-NODEFETCH-2342118",
      "identifiers": {
        "CWE": [
          "CWE-200"
        ],
        "CVE": [
          "CVE-2022-0235",
          "CVE-2022-1365"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-18T09:45:11.278222Z",
      "moduleName": "node-fetch",
      "packageManager": "npm",
      "packageName": "node-fetch",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-01-17T16:25:00Z",
      "references": [
        {
          "title": "Github Commit",
          "url": "https://github.com/node-fetch/node-fetch/commit/1ef4b560a17e644a02a3bfdea7631ffeee578b35"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/node-fetch/node-fetch/commit/36e47e8a6406185921e4985dcbeff140d73eaa10"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/node-fetch/node-fetch/pull/1449/commits/5c32f002fdd65b1c6a8f1e3620210813d45c7e60"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/node-fetch/node-fetch/pull/1449"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Information Exposure",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<2.6.7",
          ">=3.0.0 <3.1.1"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "isomorphic-fetch@2.2.1",
        "node-fetch@1.7.3"
      ],
      "upgradePath": [
        false,
        "isomorphic-fetch@3.0.0",
        "node-fetch@2.6.7"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "node-fetch",
      "version": "1.7.3"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H/E:U/RL:O/RC:R",
      "alternativeIds": [],
      "creationTime": "2020-09-11T10:50:56.354201Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 5.9,
      "description": "## Overview\n[node-fetch](https://www.npmjs.com/package/node-fetch) is a light-weight module that brings window.fetch to node.js\n\nAffected versions of this package are vulnerable to Denial of Service. Node Fetch did not honor the `size` option after following a redirect, which means that when a content size was over the limit, a FetchError would never get thrown and the process would end without failure.\n## Remediation\nUpgrade `node-fetch` to version 2.6.1, 3.0.0-beta.9 or higher.\n## References\n- [GitHub Advisory](https://github.com/node-fetch/node-fetch/security/advisories/GHSA-w7rc-rwvf-8q5r)\n- [GitHub Commit](https://github.com/node-fetch/node-fetch/commit/2358a6c2563d1730a0cdaccc197c611949f6a334)\n",
      "disclosureTime": "2020-09-10T17:55:53Z",
      "exploit": "Unproven",
      "functions": [
        {
          "functionId": {
            "filePath": "lib/index.js",
            "className": null,
            "functionName": "fetch"
          },
          "version": [
            ">1.7.1 <1.7.4",
            ">2.0.0-alpha.7 <2.6.1"
          ]
        }
      ],
      "fixedIn": [
        "2.6.1",
        "3.0.0-beta.9"
      ],
      "id": "SNYK-JS-NODEFETCH-674311",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w7rc-rwvf-8q5r"
        ],
        "CVE": [
          "CVE-2020-15168"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-01-26T16:47:31.069025Z",
      "moduleName": "node-fetch",
      "packageManager": "npm",
      "packageName": "node-fetch",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-09-11T14:12:46Z",
      "references": [
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/node-fetch/node-fetch/security/advisories/GHSA-w7rc-rwvf-8q5r"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/node-fetch/node-fetch/commit/2358a6c2563d1730a0cdaccc197c611949f6a334"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Denial of Service",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [
        {
          "functionId": {
            "filePath": "lib/index.js",
            "functionName": "fetch"
          },
          "version": [
            ">1.7.1 <1.7.4",
            ">2.0.0-alpha.7 <2.6.1"
          ]
        }
      ],
      "semver": {
        "vulnerable": [
          "<2.6.1",
          ">=3.0.0-beta.1 <3.0.0-beta.9"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "isomorphic-fetch@2.2.1",
        "node-fetch@1.7.3"
      ],
      "upgradePath": [
        false,
        "isomorphic-fetch@3.0.0",
        "node-fetch@2.6.1"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "node-fetch",
      "version": "1.7.3"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N",
      "alternativeIds": [],
      "creationTime": "2022-01-17T12:08:00.675849Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 6.5,
      "description": "## Overview\n[node-fetch](https://www.npmjs.com/package/node-fetch) is a light-weight module that brings window.fetch to node.js\n\nAffected versions of this package are vulnerable to Information Exposure when fetching a remote url with Cookie, if it get a `Location` response header, it will follow that url and try to fetch that url with provided cookie. This can lead to forwarding secure headers to 3th party.\n## Remediation\nUpgrade `node-fetch` to version 2.6.7, 3.1.1 or higher.\n## References\n- [Github Commit](https://github.com/node-fetch/node-fetch/commit/1ef4b560a17e644a02a3bfdea7631ffeee578b35)\n- [GitHub Commit](https://github.com/node-fetch/node-fetch/commit/36e47e8a6406185921e4985dcbeff140d73eaa10)\n- [GitHub Commit](https://github.com/node-fetch/node-fetch/pull/1449/commits/5c32f002fdd65b1c6a8f1e3620210813d45c7e60)\n- [GitHub PR](https://github.com/node-fetch/node-fetch/pull/1449)\n",
      "disclosureTime": "2022-01-17T12:00:01Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "2.6.7",
        "3.1.1"
      ],
      "id": "SNYK-JS-NODEFETCH-2342118",
      "identifiers": {
        "CWE": [
          "CWE-200"
        ],
        "CVE": [
          "CVE-2022-0235",
          "CVE-2022-1365"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-18T09:45:11.278222Z",
      "moduleName": "node-fetch",
      "packageManager": "npm",
      "packageName": "node-fetch",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-01-17T16:25:00Z",
      "references": [
        {
          "title": "Github Commit",
          "url": "https://github.com/node-fetch/node-fetch/commit/1ef4b560a17e644a02a3bfdea7631ffeee578b35"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/node-fetch/node-fetch/commit/36e47e8a6406185921e4985dcbeff140d73eaa10"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/node-fetch/node-fetch/pull/1449/commits/5c32f002fdd65b1c6a8f1e3620210813d45c7e60"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/node-fetch/node-fetch/pull/1449"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Information Exposure",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<2.6.7",
          ">=3.0.0 <3.1.1"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "react-tap-event-plugin@2.0.1",
        "fbjs@0.8.17",
        "isomorphic-fetch@2.2.1",
        "node-fetch@1.7.3"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "node-fetch",
      "version": "1.7.3"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H/E:U/RL:O/RC:R",
      "alternativeIds": [],
      "creationTime": "2020-09-11T10:50:56.354201Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 5.9,
      "description": "## Overview\n[node-fetch](https://www.npmjs.com/package/node-fetch) is a light-weight module that brings window.fetch to node.js\n\nAffected versions of this package are vulnerable to Denial of Service. Node Fetch did not honor the `size` option after following a redirect, which means that when a content size was over the limit, a FetchError would never get thrown and the process would end without failure.\n## Remediation\nUpgrade `node-fetch` to version 2.6.1, 3.0.0-beta.9 or higher.\n## References\n- [GitHub Advisory](https://github.com/node-fetch/node-fetch/security/advisories/GHSA-w7rc-rwvf-8q5r)\n- [GitHub Commit](https://github.com/node-fetch/node-fetch/commit/2358a6c2563d1730a0cdaccc197c611949f6a334)\n",
      "disclosureTime": "2020-09-10T17:55:53Z",
      "exploit": "Unproven",
      "functions": [
        {
          "functionId": {
            "filePath": "lib/index.js",
            "className": null,
            "functionName": "fetch"
          },
          "version": [
            ">1.7.1 <1.7.4",
            ">2.0.0-alpha.7 <2.6.1"
          ]
        }
      ],
      "fixedIn": [
        "2.6.1",
        "3.0.0-beta.9"
      ],
      "id": "SNYK-JS-NODEFETCH-674311",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w7rc-rwvf-8q5r"
        ],
        "CVE": [
          "CVE-2020-15168"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-01-26T16:47:31.069025Z",
      "moduleName": "node-fetch",
      "packageManager": "npm",
      "packageName": "node-fetch",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-09-11T14:12:46Z",
      "references": [
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/node-fetch/node-fetch/security/advisories/GHSA-w7rc-rwvf-8q5r"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/node-fetch/node-fetch/commit/2358a6c2563d1730a0cdaccc197c611949f6a334"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Denial of Service",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [
        {
          "functionId": {
            "filePath": "lib/index.js",
            "functionName": "fetch"
          },
          "version": [
            ">1.7.1 <1.7.4",
            ">2.0.0-alpha.7 <2.6.1"
          ]
        }
      ],
      "semver": {
        "vulnerable": [
          "<2.6.1",
          ">=3.0.0-beta.1 <3.0.0-beta.9"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "react-tap-event-plugin@2.0.1",
        "fbjs@0.8.17",
        "isomorphic-fetch@2.2.1",
        "node-fetch@1.7.3"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "node-fetch",
      "version": "1.7.3"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N",
      "alternativeIds": [],
      "creationTime": "2022-01-17T12:08:00.675849Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 6.5,
      "description": "## Overview\n[node-fetch](https://www.npmjs.com/package/node-fetch) is a light-weight module that brings window.fetch to node.js\n\nAffected versions of this package are vulnerable to Information Exposure when fetching a remote url with Cookie, if it get a `Location` response header, it will follow that url and try to fetch that url with provided cookie. This can lead to forwarding secure headers to 3th party.\n## Remediation\nUpgrade `node-fetch` to version 2.6.7, 3.1.1 or higher.\n## References\n- [Github Commit](https://github.com/node-fetch/node-fetch/commit/1ef4b560a17e644a02a3bfdea7631ffeee578b35)\n- [GitHub Commit](https://github.com/node-fetch/node-fetch/commit/36e47e8a6406185921e4985dcbeff140d73eaa10)\n- [GitHub Commit](https://github.com/node-fetch/node-fetch/pull/1449/commits/5c32f002fdd65b1c6a8f1e3620210813d45c7e60)\n- [GitHub PR](https://github.com/node-fetch/node-fetch/pull/1449)\n",
      "disclosureTime": "2022-01-17T12:00:01Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "2.6.7",
        "3.1.1"
      ],
      "id": "SNYK-JS-NODEFETCH-2342118",
      "identifiers": {
        "CWE": [
          "CWE-200"
        ],
        "CVE": [
          "CVE-2022-0235",
          "CVE-2022-1365"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-18T09:45:11.278222Z",
      "moduleName": "node-fetch",
      "packageManager": "npm",
      "packageName": "node-fetch",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-01-17T16:25:00Z",
      "references": [
        {
          "title": "Github Commit",
          "url": "https://github.com/node-fetch/node-fetch/commit/1ef4b560a17e644a02a3bfdea7631ffeee578b35"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/node-fetch/node-fetch/commit/36e47e8a6406185921e4985dcbeff140d73eaa10"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/node-fetch/node-fetch/pull/1449/commits/5c32f002fdd65b1c6a8f1e3620210813d45c7e60"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/node-fetch/node-fetch/pull/1449"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Information Exposure",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<2.6.7",
          ">=3.0.0 <3.1.1"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "react-notification-system@0.2.17",
        "create-react-class@15.6.3",
        "fbjs@0.8.17",
        "isomorphic-fetch@2.2.1",
        "node-fetch@1.7.3"
      ],
      "upgradePath": [
        false,
        "react-notification-system@0.2.17",
        "create-react-class@15.7.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "node-fetch",
      "version": "1.7.3"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H/E:U/RL:O/RC:R",
      "alternativeIds": [],
      "creationTime": "2020-09-11T10:50:56.354201Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 5.9,
      "description": "## Overview\n[node-fetch](https://www.npmjs.com/package/node-fetch) is a light-weight module that brings window.fetch to node.js\n\nAffected versions of this package are vulnerable to Denial of Service. Node Fetch did not honor the `size` option after following a redirect, which means that when a content size was over the limit, a FetchError would never get thrown and the process would end without failure.\n## Remediation\nUpgrade `node-fetch` to version 2.6.1, 3.0.0-beta.9 or higher.\n## References\n- [GitHub Advisory](https://github.com/node-fetch/node-fetch/security/advisories/GHSA-w7rc-rwvf-8q5r)\n- [GitHub Commit](https://github.com/node-fetch/node-fetch/commit/2358a6c2563d1730a0cdaccc197c611949f6a334)\n",
      "disclosureTime": "2020-09-10T17:55:53Z",
      "exploit": "Unproven",
      "functions": [
        {
          "functionId": {
            "filePath": "lib/index.js",
            "className": null,
            "functionName": "fetch"
          },
          "version": [
            ">1.7.1 <1.7.4",
            ">2.0.0-alpha.7 <2.6.1"
          ]
        }
      ],
      "fixedIn": [
        "2.6.1",
        "3.0.0-beta.9"
      ],
      "id": "SNYK-JS-NODEFETCH-674311",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w7rc-rwvf-8q5r"
        ],
        "CVE": [
          "CVE-2020-15168"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-01-26T16:47:31.069025Z",
      "moduleName": "node-fetch",
      "packageManager": "npm",
      "packageName": "node-fetch",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-09-11T14:12:46Z",
      "references": [
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/node-fetch/node-fetch/security/advisories/GHSA-w7rc-rwvf-8q5r"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/node-fetch/node-fetch/commit/2358a6c2563d1730a0cdaccc197c611949f6a334"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Denial of Service",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [
        {
          "functionId": {
            "filePath": "lib/index.js",
            "functionName": "fetch"
          },
          "version": [
            ">1.7.1 <1.7.4",
            ">2.0.0-alpha.7 <2.6.1"
          ]
        }
      ],
      "semver": {
        "vulnerable": [
          "<2.6.1",
          ">=3.0.0-beta.1 <3.0.0-beta.9"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "react-notification-system@0.2.17",
        "create-react-class@15.6.3",
        "fbjs@0.8.17",
        "isomorphic-fetch@2.2.1",
        "node-fetch@1.7.3"
      ],
      "upgradePath": [
        false,
        "react-notification-system@0.2.17",
        "create-react-class@15.7.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "node-fetch",
      "version": "1.7.3"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N",
      "alternativeIds": [],
      "creationTime": "2022-01-17T12:08:00.675849Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 6.5,
      "description": "## Overview\n[node-fetch](https://www.npmjs.com/package/node-fetch) is a light-weight module that brings window.fetch to node.js\n\nAffected versions of this package are vulnerable to Information Exposure when fetching a remote url with Cookie, if it get a `Location` response header, it will follow that url and try to fetch that url with provided cookie. This can lead to forwarding secure headers to 3th party.\n## Remediation\nUpgrade `node-fetch` to version 2.6.7, 3.1.1 or higher.\n## References\n- [Github Commit](https://github.com/node-fetch/node-fetch/commit/1ef4b560a17e644a02a3bfdea7631ffeee578b35)\n- [GitHub Commit](https://github.com/node-fetch/node-fetch/commit/36e47e8a6406185921e4985dcbeff140d73eaa10)\n- [GitHub Commit](https://github.com/node-fetch/node-fetch/pull/1449/commits/5c32f002fdd65b1c6a8f1e3620210813d45c7e60)\n- [GitHub PR](https://github.com/node-fetch/node-fetch/pull/1449)\n",
      "disclosureTime": "2022-01-17T12:00:01Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "2.6.7",
        "3.1.1"
      ],
      "id": "SNYK-JS-NODEFETCH-2342118",
      "identifiers": {
        "CWE": [
          "CWE-200"
        ],
        "CVE": [
          "CVE-2022-0235",
          "CVE-2022-1365"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-18T09:45:11.278222Z",
      "moduleName": "node-fetch",
      "packageManager": "npm",
      "packageName": "node-fetch",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-01-17T16:25:00Z",
      "references": [
        {
          "title": "Github Commit",
          "url": "https://github.com/node-fetch/node-fetch/commit/1ef4b560a17e644a02a3bfdea7631ffeee578b35"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/node-fetch/node-fetch/commit/36e47e8a6406185921e4985dcbeff140d73eaa10"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/node-fetch/node-fetch/pull/1449/commits/5c32f002fdd65b1c6a8f1e3620210813d45c7e60"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/node-fetch/node-fetch/pull/1449"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Information Exposure",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<2.6.7",
          ">=3.0.0 <3.1.1"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger-ui@3.25.0",
        "react@15.6.2",
        "fbjs@0.8.17",
        "isomorphic-fetch@2.2.1",
        "node-fetch@1.7.3"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "node-fetch",
      "version": "1.7.3"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H/E:U/RL:O/RC:R",
      "alternativeIds": [],
      "creationTime": "2020-09-11T10:50:56.354201Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 5.9,
      "description": "## Overview\n[node-fetch](https://www.npmjs.com/package/node-fetch) is a light-weight module that brings window.fetch to node.js\n\nAffected versions of this package are vulnerable to Denial of Service. Node Fetch did not honor the `size` option after following a redirect, which means that when a content size was over the limit, a FetchError would never get thrown and the process would end without failure.\n## Remediation\nUpgrade `node-fetch` to version 2.6.1, 3.0.0-beta.9 or higher.\n## References\n- [GitHub Advisory](https://github.com/node-fetch/node-fetch/security/advisories/GHSA-w7rc-rwvf-8q5r)\n- [GitHub Commit](https://github.com/node-fetch/node-fetch/commit/2358a6c2563d1730a0cdaccc197c611949f6a334)\n",
      "disclosureTime": "2020-09-10T17:55:53Z",
      "exploit": "Unproven",
      "functions": [
        {
          "functionId": {
            "filePath": "lib/index.js",
            "className": null,
            "functionName": "fetch"
          },
          "version": [
            ">1.7.1 <1.7.4",
            ">2.0.0-alpha.7 <2.6.1"
          ]
        }
      ],
      "fixedIn": [
        "2.6.1",
        "3.0.0-beta.9"
      ],
      "id": "SNYK-JS-NODEFETCH-674311",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w7rc-rwvf-8q5r"
        ],
        "CVE": [
          "CVE-2020-15168"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-01-26T16:47:31.069025Z",
      "moduleName": "node-fetch",
      "packageManager": "npm",
      "packageName": "node-fetch",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-09-11T14:12:46Z",
      "references": [
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/node-fetch/node-fetch/security/advisories/GHSA-w7rc-rwvf-8q5r"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/node-fetch/node-fetch/commit/2358a6c2563d1730a0cdaccc197c611949f6a334"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Denial of Service",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [
        {
          "functionId": {
            "filePath": "lib/index.js",
            "functionName": "fetch"
          },
          "version": [
            ">1.7.1 <1.7.4",
            ">2.0.0-alpha.7 <2.6.1"
          ]
        }
      ],
      "semver": {
        "vulnerable": [
          "<2.6.1",
          ">=3.0.0-beta.1 <3.0.0-beta.9"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger-ui@3.25.0",
        "react@15.6.2",
        "fbjs@0.8.17",
        "isomorphic-fetch@2.2.1",
        "node-fetch@1.7.3"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "node-fetch",
      "version": "1.7.3"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N",
      "alternativeIds": [],
      "creationTime": "2022-01-17T12:08:00.675849Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 6.5,
      "description": "## Overview\n[node-fetch](https://www.npmjs.com/package/node-fetch) is a light-weight module that brings window.fetch to node.js\n\nAffected versions of this package are vulnerable to Information Exposure when fetching a remote url with Cookie, if it get a `Location` response header, it will follow that url and try to fetch that url with provided cookie. This can lead to forwarding secure headers to 3th party.\n## Remediation\nUpgrade `node-fetch` to version 2.6.7, 3.1.1 or higher.\n## References\n- [Github Commit](https://github.com/node-fetch/node-fetch/commit/1ef4b560a17e644a02a3bfdea7631ffeee578b35)\n- [GitHub Commit](https://github.com/node-fetch/node-fetch/commit/36e47e8a6406185921e4985dcbeff140d73eaa10)\n- [GitHub Commit](https://github.com/node-fetch/node-fetch/pull/1449/commits/5c32f002fdd65b1c6a8f1e3620210813d45c7e60)\n- [GitHub PR](https://github.com/node-fetch/node-fetch/pull/1449)\n",
      "disclosureTime": "2022-01-17T12:00:01Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "2.6.7",
        "3.1.1"
      ],
      "id": "SNYK-JS-NODEFETCH-2342118",
      "identifiers": {
        "CWE": [
          "CWE-200"
        ],
        "CVE": [
          "CVE-2022-0235",
          "CVE-2022-1365"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-18T09:45:11.278222Z",
      "moduleName": "node-fetch",
      "packageManager": "npm",
      "packageName": "node-fetch",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-01-17T16:25:00Z",
      "references": [
        {
          "title": "Github Commit",
          "url": "https://github.com/node-fetch/node-fetch/commit/1ef4b560a17e644a02a3bfdea7631ffeee578b35"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/node-fetch/node-fetch/commit/36e47e8a6406185921e4985dcbeff140d73eaa10"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/node-fetch/node-fetch/pull/1449/commits/5c32f002fdd65b1c6a8f1e3620210813d45c7e60"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/node-fetch/node-fetch/pull/1449"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Information Exposure",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<2.6.7",
          ">=3.0.0 <3.1.1"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger-ui@3.25.0",
        "react-dom@15.6.2",
        "fbjs@0.8.17",
        "isomorphic-fetch@2.2.1",
        "node-fetch@1.7.3"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "node-fetch",
      "version": "1.7.3"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H/E:U/RL:O/RC:R",
      "alternativeIds": [],
      "creationTime": "2020-09-11T10:50:56.354201Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 5.9,
      "description": "## Overview\n[node-fetch](https://www.npmjs.com/package/node-fetch) is a light-weight module that brings window.fetch to node.js\n\nAffected versions of this package are vulnerable to Denial of Service. Node Fetch did not honor the `size` option after following a redirect, which means that when a content size was over the limit, a FetchError would never get thrown and the process would end without failure.\n## Remediation\nUpgrade `node-fetch` to version 2.6.1, 3.0.0-beta.9 or higher.\n## References\n- [GitHub Advisory](https://github.com/node-fetch/node-fetch/security/advisories/GHSA-w7rc-rwvf-8q5r)\n- [GitHub Commit](https://github.com/node-fetch/node-fetch/commit/2358a6c2563d1730a0cdaccc197c611949f6a334)\n",
      "disclosureTime": "2020-09-10T17:55:53Z",
      "exploit": "Unproven",
      "functions": [
        {
          "functionId": {
            "filePath": "lib/index.js",
            "className": null,
            "functionName": "fetch"
          },
          "version": [
            ">1.7.1 <1.7.4",
            ">2.0.0-alpha.7 <2.6.1"
          ]
        }
      ],
      "fixedIn": [
        "2.6.1",
        "3.0.0-beta.9"
      ],
      "id": "SNYK-JS-NODEFETCH-674311",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w7rc-rwvf-8q5r"
        ],
        "CVE": [
          "CVE-2020-15168"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-01-26T16:47:31.069025Z",
      "moduleName": "node-fetch",
      "packageManager": "npm",
      "packageName": "node-fetch",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-09-11T14:12:46Z",
      "references": [
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/node-fetch/node-fetch/security/advisories/GHSA-w7rc-rwvf-8q5r"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/node-fetch/node-fetch/commit/2358a6c2563d1730a0cdaccc197c611949f6a334"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Denial of Service",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [
        {
          "functionId": {
            "filePath": "lib/index.js",
            "functionName": "fetch"
          },
          "version": [
            ">1.7.1 <1.7.4",
            ">2.0.0-alpha.7 <2.6.1"
          ]
        }
      ],
      "semver": {
        "vulnerable": [
          "<2.6.1",
          ">=3.0.0-beta.1 <3.0.0-beta.9"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger-ui@3.25.0",
        "react-dom@15.6.2",
        "fbjs@0.8.17",
        "isomorphic-fetch@2.2.1",
        "node-fetch@1.7.3"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "node-fetch",
      "version": "1.7.3"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N",
      "alternativeIds": [],
      "creationTime": "2022-01-17T12:08:00.675849Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 6.5,
      "description": "## Overview\n[node-fetch](https://www.npmjs.com/package/node-fetch) is a light-weight module that brings window.fetch to node.js\n\nAffected versions of this package are vulnerable to Information Exposure when fetching a remote url with Cookie, if it get a `Location` response header, it will follow that url and try to fetch that url with provided cookie. This can lead to forwarding secure headers to 3th party.\n## Remediation\nUpgrade `node-fetch` to version 2.6.7, 3.1.1 or higher.\n## References\n- [Github Commit](https://github.com/node-fetch/node-fetch/commit/1ef4b560a17e644a02a3bfdea7631ffeee578b35)\n- [GitHub Commit](https://github.com/node-fetch/node-fetch/commit/36e47e8a6406185921e4985dcbeff140d73eaa10)\n- [GitHub Commit](https://github.com/node-fetch/node-fetch/pull/1449/commits/5c32f002fdd65b1c6a8f1e3620210813d45c7e60)\n- [GitHub PR](https://github.com/node-fetch/node-fetch/pull/1449)\n",
      "disclosureTime": "2022-01-17T12:00:01Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "2.6.7",
        "3.1.1"
      ],
      "id": "SNYK-JS-NODEFETCH-2342118",
      "identifiers": {
        "CWE": [
          "CWE-200"
        ],
        "CVE": [
          "CVE-2022-0235",
          "CVE-2022-1365"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-18T09:45:11.278222Z",
      "moduleName": "node-fetch",
      "packageManager": "npm",
      "packageName": "node-fetch",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-01-17T16:25:00Z",
      "references": [
        {
          "title": "Github Commit",
          "url": "https://github.com/node-fetch/node-fetch/commit/1ef4b560a17e644a02a3bfdea7631ffeee578b35"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/node-fetch/node-fetch/commit/36e47e8a6406185921e4985dcbeff140d73eaa10"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/node-fetch/node-fetch/pull/1449/commits/5c32f002fdd65b1c6a8f1e3620210813d45c7e60"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/node-fetch/node-fetch/pull/1449"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Information Exposure",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<2.6.7",
          ">=3.0.0 <3.1.1"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger-ui@3.25.0",
        "react@15.6.2",
        "create-react-class@15.6.3",
        "fbjs@0.8.17",
        "isomorphic-fetch@2.2.1",
        "node-fetch@1.7.3"
      ],
      "upgradePath": [
        false,
        "swagger-ui@3.25.0",
        "react@15.6.2",
        "create-react-class@15.7.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "node-fetch",
      "version": "1.7.3"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H/E:U/RL:O/RC:R",
      "alternativeIds": [],
      "creationTime": "2020-09-11T10:50:56.354201Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 5.9,
      "description": "## Overview\n[node-fetch](https://www.npmjs.com/package/node-fetch) is a light-weight module that brings window.fetch to node.js\n\nAffected versions of this package are vulnerable to Denial of Service. Node Fetch did not honor the `size` option after following a redirect, which means that when a content size was over the limit, a FetchError would never get thrown and the process would end without failure.\n## Remediation\nUpgrade `node-fetch` to version 2.6.1, 3.0.0-beta.9 or higher.\n## References\n- [GitHub Advisory](https://github.com/node-fetch/node-fetch/security/advisories/GHSA-w7rc-rwvf-8q5r)\n- [GitHub Commit](https://github.com/node-fetch/node-fetch/commit/2358a6c2563d1730a0cdaccc197c611949f6a334)\n",
      "disclosureTime": "2020-09-10T17:55:53Z",
      "exploit": "Unproven",
      "functions": [
        {
          "functionId": {
            "filePath": "lib/index.js",
            "className": null,
            "functionName": "fetch"
          },
          "version": [
            ">1.7.1 <1.7.4",
            ">2.0.0-alpha.7 <2.6.1"
          ]
        }
      ],
      "fixedIn": [
        "2.6.1",
        "3.0.0-beta.9"
      ],
      "id": "SNYK-JS-NODEFETCH-674311",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w7rc-rwvf-8q5r"
        ],
        "CVE": [
          "CVE-2020-15168"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-01-26T16:47:31.069025Z",
      "moduleName": "node-fetch",
      "packageManager": "npm",
      "packageName": "node-fetch",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-09-11T14:12:46Z",
      "references": [
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/node-fetch/node-fetch/security/advisories/GHSA-w7rc-rwvf-8q5r"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/node-fetch/node-fetch/commit/2358a6c2563d1730a0cdaccc197c611949f6a334"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Denial of Service",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [
        {
          "functionId": {
            "filePath": "lib/index.js",
            "functionName": "fetch"
          },
          "version": [
            ">1.7.1 <1.7.4",
            ">2.0.0-alpha.7 <2.6.1"
          ]
        }
      ],
      "semver": {
        "vulnerable": [
          "<2.6.1",
          ">=3.0.0-beta.1 <3.0.0-beta.9"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger-ui@3.25.0",
        "react@15.6.2",
        "create-react-class@15.6.3",
        "fbjs@0.8.17",
        "isomorphic-fetch@2.2.1",
        "node-fetch@1.7.3"
      ],
      "upgradePath": [
        false,
        "swagger-ui@3.25.0",
        "react@15.6.2",
        "create-react-class@15.7.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "node-fetch",
      "version": "1.7.3"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N",
      "alternativeIds": [],
      "creationTime": "2022-01-17T12:08:00.675849Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 6.5,
      "description": "## Overview\n[node-fetch](https://www.npmjs.com/package/node-fetch) is a light-weight module that brings window.fetch to node.js\n\nAffected versions of this package are vulnerable to Information Exposure when fetching a remote url with Cookie, if it get a `Location` response header, it will follow that url and try to fetch that url with provided cookie. This can lead to forwarding secure headers to 3th party.\n## Remediation\nUpgrade `node-fetch` to version 2.6.7, 3.1.1 or higher.\n## References\n- [Github Commit](https://github.com/node-fetch/node-fetch/commit/1ef4b560a17e644a02a3bfdea7631ffeee578b35)\n- [GitHub Commit](https://github.com/node-fetch/node-fetch/commit/36e47e8a6406185921e4985dcbeff140d73eaa10)\n- [GitHub Commit](https://github.com/node-fetch/node-fetch/pull/1449/commits/5c32f002fdd65b1c6a8f1e3620210813d45c7e60)\n- [GitHub PR](https://github.com/node-fetch/node-fetch/pull/1449)\n",
      "disclosureTime": "2022-01-17T12:00:01Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "2.6.7",
        "3.1.1"
      ],
      "id": "SNYK-JS-NODEFETCH-2342118",
      "identifiers": {
        "CWE": [
          "CWE-200"
        ],
        "CVE": [
          "CVE-2022-0235",
          "CVE-2022-1365"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-18T09:45:11.278222Z",
      "moduleName": "node-fetch",
      "packageManager": "npm",
      "packageName": "node-fetch",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-01-17T16:25:00Z",
      "references": [
        {
          "title": "Github Commit",
          "url": "https://github.com/node-fetch/node-fetch/commit/1ef4b560a17e644a02a3bfdea7631ffeee578b35"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/node-fetch/node-fetch/commit/36e47e8a6406185921e4985dcbeff140d73eaa10"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/node-fetch/node-fetch/pull/1449/commits/5c32f002fdd65b1c6a8f1e3620210813d45c7e60"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/node-fetch/node-fetch/pull/1449"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Information Exposure",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<2.6.7",
          ">=3.0.0 <3.1.1"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger-ui@3.25.0",
        "react-redux@4.4.10",
        "create-react-class@15.6.3",
        "fbjs@0.8.17",
        "isomorphic-fetch@2.2.1",
        "node-fetch@1.7.3"
      ],
      "upgradePath": [
        false,
        "swagger-ui@3.25.0",
        "react-redux@4.4.10",
        "create-react-class@15.7.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "node-fetch",
      "version": "1.7.3"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H/E:U/RL:O/RC:R",
      "alternativeIds": [],
      "creationTime": "2020-09-11T10:50:56.354201Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 5.9,
      "description": "## Overview\n[node-fetch](https://www.npmjs.com/package/node-fetch) is a light-weight module that brings window.fetch to node.js\n\nAffected versions of this package are vulnerable to Denial of Service. Node Fetch did not honor the `size` option after following a redirect, which means that when a content size was over the limit, a FetchError would never get thrown and the process would end without failure.\n## Remediation\nUpgrade `node-fetch` to version 2.6.1, 3.0.0-beta.9 or higher.\n## References\n- [GitHub Advisory](https://github.com/node-fetch/node-fetch/security/advisories/GHSA-w7rc-rwvf-8q5r)\n- [GitHub Commit](https://github.com/node-fetch/node-fetch/commit/2358a6c2563d1730a0cdaccc197c611949f6a334)\n",
      "disclosureTime": "2020-09-10T17:55:53Z",
      "exploit": "Unproven",
      "functions": [
        {
          "functionId": {
            "filePath": "lib/index.js",
            "className": null,
            "functionName": "fetch"
          },
          "version": [
            ">1.7.1 <1.7.4",
            ">2.0.0-alpha.7 <2.6.1"
          ]
        }
      ],
      "fixedIn": [
        "2.6.1",
        "3.0.0-beta.9"
      ],
      "id": "SNYK-JS-NODEFETCH-674311",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w7rc-rwvf-8q5r"
        ],
        "CVE": [
          "CVE-2020-15168"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-01-26T16:47:31.069025Z",
      "moduleName": "node-fetch",
      "packageManager": "npm",
      "packageName": "node-fetch",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-09-11T14:12:46Z",
      "references": [
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/node-fetch/node-fetch/security/advisories/GHSA-w7rc-rwvf-8q5r"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/node-fetch/node-fetch/commit/2358a6c2563d1730a0cdaccc197c611949f6a334"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Denial of Service",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [
        {
          "functionId": {
            "filePath": "lib/index.js",
            "functionName": "fetch"
          },
          "version": [
            ">1.7.1 <1.7.4",
            ">2.0.0-alpha.7 <2.6.1"
          ]
        }
      ],
      "semver": {
        "vulnerable": [
          "<2.6.1",
          ">=3.0.0-beta.1 <3.0.0-beta.9"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger-ui@3.25.0",
        "react-redux@4.4.10",
        "create-react-class@15.6.3",
        "fbjs@0.8.17",
        "isomorphic-fetch@2.2.1",
        "node-fetch@1.7.3"
      ],
      "upgradePath": [
        false,
        "swagger-ui@3.25.0",
        "react-redux@4.4.10",
        "create-react-class@15.7.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "node-fetch",
      "version": "1.7.3"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N",
      "alternativeIds": [],
      "creationTime": "2022-01-17T12:08:00.675849Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 6.5,
      "description": "## Overview\n[node-fetch](https://www.npmjs.com/package/node-fetch) is a light-weight module that brings window.fetch to node.js\n\nAffected versions of this package are vulnerable to Information Exposure when fetching a remote url with Cookie, if it get a `Location` response header, it will follow that url and try to fetch that url with provided cookie. This can lead to forwarding secure headers to 3th party.\n## Remediation\nUpgrade `node-fetch` to version 2.6.7, 3.1.1 or higher.\n## References\n- [Github Commit](https://github.com/node-fetch/node-fetch/commit/1ef4b560a17e644a02a3bfdea7631ffeee578b35)\n- [GitHub Commit](https://github.com/node-fetch/node-fetch/commit/36e47e8a6406185921e4985dcbeff140d73eaa10)\n- [GitHub Commit](https://github.com/node-fetch/node-fetch/pull/1449/commits/5c32f002fdd65b1c6a8f1e3620210813d45c7e60)\n- [GitHub PR](https://github.com/node-fetch/node-fetch/pull/1449)\n",
      "disclosureTime": "2022-01-17T12:00:01Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "2.6.7",
        "3.1.1"
      ],
      "id": "SNYK-JS-NODEFETCH-2342118",
      "identifiers": {
        "CWE": [
          "CWE-200"
        ],
        "CVE": [
          "CVE-2022-0235",
          "CVE-2022-1365"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-18T09:45:11.278222Z",
      "moduleName": "node-fetch",
      "packageManager": "npm",
      "packageName": "node-fetch",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-01-17T16:25:00Z",
      "references": [
        {
          "title": "Github Commit",
          "url": "https://github.com/node-fetch/node-fetch/commit/1ef4b560a17e644a02a3bfdea7631ffeee578b35"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/node-fetch/node-fetch/commit/36e47e8a6406185921e4985dcbeff140d73eaa10"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/node-fetch/node-fetch/pull/1449/commits/5c32f002fdd65b1c6a8f1e3620210813d45c7e60"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/node-fetch/node-fetch/pull/1449"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Information Exposure",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<2.6.7",
          ">=3.0.0 <3.1.1"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger-ui-react@3.25.0",
        "react-redux@4.4.10",
        "create-react-class@15.6.3",
        "fbjs@0.8.17",
        "isomorphic-fetch@2.2.1",
        "node-fetch@1.7.3"
      ],
      "upgradePath": [
        false,
        "swagger-ui-react@3.25.0",
        "react-redux@4.4.10",
        "create-react-class@15.7.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "node-fetch",
      "version": "1.7.3"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H/E:U/RL:O/RC:R",
      "alternativeIds": [],
      "creationTime": "2020-09-11T10:50:56.354201Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 5.9,
      "description": "## Overview\n[node-fetch](https://www.npmjs.com/package/node-fetch) is a light-weight module that brings window.fetch to node.js\n\nAffected versions of this package are vulnerable to Denial of Service. Node Fetch did not honor the `size` option after following a redirect, which means that when a content size was over the limit, a FetchError would never get thrown and the process would end without failure.\n## Remediation\nUpgrade `node-fetch` to version 2.6.1, 3.0.0-beta.9 or higher.\n## References\n- [GitHub Advisory](https://github.com/node-fetch/node-fetch/security/advisories/GHSA-w7rc-rwvf-8q5r)\n- [GitHub Commit](https://github.com/node-fetch/node-fetch/commit/2358a6c2563d1730a0cdaccc197c611949f6a334)\n",
      "disclosureTime": "2020-09-10T17:55:53Z",
      "exploit": "Unproven",
      "functions": [
        {
          "functionId": {
            "filePath": "lib/index.js",
            "className": null,
            "functionName": "fetch"
          },
          "version": [
            ">1.7.1 <1.7.4",
            ">2.0.0-alpha.7 <2.6.1"
          ]
        }
      ],
      "fixedIn": [
        "2.6.1",
        "3.0.0-beta.9"
      ],
      "id": "SNYK-JS-NODEFETCH-674311",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w7rc-rwvf-8q5r"
        ],
        "CVE": [
          "CVE-2020-15168"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-01-26T16:47:31.069025Z",
      "moduleName": "node-fetch",
      "packageManager": "npm",
      "packageName": "node-fetch",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-09-11T14:12:46Z",
      "references": [
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/node-fetch/node-fetch/security/advisories/GHSA-w7rc-rwvf-8q5r"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/node-fetch/node-fetch/commit/2358a6c2563d1730a0cdaccc197c611949f6a334"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Denial of Service",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [
        {
          "functionId": {
            "filePath": "lib/index.js",
            "functionName": "fetch"
          },
          "version": [
            ">1.7.1 <1.7.4",
            ">2.0.0-alpha.7 <2.6.1"
          ]
        }
      ],
      "semver": {
        "vulnerable": [
          "<2.6.1",
          ">=3.0.0-beta.1 <3.0.0-beta.9"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger-ui-react@3.25.0",
        "react-redux@4.4.10",
        "create-react-class@15.6.3",
        "fbjs@0.8.17",
        "isomorphic-fetch@2.2.1",
        "node-fetch@1.7.3"
      ],
      "upgradePath": [
        false,
        "swagger-ui-react@3.25.0",
        "react-redux@4.4.10",
        "create-react-class@15.7.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "node-fetch",
      "version": "1.7.3"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "alternativeIds": [],
      "creationTime": "2021-09-17T14:35:00.993728Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) when parsing crafted invalid CSS nth-checks, due to the sub-pattern `\\s*(?:([+-]?)\\s*(\\d+))?` in `RE_NTH_ELEMENT` with quantified overlapping adjacency.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `nth-check` to version 2.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/fb55/nth-check/commit/9894c1d2010870c351f66c6f6efcf656e26bb726)\n",
      "disclosureTime": "2021-09-17T14:32:39Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "2.0.1"
      ],
      "id": "SNYK-JS-NTHCHECK-1586032",
      "identifiers": {
        "CWE": [
          "CWE-1333"
        ],
        "CVE": [
          "CVE-2021-3803"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-13T10:42:22.281450Z",
      "moduleName": "nth-check",
      "packageManager": "npm",
      "packageName": "nth-check",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-09-17T15:20:51Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/fb55/nth-check/commit/9894c1d2010870c351f66c6f6efcf656e26bb726"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<2.0.1"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "react-safe-html@0.6.1",
        "cheerio@0.22.0",
        "css-select@1.2.0",
        "nth-check@1.0.2"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "nth-check",
      "version": "1.0.2"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-05T10:34:06.518802Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) during source map parsing.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}/*# sourceMappingURL=\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \" \"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 7.0.36, 8.2.10 or higher.\n## References\n- [Fix Commit #1](https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5)\n- [Fix Commit #2](https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4)\n- [GitHub Advisory](https://github.com/advisories/GHSA-hwj9-h5mp-3pm3)\n",
      "disclosureTime": "2021-04-05T10:32:44Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "7.0.36",
        "8.2.10"
      ],
      "id": "SNYK-JS-POSTCSS-1090595",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-hwj9-h5mp-3pm3"
        ],
        "CVE": [
          "CVE-2021-23368"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.030348Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-12T13:07:14Z",
      "references": [
        {
          "title": "Fix Commit #1",
          "url": "https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5"
        },
        {
          "title": "Fix Commit #2",
          "url": "https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4"
        },
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/advisories/GHSA-hwj9-h5mp-3pm3"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=7.0.0 <7.0.36",
          ">=8.0.0 <8.2.10"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "graphql-to-postman@0.0.6",
        "postman-collection@3.5.5",
        "sanitize-html@1.20.1",
        "postcss@7.0.26"
      ],
      "upgradePath": [
        false,
        "graphql-to-postman@0.0.6",
        "postman-collection@3.5.5",
        "sanitize-html@1.20.1",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.26"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-26T15:22:41.908415Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `getAnnotationURL()` and `loadAnnotation()` in `lib/previous-map.js`. The vulnerable regexes are caused mainly by the sub-pattern `\\/\\*\\s*# sourceMappingURL=(.*)`.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/*# sourceMappingURL=\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 8.2.13, 7.0.36 or higher.\n## References\n- [GitHub Commit](https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956)\n",
      "disclosureTime": "2021-04-26T15:09:50Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "8.2.13",
        "7.0.36"
      ],
      "id": "SNYK-JS-POSTCSS-1255640",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-23382"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.050563Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-26T16:18:39Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=8.0.0 <8.2.13",
          "<7.0.36"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "graphql-to-postman@0.0.6",
        "postman-collection@3.5.5",
        "sanitize-html@1.20.1",
        "postcss@7.0.26"
      ],
      "upgradePath": [
        false,
        "graphql-to-postman@0.0.6",
        "postman-collection@3.5.5",
        "sanitize-html@1.20.1",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.26"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-05T10:34:06.518802Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) during source map parsing.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}/*# sourceMappingURL=\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \" \"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 7.0.36, 8.2.10 or higher.\n## References\n- [Fix Commit #1](https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5)\n- [Fix Commit #2](https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4)\n- [GitHub Advisory](https://github.com/advisories/GHSA-hwj9-h5mp-3pm3)\n",
      "disclosureTime": "2021-04-05T10:32:44Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "7.0.36",
        "8.2.10"
      ],
      "id": "SNYK-JS-POSTCSS-1090595",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-hwj9-h5mp-3pm3"
        ],
        "CVE": [
          "CVE-2021-23368"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.030348Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-12T13:07:14Z",
      "references": [
        {
          "title": "Fix Commit #1",
          "url": "https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5"
        },
        {
          "title": "Fix Commit #2",
          "url": "https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4"
        },
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/advisories/GHSA-hwj9-h5mp-3pm3"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=7.0.0 <7.0.36",
          ">=8.0.0 <8.2.10"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "openapi-to-postmanv2@1.2.7",
        "postman-collection@3.6.6",
        "sanitize-html@1.20.1",
        "postcss@7.0.26"
      ],
      "upgradePath": [
        false,
        "openapi-to-postmanv2@1.2.7",
        "postman-collection@3.6.6",
        "sanitize-html@1.20.1",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.26"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-26T15:22:41.908415Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `getAnnotationURL()` and `loadAnnotation()` in `lib/previous-map.js`. The vulnerable regexes are caused mainly by the sub-pattern `\\/\\*\\s*# sourceMappingURL=(.*)`.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/*# sourceMappingURL=\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 8.2.13, 7.0.36 or higher.\n## References\n- [GitHub Commit](https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956)\n",
      "disclosureTime": "2021-04-26T15:09:50Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "8.2.13",
        "7.0.36"
      ],
      "id": "SNYK-JS-POSTCSS-1255640",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-23382"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.050563Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-26T16:18:39Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=8.0.0 <8.2.13",
          "<7.0.36"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "openapi-to-postmanv2@1.2.7",
        "postman-collection@3.6.6",
        "sanitize-html@1.20.1",
        "postcss@7.0.26"
      ],
      "upgradePath": [
        false,
        "openapi-to-postmanv2@1.2.7",
        "postman-collection@3.6.6",
        "sanitize-html@1.20.1",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.26"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-05T10:34:06.518802Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) during source map parsing.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}/*# sourceMappingURL=\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \" \"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 7.0.36, 8.2.10 or higher.\n## References\n- [Fix Commit #1](https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5)\n- [Fix Commit #2](https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4)\n- [GitHub Advisory](https://github.com/advisories/GHSA-hwj9-h5mp-3pm3)\n",
      "disclosureTime": "2021-04-05T10:32:44Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "7.0.36",
        "8.2.10"
      ],
      "id": "SNYK-JS-POSTCSS-1090595",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-hwj9-h5mp-3pm3"
        ],
        "CVE": [
          "CVE-2021-23368"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.030348Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-12T13:07:14Z",
      "references": [
        {
          "title": "Fix Commit #1",
          "url": "https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5"
        },
        {
          "title": "Fix Commit #2",
          "url": "https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4"
        },
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/advisories/GHSA-hwj9-h5mp-3pm3"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=7.0.0 <7.0.36",
          ">=8.0.0 <8.2.10"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger2-postman2-converter@0.0.3",
        "postman-collection@3.6.6",
        "sanitize-html@1.20.1",
        "postcss@7.0.26"
      ],
      "upgradePath": [
        false,
        "swagger2-postman2-converter@0.0.3",
        "postman-collection@3.6.6",
        "sanitize-html@1.20.1",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.26"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-26T15:22:41.908415Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `getAnnotationURL()` and `loadAnnotation()` in `lib/previous-map.js`. The vulnerable regexes are caused mainly by the sub-pattern `\\/\\*\\s*# sourceMappingURL=(.*)`.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/*# sourceMappingURL=\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 8.2.13, 7.0.36 or higher.\n## References\n- [GitHub Commit](https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956)\n",
      "disclosureTime": "2021-04-26T15:09:50Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "8.2.13",
        "7.0.36"
      ],
      "id": "SNYK-JS-POSTCSS-1255640",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-23382"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.050563Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-26T16:18:39Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=8.0.0 <8.2.13",
          "<7.0.36"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger2-postman2-converter@0.0.3",
        "postman-collection@3.6.6",
        "sanitize-html@1.20.1",
        "postcss@7.0.26"
      ],
      "upgradePath": [
        false,
        "swagger2-postman2-converter@0.0.3",
        "postman-collection@3.6.6",
        "sanitize-html@1.20.1",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.26"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:U/RL:O/RC:R",
      "alternativeIds": [],
      "creationTime": "2021-09-03T13:28:34.208880Z",
      "credit": [
        "ready-research"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in `source/trim.js` within variable `ws`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `ramda` to version 0.27.2 or higher.\n## References\n- [Github Commit](https://github.com/ramda/ramda/pull/3212/commits/94d057032c9b3ecf26d9842fbb12c981bda29f4b)\n- [GitHub Commit](https://github.com/ramda/ramda/commit/37af6ae2ca8b94656996dd27fb0a1f208d69134e)\n- [GitHub PR](https://github.com/ramda/ramda/pull/3177)\n",
      "disclosureTime": "2021-09-03T13:26:28Z",
      "exploit": "Unproven",
      "functions": [],
      "fixedIn": [
        "0.27.2"
      ],
      "id": "SNYK-JS-RAMDA-1582370",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": []
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-01-19T14:54:18.169246Z",
      "moduleName": "ramda",
      "packageManager": "npm",
      "packageName": "ramda",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-10-28T15:08:22Z",
      "references": [
        {
          "title": "Github Commit",
          "url": "https://github.com/ramda/ramda/pull/3212/commits/94d057032c9b3ecf26d9842fbb12c981bda29f4b"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/ramda/ramda/commit/37af6ae2ca8b94656996dd27fb0a1f208d69134e"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/ramda/ramda/pull/3177"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<0.27.2"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "react-markdown@5.0.3",
        "html-to-react@1.4.5",
        "ramda@0.27.1"
      ],
      "upgradePath": [
        false,
        "react-markdown@5.0.3",
        "html-to-react@1.4.5",
        "ramda@0.27.2"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "ramda",
      "version": "0.27.1"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N/E:P",
      "alternativeIds": [],
      "creationTime": "2021-02-09T08:21:52.232749Z",
      "credit": [
        "Ron Masas",
        "Checkmarx"
      ],
      "cvssScore": 6.5,
      "description": "## Overview\n[sanitize-html](https://github.com/punkave/sanitize-html) is a library that allows you to clean up user-submitted HTML, preserving whitelisted elements and whitelisted attributes on a per-element basis\n\nAffected versions of this package are vulnerable to Validation Bypass. There is no proper validation of the hostnames set by the `allowedIframeHostnames` option when the `allowIframeRelativeUrls` is set to `true`. This allows attackers to bypass the hostname whitelist for the iframe element.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `sanitize-html` to version 2.3.2 or higher.\n## References\n- [GitHub Commit](https://github.com/apostrophecms/sanitize-html/commit/6012524e7824a2c8f6782b2bc5f93b1261723403)\n- [GitHub PR](https://github.com/apostrophecms/sanitize-html/pull/460)\n- [POC: Potential Exploit](https://advisory.checkmarx.net/advisory/CX-2021-4309)\n",
      "disclosureTime": "2021-02-09T08:07:33Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "2.3.2"
      ],
      "id": "SNYK-JS-SANITIZEHTML-1070780",
      "identifiers": {
        "CWE": [
          "CWE-20"
        ],
        "GHSA": [
          "GHSA-mjxr-4v3x-q3m4"
        ],
        "CVE": [
          "CVE-2021-26540"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-09-24T13:25:49.434343Z",
      "moduleName": "sanitize-html",
      "packageManager": "npm",
      "packageName": "sanitize-html",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-02-09T16:34:45.881363Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/apostrophecms/sanitize-html/commit/6012524e7824a2c8f6782b2bc5f93b1261723403"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/apostrophecms/sanitize-html/pull/460"
        },
        {
          "title": "POC: Potential Exploit",
          "url": "https://advisory.checkmarx.net/advisory/CX-2021-4309"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Validation Bypass",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<2.3.2"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "graphql-to-postman@0.0.6",
        "postman-collection@3.5.5",
        "sanitize-html@1.20.1"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "sanitize-html",
      "version": "1.20.1"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N",
      "alternativeIds": [],
      "creationTime": "2021-02-09T08:37:16.368073Z",
      "credit": [
        "Ron Masas",
        "Checkmarx"
      ],
      "cvssScore": 6.5,
      "description": "## Overview\n[sanitize-html](https://github.com/punkave/sanitize-html) is a library that allows you to clean up user-submitted HTML, preserving whitelisted elements and whitelisted attributes on a per-element basis\n\nAffected versions of this package are vulnerable to Access Restriction Bypass. Internationalized domain name (IDN) is not properly handled. This allows attackers to bypass hostname whitelist validation set by the `allowedIframeHostnames` option.\n## Remediation\nUpgrade `sanitize-html` to version 2.3.1 or higher.\n## References\n- [GitHub PR](https://github.com/apostrophecms/sanitize-html/pull/458)\n",
      "disclosureTime": "2021-02-09T08:21:55Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "2.3.1"
      ],
      "id": "SNYK-JS-SANITIZEHTML-1070786",
      "identifiers": {
        "CWE": [
          "CWE-20"
        ],
        "GHSA": [
          "GHSA-rjqq-98f6-6j3r"
        ],
        "CVE": [
          "CVE-2021-26539"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-10-13T13:44:46.998835Z",
      "moduleName": "sanitize-html",
      "packageManager": "npm",
      "packageName": "sanitize-html",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-02-09T16:34:49Z",
      "references": [
        {
          "title": "GitHub PR",
          "url": "https://github.com/apostrophecms/sanitize-html/pull/458"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Access Restriction Bypass",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<2.3.1"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "graphql-to-postman@0.0.6",
        "postman-collection@3.5.5",
        "sanitize-html@1.20.1"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "sanitize-html",
      "version": "1.20.1"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L",
      "alternativeIds": [],
      "creationTime": "2020-07-17T15:02:43.082824Z",
      "credit": [
        "mikesamuel"
      ],
      "cvssScore": 9.4,
      "description": "## Overview\n[sanitize-html](https://github.com/punkave/sanitize-html) is a library that allows you to clean up user-submitted HTML, preserving whitelisted elements and whitelisted attributes on a per-element basis\n\nAffected versions of this package are vulnerable to Arbitrary Code Execution. Tag transformations which turn an attribute value into a text node using `transformTags` could be vulnerable to code execution.\n## Remediation\nUpgrade `sanitize-html` to version 2.0.0-beta or higher.\n## References\n- [GitHub PR](https://github.com/apostrophecms/sanitize-html/pull/156)\n",
      "disclosureTime": "2020-09-07T09:46:18Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "2.0.0-beta"
      ],
      "id": "SNYK-JS-SANITIZEHTML-585892",
      "identifiers": {
        "CWE": [
          "CWE-94"
        ],
        "CVE": []
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-09-07T15:37:06.961614Z",
      "moduleName": "sanitize-html",
      "packageManager": "npm",
      "packageName": "sanitize-html",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-09-07T09:46:10Z",
      "references": [
        {
          "title": "GitHub PR",
          "url": "https://github.com/apostrophecms/sanitize-html/pull/156"
        }
      ],
      "severity": "critical",
      "socialTrendAlert": false,
      "title": "Arbitrary Code Execution",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<2.0.0-beta"
        ]
      },
      "severityWithCritical": "critical",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "graphql-to-postman@0.0.6",
        "postman-collection@3.5.5",
        "sanitize-html@1.20.1"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "sanitize-html",
      "version": "1.20.1"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N/E:P",
      "alternativeIds": [],
      "creationTime": "2021-02-09T08:21:52.232749Z",
      "credit": [
        "Ron Masas",
        "Checkmarx"
      ],
      "cvssScore": 6.5,
      "description": "## Overview\n[sanitize-html](https://github.com/punkave/sanitize-html) is a library that allows you to clean up user-submitted HTML, preserving whitelisted elements and whitelisted attributes on a per-element basis\n\nAffected versions of this package are vulnerable to Validation Bypass. There is no proper validation of the hostnames set by the `allowedIframeHostnames` option when the `allowIframeRelativeUrls` is set to `true`. This allows attackers to bypass the hostname whitelist for the iframe element.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `sanitize-html` to version 2.3.2 or higher.\n## References\n- [GitHub Commit](https://github.com/apostrophecms/sanitize-html/commit/6012524e7824a2c8f6782b2bc5f93b1261723403)\n- [GitHub PR](https://github.com/apostrophecms/sanitize-html/pull/460)\n- [POC: Potential Exploit](https://advisory.checkmarx.net/advisory/CX-2021-4309)\n",
      "disclosureTime": "2021-02-09T08:07:33Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "2.3.2"
      ],
      "id": "SNYK-JS-SANITIZEHTML-1070780",
      "identifiers": {
        "CWE": [
          "CWE-20"
        ],
        "GHSA": [
          "GHSA-mjxr-4v3x-q3m4"
        ],
        "CVE": [
          "CVE-2021-26540"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-09-24T13:25:49.434343Z",
      "moduleName": "sanitize-html",
      "packageManager": "npm",
      "packageName": "sanitize-html",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-02-09T16:34:45.881363Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/apostrophecms/sanitize-html/commit/6012524e7824a2c8f6782b2bc5f93b1261723403"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/apostrophecms/sanitize-html/pull/460"
        },
        {
          "title": "POC: Potential Exploit",
          "url": "https://advisory.checkmarx.net/advisory/CX-2021-4309"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Validation Bypass",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<2.3.2"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "openapi-to-postmanv2@1.2.7",
        "postman-collection@3.6.6",
        "sanitize-html@1.20.1"
      ],
      "upgradePath": [
        false,
        "openapi-to-postmanv2@2.10.0",
        "postman-collection@4.0.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "sanitize-html",
      "version": "1.20.1"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N",
      "alternativeIds": [],
      "creationTime": "2021-02-09T08:37:16.368073Z",
      "credit": [
        "Ron Masas",
        "Checkmarx"
      ],
      "cvssScore": 6.5,
      "description": "## Overview\n[sanitize-html](https://github.com/punkave/sanitize-html) is a library that allows you to clean up user-submitted HTML, preserving whitelisted elements and whitelisted attributes on a per-element basis\n\nAffected versions of this package are vulnerable to Access Restriction Bypass. Internationalized domain name (IDN) is not properly handled. This allows attackers to bypass hostname whitelist validation set by the `allowedIframeHostnames` option.\n## Remediation\nUpgrade `sanitize-html` to version 2.3.1 or higher.\n## References\n- [GitHub PR](https://github.com/apostrophecms/sanitize-html/pull/458)\n",
      "disclosureTime": "2021-02-09T08:21:55Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "2.3.1"
      ],
      "id": "SNYK-JS-SANITIZEHTML-1070786",
      "identifiers": {
        "CWE": [
          "CWE-20"
        ],
        "GHSA": [
          "GHSA-rjqq-98f6-6j3r"
        ],
        "CVE": [
          "CVE-2021-26539"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-10-13T13:44:46.998835Z",
      "moduleName": "sanitize-html",
      "packageManager": "npm",
      "packageName": "sanitize-html",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-02-09T16:34:49Z",
      "references": [
        {
          "title": "GitHub PR",
          "url": "https://github.com/apostrophecms/sanitize-html/pull/458"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Access Restriction Bypass",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<2.3.1"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "openapi-to-postmanv2@1.2.7",
        "postman-collection@3.6.6",
        "sanitize-html@1.20.1"
      ],
      "upgradePath": [
        false,
        "openapi-to-postmanv2@2.10.0",
        "postman-collection@4.0.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "sanitize-html",
      "version": "1.20.1"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L",
      "alternativeIds": [],
      "creationTime": "2020-07-17T15:02:43.082824Z",
      "credit": [
        "mikesamuel"
      ],
      "cvssScore": 9.4,
      "description": "## Overview\n[sanitize-html](https://github.com/punkave/sanitize-html) is a library that allows you to clean up user-submitted HTML, preserving whitelisted elements and whitelisted attributes on a per-element basis\n\nAffected versions of this package are vulnerable to Arbitrary Code Execution. Tag transformations which turn an attribute value into a text node using `transformTags` could be vulnerable to code execution.\n## Remediation\nUpgrade `sanitize-html` to version 2.0.0-beta or higher.\n## References\n- [GitHub PR](https://github.com/apostrophecms/sanitize-html/pull/156)\n",
      "disclosureTime": "2020-09-07T09:46:18Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "2.0.0-beta"
      ],
      "id": "SNYK-JS-SANITIZEHTML-585892",
      "identifiers": {
        "CWE": [
          "CWE-94"
        ],
        "CVE": []
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-09-07T15:37:06.961614Z",
      "moduleName": "sanitize-html",
      "packageManager": "npm",
      "packageName": "sanitize-html",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-09-07T09:46:10Z",
      "references": [
        {
          "title": "GitHub PR",
          "url": "https://github.com/apostrophecms/sanitize-html/pull/156"
        }
      ],
      "severity": "critical",
      "socialTrendAlert": false,
      "title": "Arbitrary Code Execution",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<2.0.0-beta"
        ]
      },
      "severityWithCritical": "critical",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "openapi-to-postmanv2@1.2.7",
        "postman-collection@3.6.6",
        "sanitize-html@1.20.1"
      ],
      "upgradePath": [
        false,
        "openapi-to-postmanv2@2.10.0",
        "postman-collection@4.0.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "sanitize-html",
      "version": "1.20.1"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N/E:P",
      "alternativeIds": [],
      "creationTime": "2021-02-09T08:21:52.232749Z",
      "credit": [
        "Ron Masas",
        "Checkmarx"
      ],
      "cvssScore": 6.5,
      "description": "## Overview\n[sanitize-html](https://github.com/punkave/sanitize-html) is a library that allows you to clean up user-submitted HTML, preserving whitelisted elements and whitelisted attributes on a per-element basis\n\nAffected versions of this package are vulnerable to Validation Bypass. There is no proper validation of the hostnames set by the `allowedIframeHostnames` option when the `allowIframeRelativeUrls` is set to `true`. This allows attackers to bypass the hostname whitelist for the iframe element.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `sanitize-html` to version 2.3.2 or higher.\n## References\n- [GitHub Commit](https://github.com/apostrophecms/sanitize-html/commit/6012524e7824a2c8f6782b2bc5f93b1261723403)\n- [GitHub PR](https://github.com/apostrophecms/sanitize-html/pull/460)\n- [POC: Potential Exploit](https://advisory.checkmarx.net/advisory/CX-2021-4309)\n",
      "disclosureTime": "2021-02-09T08:07:33Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "2.3.2"
      ],
      "id": "SNYK-JS-SANITIZEHTML-1070780",
      "identifiers": {
        "CWE": [
          "CWE-20"
        ],
        "GHSA": [
          "GHSA-mjxr-4v3x-q3m4"
        ],
        "CVE": [
          "CVE-2021-26540"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-09-24T13:25:49.434343Z",
      "moduleName": "sanitize-html",
      "packageManager": "npm",
      "packageName": "sanitize-html",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-02-09T16:34:45.881363Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/apostrophecms/sanitize-html/commit/6012524e7824a2c8f6782b2bc5f93b1261723403"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/apostrophecms/sanitize-html/pull/460"
        },
        {
          "title": "POC: Potential Exploit",
          "url": "https://advisory.checkmarx.net/advisory/CX-2021-4309"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Validation Bypass",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<2.3.2"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger2-postman2-converter@0.0.3",
        "postman-collection@3.6.6",
        "sanitize-html@1.20.1"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "sanitize-html",
      "version": "1.20.1"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N",
      "alternativeIds": [],
      "creationTime": "2021-02-09T08:37:16.368073Z",
      "credit": [
        "Ron Masas",
        "Checkmarx"
      ],
      "cvssScore": 6.5,
      "description": "## Overview\n[sanitize-html](https://github.com/punkave/sanitize-html) is a library that allows you to clean up user-submitted HTML, preserving whitelisted elements and whitelisted attributes on a per-element basis\n\nAffected versions of this package are vulnerable to Access Restriction Bypass. Internationalized domain name (IDN) is not properly handled. This allows attackers to bypass hostname whitelist validation set by the `allowedIframeHostnames` option.\n## Remediation\nUpgrade `sanitize-html` to version 2.3.1 or higher.\n## References\n- [GitHub PR](https://github.com/apostrophecms/sanitize-html/pull/458)\n",
      "disclosureTime": "2021-02-09T08:21:55Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "2.3.1"
      ],
      "id": "SNYK-JS-SANITIZEHTML-1070786",
      "identifiers": {
        "CWE": [
          "CWE-20"
        ],
        "GHSA": [
          "GHSA-rjqq-98f6-6j3r"
        ],
        "CVE": [
          "CVE-2021-26539"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-10-13T13:44:46.998835Z",
      "moduleName": "sanitize-html",
      "packageManager": "npm",
      "packageName": "sanitize-html",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-02-09T16:34:49Z",
      "references": [
        {
          "title": "GitHub PR",
          "url": "https://github.com/apostrophecms/sanitize-html/pull/458"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Access Restriction Bypass",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<2.3.1"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger2-postman2-converter@0.0.3",
        "postman-collection@3.6.6",
        "sanitize-html@1.20.1"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "sanitize-html",
      "version": "1.20.1"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L",
      "alternativeIds": [],
      "creationTime": "2020-07-17T15:02:43.082824Z",
      "credit": [
        "mikesamuel"
      ],
      "cvssScore": 9.4,
      "description": "## Overview\n[sanitize-html](https://github.com/punkave/sanitize-html) is a library that allows you to clean up user-submitted HTML, preserving whitelisted elements and whitelisted attributes on a per-element basis\n\nAffected versions of this package are vulnerable to Arbitrary Code Execution. Tag transformations which turn an attribute value into a text node using `transformTags` could be vulnerable to code execution.\n## Remediation\nUpgrade `sanitize-html` to version 2.0.0-beta or higher.\n## References\n- [GitHub PR](https://github.com/apostrophecms/sanitize-html/pull/156)\n",
      "disclosureTime": "2020-09-07T09:46:18Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "2.0.0-beta"
      ],
      "id": "SNYK-JS-SANITIZEHTML-585892",
      "identifiers": {
        "CWE": [
          "CWE-94"
        ],
        "CVE": []
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-09-07T15:37:06.961614Z",
      "moduleName": "sanitize-html",
      "packageManager": "npm",
      "packageName": "sanitize-html",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-09-07T09:46:10Z",
      "references": [
        {
          "title": "GitHub PR",
          "url": "https://github.com/apostrophecms/sanitize-html/pull/156"
        }
      ],
      "severity": "critical",
      "socialTrendAlert": false,
      "title": "Arbitrary Code Execution",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<2.0.0-beta"
        ]
      },
      "severityWithCritical": "critical",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger2-postman2-converter@0.0.3",
        "postman-collection@3.6.6",
        "sanitize-html@1.20.1"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "sanitize-html",
      "version": "1.20.1"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N",
      "alternativeIds": [],
      "creationTime": "2021-12-10T12:47:49.144605Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 5.4,
      "description": "## Overview\n[swagger-ui](https://swagger.io/tools/swagger-ui/) is a library that allows interaction and visualisation of APIs.\n\nAffected versions of this package are vulnerable to User Interface (UI) Misrepresentation of Critical Information via the `?url` parameter, which was intended to allow displaying remote OpenAPI definitions. This functionality may pose a risk for users who host their own SwaggerUI instances. In particular, including remote OpenAPI definitions opens a vector for phishing attacks by abusing the trusted names/domains of self-hosted instances.\n## Remediation\nUpgrade `swagger-ui` to version 4.1.3 or higher.\n## References\n- [GitHub Commit](https://github.com/swagger-api/swagger-ui/commit/01a3e55960f864a0acf6a8d06e5ddaf6776a7f76)\n- [GitHub Issue](https://github.com/swagger-api/swagger-ui/issues/4872)\n",
      "disclosureTime": "2021-12-09T19:08:38Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "4.1.3"
      ],
      "id": "SNYK-JS-SWAGGERUI-2314885",
      "identifiers": {
        "CWE": [
          "CWE-451"
        ],
        "GHSA": [
          "GHSA-qrmm-w75w-3wpx"
        ],
        "CVE": [
          "CVE-2018-25031",
          "CVE-2021-46708"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-03-18T12:14:12.621700Z",
      "moduleName": "swagger-ui",
      "packageManager": "npm",
      "packageName": "swagger-ui",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-12-10T16:45:52Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/swagger-api/swagger-ui/commit/01a3e55960f864a0acf6a8d06e5ddaf6776a7f76"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/swagger-api/swagger-ui/issues/4872"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "User Interface (UI) Misrepresentation of Critical Information",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.1.3"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger-ui@3.25.0"
      ],
      "upgradePath": [
        false,
        "swagger-ui@4.1.3"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "swagger-ui",
      "version": "3.25.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:L/I:L/A:N/RL:O",
      "alternativeIds": [],
      "creationTime": "2020-06-11T14:30:10.957189Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 4.6,
      "description": "## Overview\n[swagger-ui](https://swagger.io/tools/swagger-ui/) is a library that allows interaction and visualisation of APIs.\n\nAffected versions of this package are vulnerable to Insecure Defaults. Markdown rendering allows `class`, `style` and `data` attributes in the result by default.\n## Remediation\nUpgrade `swagger-ui` to version 3.26.1 or higher.\n## References\n- [GitHub Commit](https://github.com/swagger-api/swagger-ui/commit/a616cb471d31f04a28d185aeb1bcb83637afc3cf)\n",
      "disclosureTime": "2020-06-11T14:27:11Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "3.26.1"
      ],
      "id": "SNYK-JS-SWAGGERUI-572012",
      "identifiers": {
        "CWE": [
          "CWE-453"
        ],
        "CVE": []
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-07-01T15:32:35.532108Z",
      "moduleName": "swagger-ui",
      "packageManager": "npm",
      "packageName": "swagger-ui",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-07-01T07:15:46Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/swagger-api/swagger-ui/commit/a616cb471d31f04a28d185aeb1bcb83637afc3cf"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Insecure Defaults",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<3.26.1"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger-ui@3.25.0"
      ],
      "upgradePath": [
        false,
        "swagger-ui@3.26.1"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "swagger-ui",
      "version": "3.25.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-10-29T10:53:41.363786Z",
      "credit": [
        "Yeting Li",
        "Miguel de Moura"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n[ua-parser-js](https://github.com/faisalman/ua-parser-js) is a lightweight JavaScript-based user-agent string parser.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in multiple regexes (see linked commit for more info).\r\n\r\n## Proof of Concept by Miguel de Moura\r\n``` jsconst ua_parser = require('ua-parser-js');const N_SIZE = 5000;const MALICIOUS_UA = `android;;Trio${' '.repeat(N_SIZE)}buil`;// Trigger ReDoSua_parser(MALICIOUS_UA);```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `ua-parser-js` to version 0.7.23 or higher.\n## References\n- [GitHub Commit](https://github.com/faisalman/ua-parser-js/commit/6d1f26df051ba681463ef109d36c9cf0f7e32b18)\n",
      "disclosureTime": "2020-10-29T10:53:18Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "0.7.23"
      ],
      "id": "SNYK-JS-UAPARSERJS-1023599",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2020-7793"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-06-21T19:28:47.413445Z",
      "moduleName": "ua-parser-js",
      "packageManager": "npm",
      "packageName": "ua-parser-js",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2020-12-13T15:57:49Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/faisalman/ua-parser-js/commit/6d1f26df051ba681463ef109d36c9cf0f7e32b18"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<0.7.23"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "react-tap-event-plugin@2.0.1",
        "fbjs@0.8.17",
        "ua-parser-js@0.7.20"
      ],
      "upgradePath": [
        false,
        "react-tap-event-plugin@2.0.1",
        "fbjs@0.8.17",
        "ua-parser-js@0.7.23"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "ua-parser-js",
      "version": "0.7.20"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:R",
      "alternativeIds": [],
      "creationTime": "2021-02-12T14:40:27.714038Z",
      "credit": [
        "Doyensec"
      ],
      "cvssScore": 5.9,
      "description": "## Overview\n[ua-parser-js](https://github.com/faisalman/ua-parser-js) is a lightweight JavaScript-based user-agent string parser.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). Within `src/ua-parser.js`, the browser regex is vulnerable to exponential backtracking.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `ua-parser-js` to version 0.7.24 or higher.\n## References\n- [GitHub Commit](https://github.com/faisalman/ua-parser-js/commit/809439e20e273ce0d25c1d04e111dcf6011eb566)\n- [POC: Potential Exploit](https://gist.github.com/b-c-ds/6941d80d6b4e694df4bc269493b7be76)\n",
      "disclosureTime": "2021-02-12T14:37:57Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "0.7.24"
      ],
      "id": "SNYK-JS-UAPARSERJS-1072471",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-78cj-fxph-m83p"
        ],
        "CVE": [
          "CVE-2021-27292"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-09-24T13:25:49.071846Z",
      "moduleName": "ua-parser-js",
      "packageManager": "npm",
      "packageName": "ua-parser-js",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-02-12T16:09:40Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/faisalman/ua-parser-js/commit/809439e20e273ce0d25c1d04e111dcf6011eb566"
        },
        {
          "title": "POC: Potential Exploit",
          "url": "https://gist.github.com/b-c-ds/6941d80d6b4e694df4bc269493b7be76"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<0.7.24"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "react-tap-event-plugin@2.0.1",
        "fbjs@0.8.17",
        "ua-parser-js@0.7.20"
      ],
      "upgradePath": [
        false,
        "react-tap-event-plugin@2.0.1",
        "fbjs@0.8.17",
        "ua-parser-js@0.7.24"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "ua-parser-js",
      "version": "0.7.20"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-09-09T15:30:19.590314Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n[ua-parser-js](https://github.com/faisalman/ua-parser-js) is a lightweight JavaScript-based user-agent string parser.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the regex for Redmi Phones and Mi Pad Tablets UA.\r\n\r\n### POC by Yeting Li\r\n```\r\nvar blank = \" \";\r\nfor (let i = 1; i < 5000; i++) {\r\nblank = blank + \" \";\r\n}\r\n\r\nstr_mi = \"android1mipad\" + blank + \"!\";\r\nstr_mi = str_mi + +blank + \"!\";\r\nmi = /android.+(mi[s-_]*(?:pad)(?:[s_]*[ws]+))s+build/i;\r\n\r\nvar count_mi = 0;\r\nfor (let i = 0; i < 10; i++) {\r\nvar time = Date.now();\r\nmi.test(str_mi);\r\nvar len = Date.now() - time;\r\ncount_mi = count_mi + len;\r\nconsole.log(\"mi:\" + blank.length + \": \" + len)\r\n}\r\nconsole.log(count_mi / 10);\r\n\r\nstr_redmi = \"android1redminote\" + blank + \"!\";\r\nredmi = /android.+(redmi[s-_]*(?:note)?(?:[s_]*[ws]+))s+build/i;\r\nvar count_redmi = 0;\r\nfor (let i = 0; i < 10; i++) {\r\nvar time = Date.now();\r\nredmi.test(str_redmi);\r\nvar len = Date.now() - time;\r\ncount_redmi = count_redmi + len;\r\nconsole.log(\"redmi:\" + blank.length + \": \" + len)\r\n}\r\nconsole.log(count_redmi / 10);\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `ua-parser-js` to version 0.7.22 or higher.\n## References\n- [GitHub Commit](https://github.com/faisalman/ua-parser-js/commit/233d3bae22a795153a7e6638887ce159c63e557d)\n",
      "disclosureTime": "2020-09-09T15:28:29Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "0.7.22"
      ],
      "id": "SNYK-JS-UAPARSERJS-610226",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-662x-fhqg-9p8v"
        ],
        "CVE": [
          "CVE-2020-7733"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-07-06T14:08:20.507448Z",
      "moduleName": "ua-parser-js",
      "packageManager": "npm",
      "packageName": "ua-parser-js",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2020-09-16T14:54:55Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/faisalman/ua-parser-js/commit/233d3bae22a795153a7e6638887ce159c63e557d"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<0.7.22"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "react-tap-event-plugin@2.0.1",
        "fbjs@0.8.17",
        "ua-parser-js@0.7.20"
      ],
      "upgradePath": [
        false,
        "react-tap-event-plugin@2.0.1",
        "fbjs@0.8.17",
        "ua-parser-js@0.7.22"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "ua-parser-js",
      "version": "0.7.20"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-10-29T10:53:41.363786Z",
      "credit": [
        "Yeting Li",
        "Miguel de Moura"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n[ua-parser-js](https://github.com/faisalman/ua-parser-js) is a lightweight JavaScript-based user-agent string parser.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in multiple regexes (see linked commit for more info).\r\n\r\n## Proof of Concept by Miguel de Moura\r\n``` jsconst ua_parser = require('ua-parser-js');const N_SIZE = 5000;const MALICIOUS_UA = `android;;Trio${' '.repeat(N_SIZE)}buil`;// Trigger ReDoSua_parser(MALICIOUS_UA);```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `ua-parser-js` to version 0.7.23 or higher.\n## References\n- [GitHub Commit](https://github.com/faisalman/ua-parser-js/commit/6d1f26df051ba681463ef109d36c9cf0f7e32b18)\n",
      "disclosureTime": "2020-10-29T10:53:18Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "0.7.23"
      ],
      "id": "SNYK-JS-UAPARSERJS-1023599",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2020-7793"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-06-21T19:28:47.413445Z",
      "moduleName": "ua-parser-js",
      "packageManager": "npm",
      "packageName": "ua-parser-js",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2020-12-13T15:57:49Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/faisalman/ua-parser-js/commit/6d1f26df051ba681463ef109d36c9cf0f7e32b18"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<0.7.23"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "react-notification-system@0.2.17",
        "create-react-class@15.6.3",
        "fbjs@0.8.17",
        "ua-parser-js@0.7.20"
      ],
      "upgradePath": [
        false,
        "react-notification-system@0.2.17",
        "create-react-class@15.6.3",
        "fbjs@0.8.17",
        "ua-parser-js@0.7.23"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "ua-parser-js",
      "version": "0.7.20"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:R",
      "alternativeIds": [],
      "creationTime": "2021-02-12T14:40:27.714038Z",
      "credit": [
        "Doyensec"
      ],
      "cvssScore": 5.9,
      "description": "## Overview\n[ua-parser-js](https://github.com/faisalman/ua-parser-js) is a lightweight JavaScript-based user-agent string parser.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). Within `src/ua-parser.js`, the browser regex is vulnerable to exponential backtracking.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `ua-parser-js` to version 0.7.24 or higher.\n## References\n- [GitHub Commit](https://github.com/faisalman/ua-parser-js/commit/809439e20e273ce0d25c1d04e111dcf6011eb566)\n- [POC: Potential Exploit](https://gist.github.com/b-c-ds/6941d80d6b4e694df4bc269493b7be76)\n",
      "disclosureTime": "2021-02-12T14:37:57Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "0.7.24"
      ],
      "id": "SNYK-JS-UAPARSERJS-1072471",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-78cj-fxph-m83p"
        ],
        "CVE": [
          "CVE-2021-27292"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-09-24T13:25:49.071846Z",
      "moduleName": "ua-parser-js",
      "packageManager": "npm",
      "packageName": "ua-parser-js",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-02-12T16:09:40Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/faisalman/ua-parser-js/commit/809439e20e273ce0d25c1d04e111dcf6011eb566"
        },
        {
          "title": "POC: Potential Exploit",
          "url": "https://gist.github.com/b-c-ds/6941d80d6b4e694df4bc269493b7be76"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<0.7.24"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "react-notification-system@0.2.17",
        "create-react-class@15.6.3",
        "fbjs@0.8.17",
        "ua-parser-js@0.7.20"
      ],
      "upgradePath": [
        false,
        "react-notification-system@0.2.17",
        "create-react-class@15.6.3",
        "fbjs@0.8.17",
        "ua-parser-js@0.7.24"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "ua-parser-js",
      "version": "0.7.20"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-09-09T15:30:19.590314Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n[ua-parser-js](https://github.com/faisalman/ua-parser-js) is a lightweight JavaScript-based user-agent string parser.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the regex for Redmi Phones and Mi Pad Tablets UA.\r\n\r\n### POC by Yeting Li\r\n```\r\nvar blank = \" \";\r\nfor (let i = 1; i < 5000; i++) {\r\nblank = blank + \" \";\r\n}\r\n\r\nstr_mi = \"android1mipad\" + blank + \"!\";\r\nstr_mi = str_mi + +blank + \"!\";\r\nmi = /android.+(mi[s-_]*(?:pad)(?:[s_]*[ws]+))s+build/i;\r\n\r\nvar count_mi = 0;\r\nfor (let i = 0; i < 10; i++) {\r\nvar time = Date.now();\r\nmi.test(str_mi);\r\nvar len = Date.now() - time;\r\ncount_mi = count_mi + len;\r\nconsole.log(\"mi:\" + blank.length + \": \" + len)\r\n}\r\nconsole.log(count_mi / 10);\r\n\r\nstr_redmi = \"android1redminote\" + blank + \"!\";\r\nredmi = /android.+(redmi[s-_]*(?:note)?(?:[s_]*[ws]+))s+build/i;\r\nvar count_redmi = 0;\r\nfor (let i = 0; i < 10; i++) {\r\nvar time = Date.now();\r\nredmi.test(str_redmi);\r\nvar len = Date.now() - time;\r\ncount_redmi = count_redmi + len;\r\nconsole.log(\"redmi:\" + blank.length + \": \" + len)\r\n}\r\nconsole.log(count_redmi / 10);\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `ua-parser-js` to version 0.7.22 or higher.\n## References\n- [GitHub Commit](https://github.com/faisalman/ua-parser-js/commit/233d3bae22a795153a7e6638887ce159c63e557d)\n",
      "disclosureTime": "2020-09-09T15:28:29Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "0.7.22"
      ],
      "id": "SNYK-JS-UAPARSERJS-610226",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-662x-fhqg-9p8v"
        ],
        "CVE": [
          "CVE-2020-7733"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-07-06T14:08:20.507448Z",
      "moduleName": "ua-parser-js",
      "packageManager": "npm",
      "packageName": "ua-parser-js",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2020-09-16T14:54:55Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/faisalman/ua-parser-js/commit/233d3bae22a795153a7e6638887ce159c63e557d"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<0.7.22"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "react-notification-system@0.2.17",
        "create-react-class@15.6.3",
        "fbjs@0.8.17",
        "ua-parser-js@0.7.20"
      ],
      "upgradePath": [
        false,
        "react-notification-system@0.2.17",
        "create-react-class@15.6.3",
        "fbjs@0.8.17",
        "ua-parser-js@0.7.22"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "ua-parser-js",
      "version": "0.7.20"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-10-29T10:53:41.363786Z",
      "credit": [
        "Yeting Li",
        "Miguel de Moura"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n[ua-parser-js](https://github.com/faisalman/ua-parser-js) is a lightweight JavaScript-based user-agent string parser.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in multiple regexes (see linked commit for more info).\r\n\r\n## Proof of Concept by Miguel de Moura\r\n``` jsconst ua_parser = require('ua-parser-js');const N_SIZE = 5000;const MALICIOUS_UA = `android;;Trio${' '.repeat(N_SIZE)}buil`;// Trigger ReDoSua_parser(MALICIOUS_UA);```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `ua-parser-js` to version 0.7.23 or higher.\n## References\n- [GitHub Commit](https://github.com/faisalman/ua-parser-js/commit/6d1f26df051ba681463ef109d36c9cf0f7e32b18)\n",
      "disclosureTime": "2020-10-29T10:53:18Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "0.7.23"
      ],
      "id": "SNYK-JS-UAPARSERJS-1023599",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2020-7793"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-06-21T19:28:47.413445Z",
      "moduleName": "ua-parser-js",
      "packageManager": "npm",
      "packageName": "ua-parser-js",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2020-12-13T15:57:49Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/faisalman/ua-parser-js/commit/6d1f26df051ba681463ef109d36c9cf0f7e32b18"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<0.7.23"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger-ui@3.25.0",
        "react@15.6.2",
        "fbjs@0.8.17",
        "ua-parser-js@0.7.20"
      ],
      "upgradePath": [
        false,
        "swagger-ui@3.25.0",
        "react@15.6.2",
        "fbjs@0.8.17",
        "ua-parser-js@0.7.23"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "ua-parser-js",
      "version": "0.7.20"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:R",
      "alternativeIds": [],
      "creationTime": "2021-02-12T14:40:27.714038Z",
      "credit": [
        "Doyensec"
      ],
      "cvssScore": 5.9,
      "description": "## Overview\n[ua-parser-js](https://github.com/faisalman/ua-parser-js) is a lightweight JavaScript-based user-agent string parser.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). Within `src/ua-parser.js`, the browser regex is vulnerable to exponential backtracking.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `ua-parser-js` to version 0.7.24 or higher.\n## References\n- [GitHub Commit](https://github.com/faisalman/ua-parser-js/commit/809439e20e273ce0d25c1d04e111dcf6011eb566)\n- [POC: Potential Exploit](https://gist.github.com/b-c-ds/6941d80d6b4e694df4bc269493b7be76)\n",
      "disclosureTime": "2021-02-12T14:37:57Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "0.7.24"
      ],
      "id": "SNYK-JS-UAPARSERJS-1072471",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-78cj-fxph-m83p"
        ],
        "CVE": [
          "CVE-2021-27292"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-09-24T13:25:49.071846Z",
      "moduleName": "ua-parser-js",
      "packageManager": "npm",
      "packageName": "ua-parser-js",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-02-12T16:09:40Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/faisalman/ua-parser-js/commit/809439e20e273ce0d25c1d04e111dcf6011eb566"
        },
        {
          "title": "POC: Potential Exploit",
          "url": "https://gist.github.com/b-c-ds/6941d80d6b4e694df4bc269493b7be76"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<0.7.24"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger-ui@3.25.0",
        "react@15.6.2",
        "fbjs@0.8.17",
        "ua-parser-js@0.7.20"
      ],
      "upgradePath": [
        false,
        "swagger-ui@3.25.0",
        "react@15.6.2",
        "fbjs@0.8.17",
        "ua-parser-js@0.7.24"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "ua-parser-js",
      "version": "0.7.20"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-09-09T15:30:19.590314Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n[ua-parser-js](https://github.com/faisalman/ua-parser-js) is a lightweight JavaScript-based user-agent string parser.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the regex for Redmi Phones and Mi Pad Tablets UA.\r\n\r\n### POC by Yeting Li\r\n```\r\nvar blank = \" \";\r\nfor (let i = 1; i < 5000; i++) {\r\nblank = blank + \" \";\r\n}\r\n\r\nstr_mi = \"android1mipad\" + blank + \"!\";\r\nstr_mi = str_mi + +blank + \"!\";\r\nmi = /android.+(mi[s-_]*(?:pad)(?:[s_]*[ws]+))s+build/i;\r\n\r\nvar count_mi = 0;\r\nfor (let i = 0; i < 10; i++) {\r\nvar time = Date.now();\r\nmi.test(str_mi);\r\nvar len = Date.now() - time;\r\ncount_mi = count_mi + len;\r\nconsole.log(\"mi:\" + blank.length + \": \" + len)\r\n}\r\nconsole.log(count_mi / 10);\r\n\r\nstr_redmi = \"android1redminote\" + blank + \"!\";\r\nredmi = /android.+(redmi[s-_]*(?:note)?(?:[s_]*[ws]+))s+build/i;\r\nvar count_redmi = 0;\r\nfor (let i = 0; i < 10; i++) {\r\nvar time = Date.now();\r\nredmi.test(str_redmi);\r\nvar len = Date.now() - time;\r\ncount_redmi = count_redmi + len;\r\nconsole.log(\"redmi:\" + blank.length + \": \" + len)\r\n}\r\nconsole.log(count_redmi / 10);\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `ua-parser-js` to version 0.7.22 or higher.\n## References\n- [GitHub Commit](https://github.com/faisalman/ua-parser-js/commit/233d3bae22a795153a7e6638887ce159c63e557d)\n",
      "disclosureTime": "2020-09-09T15:28:29Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "0.7.22"
      ],
      "id": "SNYK-JS-UAPARSERJS-610226",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-662x-fhqg-9p8v"
        ],
        "CVE": [
          "CVE-2020-7733"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-07-06T14:08:20.507448Z",
      "moduleName": "ua-parser-js",
      "packageManager": "npm",
      "packageName": "ua-parser-js",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2020-09-16T14:54:55Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/faisalman/ua-parser-js/commit/233d3bae22a795153a7e6638887ce159c63e557d"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<0.7.22"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger-ui@3.25.0",
        "react@15.6.2",
        "fbjs@0.8.17",
        "ua-parser-js@0.7.20"
      ],
      "upgradePath": [
        false,
        "swagger-ui@3.25.0",
        "react@15.6.2",
        "fbjs@0.8.17",
        "ua-parser-js@0.7.22"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "ua-parser-js",
      "version": "0.7.20"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-10-29T10:53:41.363786Z",
      "credit": [
        "Yeting Li",
        "Miguel de Moura"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n[ua-parser-js](https://github.com/faisalman/ua-parser-js) is a lightweight JavaScript-based user-agent string parser.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in multiple regexes (see linked commit for more info).\r\n\r\n## Proof of Concept by Miguel de Moura\r\n``` jsconst ua_parser = require('ua-parser-js');const N_SIZE = 5000;const MALICIOUS_UA = `android;;Trio${' '.repeat(N_SIZE)}buil`;// Trigger ReDoSua_parser(MALICIOUS_UA);```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `ua-parser-js` to version 0.7.23 or higher.\n## References\n- [GitHub Commit](https://github.com/faisalman/ua-parser-js/commit/6d1f26df051ba681463ef109d36c9cf0f7e32b18)\n",
      "disclosureTime": "2020-10-29T10:53:18Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "0.7.23"
      ],
      "id": "SNYK-JS-UAPARSERJS-1023599",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2020-7793"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-06-21T19:28:47.413445Z",
      "moduleName": "ua-parser-js",
      "packageManager": "npm",
      "packageName": "ua-parser-js",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2020-12-13T15:57:49Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/faisalman/ua-parser-js/commit/6d1f26df051ba681463ef109d36c9cf0f7e32b18"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<0.7.23"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger-ui@3.25.0",
        "react-dom@15.6.2",
        "fbjs@0.8.17",
        "ua-parser-js@0.7.20"
      ],
      "upgradePath": [
        false,
        "swagger-ui@3.25.0",
        "react-dom@15.6.2",
        "fbjs@0.8.17",
        "ua-parser-js@0.7.23"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "ua-parser-js",
      "version": "0.7.20"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:R",
      "alternativeIds": [],
      "creationTime": "2021-02-12T14:40:27.714038Z",
      "credit": [
        "Doyensec"
      ],
      "cvssScore": 5.9,
      "description": "## Overview\n[ua-parser-js](https://github.com/faisalman/ua-parser-js) is a lightweight JavaScript-based user-agent string parser.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). Within `src/ua-parser.js`, the browser regex is vulnerable to exponential backtracking.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `ua-parser-js` to version 0.7.24 or higher.\n## References\n- [GitHub Commit](https://github.com/faisalman/ua-parser-js/commit/809439e20e273ce0d25c1d04e111dcf6011eb566)\n- [POC: Potential Exploit](https://gist.github.com/b-c-ds/6941d80d6b4e694df4bc269493b7be76)\n",
      "disclosureTime": "2021-02-12T14:37:57Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "0.7.24"
      ],
      "id": "SNYK-JS-UAPARSERJS-1072471",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-78cj-fxph-m83p"
        ],
        "CVE": [
          "CVE-2021-27292"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-09-24T13:25:49.071846Z",
      "moduleName": "ua-parser-js",
      "packageManager": "npm",
      "packageName": "ua-parser-js",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-02-12T16:09:40Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/faisalman/ua-parser-js/commit/809439e20e273ce0d25c1d04e111dcf6011eb566"
        },
        {
          "title": "POC: Potential Exploit",
          "url": "https://gist.github.com/b-c-ds/6941d80d6b4e694df4bc269493b7be76"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<0.7.24"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger-ui@3.25.0",
        "react-dom@15.6.2",
        "fbjs@0.8.17",
        "ua-parser-js@0.7.20"
      ],
      "upgradePath": [
        false,
        "swagger-ui@3.25.0",
        "react-dom@15.6.2",
        "fbjs@0.8.17",
        "ua-parser-js@0.7.24"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "ua-parser-js",
      "version": "0.7.20"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-09-09T15:30:19.590314Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n[ua-parser-js](https://github.com/faisalman/ua-parser-js) is a lightweight JavaScript-based user-agent string parser.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the regex for Redmi Phones and Mi Pad Tablets UA.\r\n\r\n### POC by Yeting Li\r\n```\r\nvar blank = \" \";\r\nfor (let i = 1; i < 5000; i++) {\r\nblank = blank + \" \";\r\n}\r\n\r\nstr_mi = \"android1mipad\" + blank + \"!\";\r\nstr_mi = str_mi + +blank + \"!\";\r\nmi = /android.+(mi[s-_]*(?:pad)(?:[s_]*[ws]+))s+build/i;\r\n\r\nvar count_mi = 0;\r\nfor (let i = 0; i < 10; i++) {\r\nvar time = Date.now();\r\nmi.test(str_mi);\r\nvar len = Date.now() - time;\r\ncount_mi = count_mi + len;\r\nconsole.log(\"mi:\" + blank.length + \": \" + len)\r\n}\r\nconsole.log(count_mi / 10);\r\n\r\nstr_redmi = \"android1redminote\" + blank + \"!\";\r\nredmi = /android.+(redmi[s-_]*(?:note)?(?:[s_]*[ws]+))s+build/i;\r\nvar count_redmi = 0;\r\nfor (let i = 0; i < 10; i++) {\r\nvar time = Date.now();\r\nredmi.test(str_redmi);\r\nvar len = Date.now() - time;\r\ncount_redmi = count_redmi + len;\r\nconsole.log(\"redmi:\" + blank.length + \": \" + len)\r\n}\r\nconsole.log(count_redmi / 10);\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `ua-parser-js` to version 0.7.22 or higher.\n## References\n- [GitHub Commit](https://github.com/faisalman/ua-parser-js/commit/233d3bae22a795153a7e6638887ce159c63e557d)\n",
      "disclosureTime": "2020-09-09T15:28:29Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "0.7.22"
      ],
      "id": "SNYK-JS-UAPARSERJS-610226",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-662x-fhqg-9p8v"
        ],
        "CVE": [
          "CVE-2020-7733"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-07-06T14:08:20.507448Z",
      "moduleName": "ua-parser-js",
      "packageManager": "npm",
      "packageName": "ua-parser-js",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2020-09-16T14:54:55Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/faisalman/ua-parser-js/commit/233d3bae22a795153a7e6638887ce159c63e557d"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<0.7.22"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger-ui@3.25.0",
        "react-dom@15.6.2",
        "fbjs@0.8.17",
        "ua-parser-js@0.7.20"
      ],
      "upgradePath": [
        false,
        "swagger-ui@3.25.0",
        "react-dom@15.6.2",
        "fbjs@0.8.17",
        "ua-parser-js@0.7.22"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "ua-parser-js",
      "version": "0.7.20"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-10-29T10:53:41.363786Z",
      "credit": [
        "Yeting Li",
        "Miguel de Moura"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n[ua-parser-js](https://github.com/faisalman/ua-parser-js) is a lightweight JavaScript-based user-agent string parser.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in multiple regexes (see linked commit for more info).\r\n\r\n## Proof of Concept by Miguel de Moura\r\n``` jsconst ua_parser = require('ua-parser-js');const N_SIZE = 5000;const MALICIOUS_UA = `android;;Trio${' '.repeat(N_SIZE)}buil`;// Trigger ReDoSua_parser(MALICIOUS_UA);```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `ua-parser-js` to version 0.7.23 or higher.\n## References\n- [GitHub Commit](https://github.com/faisalman/ua-parser-js/commit/6d1f26df051ba681463ef109d36c9cf0f7e32b18)\n",
      "disclosureTime": "2020-10-29T10:53:18Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "0.7.23"
      ],
      "id": "SNYK-JS-UAPARSERJS-1023599",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2020-7793"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-06-21T19:28:47.413445Z",
      "moduleName": "ua-parser-js",
      "packageManager": "npm",
      "packageName": "ua-parser-js",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2020-12-13T15:57:49Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/faisalman/ua-parser-js/commit/6d1f26df051ba681463ef109d36c9cf0f7e32b18"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<0.7.23"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger-ui@3.25.0",
        "react@15.6.2",
        "create-react-class@15.6.3",
        "fbjs@0.8.17",
        "ua-parser-js@0.7.20"
      ],
      "upgradePath": [
        false,
        "swagger-ui@3.25.0",
        "react@15.6.2",
        "create-react-class@15.6.3",
        "fbjs@0.8.17",
        "ua-parser-js@0.7.23"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "ua-parser-js",
      "version": "0.7.20"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:R",
      "alternativeIds": [],
      "creationTime": "2021-02-12T14:40:27.714038Z",
      "credit": [
        "Doyensec"
      ],
      "cvssScore": 5.9,
      "description": "## Overview\n[ua-parser-js](https://github.com/faisalman/ua-parser-js) is a lightweight JavaScript-based user-agent string parser.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). Within `src/ua-parser.js`, the browser regex is vulnerable to exponential backtracking.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `ua-parser-js` to version 0.7.24 or higher.\n## References\n- [GitHub Commit](https://github.com/faisalman/ua-parser-js/commit/809439e20e273ce0d25c1d04e111dcf6011eb566)\n- [POC: Potential Exploit](https://gist.github.com/b-c-ds/6941d80d6b4e694df4bc269493b7be76)\n",
      "disclosureTime": "2021-02-12T14:37:57Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "0.7.24"
      ],
      "id": "SNYK-JS-UAPARSERJS-1072471",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-78cj-fxph-m83p"
        ],
        "CVE": [
          "CVE-2021-27292"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-09-24T13:25:49.071846Z",
      "moduleName": "ua-parser-js",
      "packageManager": "npm",
      "packageName": "ua-parser-js",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-02-12T16:09:40Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/faisalman/ua-parser-js/commit/809439e20e273ce0d25c1d04e111dcf6011eb566"
        },
        {
          "title": "POC: Potential Exploit",
          "url": "https://gist.github.com/b-c-ds/6941d80d6b4e694df4bc269493b7be76"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<0.7.24"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger-ui@3.25.0",
        "react@15.6.2",
        "create-react-class@15.6.3",
        "fbjs@0.8.17",
        "ua-parser-js@0.7.20"
      ],
      "upgradePath": [
        false,
        "swagger-ui@3.25.0",
        "react@15.6.2",
        "create-react-class@15.6.3",
        "fbjs@0.8.17",
        "ua-parser-js@0.7.24"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "ua-parser-js",
      "version": "0.7.20"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-09-09T15:30:19.590314Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n[ua-parser-js](https://github.com/faisalman/ua-parser-js) is a lightweight JavaScript-based user-agent string parser.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the regex for Redmi Phones and Mi Pad Tablets UA.\r\n\r\n### POC by Yeting Li\r\n```\r\nvar blank = \" \";\r\nfor (let i = 1; i < 5000; i++) {\r\nblank = blank + \" \";\r\n}\r\n\r\nstr_mi = \"android1mipad\" + blank + \"!\";\r\nstr_mi = str_mi + +blank + \"!\";\r\nmi = /android.+(mi[s-_]*(?:pad)(?:[s_]*[ws]+))s+build/i;\r\n\r\nvar count_mi = 0;\r\nfor (let i = 0; i < 10; i++) {\r\nvar time = Date.now();\r\nmi.test(str_mi);\r\nvar len = Date.now() - time;\r\ncount_mi = count_mi + len;\r\nconsole.log(\"mi:\" + blank.length + \": \" + len)\r\n}\r\nconsole.log(count_mi / 10);\r\n\r\nstr_redmi = \"android1redminote\" + blank + \"!\";\r\nredmi = /android.+(redmi[s-_]*(?:note)?(?:[s_]*[ws]+))s+build/i;\r\nvar count_redmi = 0;\r\nfor (let i = 0; i < 10; i++) {\r\nvar time = Date.now();\r\nredmi.test(str_redmi);\r\nvar len = Date.now() - time;\r\ncount_redmi = count_redmi + len;\r\nconsole.log(\"redmi:\" + blank.length + \": \" + len)\r\n}\r\nconsole.log(count_redmi / 10);\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `ua-parser-js` to version 0.7.22 or higher.\n## References\n- [GitHub Commit](https://github.com/faisalman/ua-parser-js/commit/233d3bae22a795153a7e6638887ce159c63e557d)\n",
      "disclosureTime": "2020-09-09T15:28:29Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "0.7.22"
      ],
      "id": "SNYK-JS-UAPARSERJS-610226",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-662x-fhqg-9p8v"
        ],
        "CVE": [
          "CVE-2020-7733"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-07-06T14:08:20.507448Z",
      "moduleName": "ua-parser-js",
      "packageManager": "npm",
      "packageName": "ua-parser-js",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2020-09-16T14:54:55Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/faisalman/ua-parser-js/commit/233d3bae22a795153a7e6638887ce159c63e557d"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<0.7.22"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger-ui@3.25.0",
        "react@15.6.2",
        "create-react-class@15.6.3",
        "fbjs@0.8.17",
        "ua-parser-js@0.7.20"
      ],
      "upgradePath": [
        false,
        "swagger-ui@3.25.0",
        "react@15.6.2",
        "create-react-class@15.6.3",
        "fbjs@0.8.17",
        "ua-parser-js@0.7.22"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "ua-parser-js",
      "version": "0.7.20"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-10-29T10:53:41.363786Z",
      "credit": [
        "Yeting Li",
        "Miguel de Moura"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n[ua-parser-js](https://github.com/faisalman/ua-parser-js) is a lightweight JavaScript-based user-agent string parser.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in multiple regexes (see linked commit for more info).\r\n\r\n## Proof of Concept by Miguel de Moura\r\n``` jsconst ua_parser = require('ua-parser-js');const N_SIZE = 5000;const MALICIOUS_UA = `android;;Trio${' '.repeat(N_SIZE)}buil`;// Trigger ReDoSua_parser(MALICIOUS_UA);```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `ua-parser-js` to version 0.7.23 or higher.\n## References\n- [GitHub Commit](https://github.com/faisalman/ua-parser-js/commit/6d1f26df051ba681463ef109d36c9cf0f7e32b18)\n",
      "disclosureTime": "2020-10-29T10:53:18Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "0.7.23"
      ],
      "id": "SNYK-JS-UAPARSERJS-1023599",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2020-7793"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-06-21T19:28:47.413445Z",
      "moduleName": "ua-parser-js",
      "packageManager": "npm",
      "packageName": "ua-parser-js",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2020-12-13T15:57:49Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/faisalman/ua-parser-js/commit/6d1f26df051ba681463ef109d36c9cf0f7e32b18"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<0.7.23"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger-ui@3.25.0",
        "react-redux@4.4.10",
        "create-react-class@15.6.3",
        "fbjs@0.8.17",
        "ua-parser-js@0.7.20"
      ],
      "upgradePath": [
        false,
        "swagger-ui@3.25.0",
        "react-redux@4.4.10",
        "create-react-class@15.6.3",
        "fbjs@0.8.17",
        "ua-parser-js@0.7.23"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "ua-parser-js",
      "version": "0.7.20"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:R",
      "alternativeIds": [],
      "creationTime": "2021-02-12T14:40:27.714038Z",
      "credit": [
        "Doyensec"
      ],
      "cvssScore": 5.9,
      "description": "## Overview\n[ua-parser-js](https://github.com/faisalman/ua-parser-js) is a lightweight JavaScript-based user-agent string parser.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). Within `src/ua-parser.js`, the browser regex is vulnerable to exponential backtracking.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `ua-parser-js` to version 0.7.24 or higher.\n## References\n- [GitHub Commit](https://github.com/faisalman/ua-parser-js/commit/809439e20e273ce0d25c1d04e111dcf6011eb566)\n- [POC: Potential Exploit](https://gist.github.com/b-c-ds/6941d80d6b4e694df4bc269493b7be76)\n",
      "disclosureTime": "2021-02-12T14:37:57Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "0.7.24"
      ],
      "id": "SNYK-JS-UAPARSERJS-1072471",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-78cj-fxph-m83p"
        ],
        "CVE": [
          "CVE-2021-27292"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-09-24T13:25:49.071846Z",
      "moduleName": "ua-parser-js",
      "packageManager": "npm",
      "packageName": "ua-parser-js",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-02-12T16:09:40Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/faisalman/ua-parser-js/commit/809439e20e273ce0d25c1d04e111dcf6011eb566"
        },
        {
          "title": "POC: Potential Exploit",
          "url": "https://gist.github.com/b-c-ds/6941d80d6b4e694df4bc269493b7be76"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<0.7.24"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger-ui@3.25.0",
        "react-redux@4.4.10",
        "create-react-class@15.6.3",
        "fbjs@0.8.17",
        "ua-parser-js@0.7.20"
      ],
      "upgradePath": [
        false,
        "swagger-ui@3.25.0",
        "react-redux@4.4.10",
        "create-react-class@15.6.3",
        "fbjs@0.8.17",
        "ua-parser-js@0.7.24"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "ua-parser-js",
      "version": "0.7.20"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-09-09T15:30:19.590314Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n[ua-parser-js](https://github.com/faisalman/ua-parser-js) is a lightweight JavaScript-based user-agent string parser.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the regex for Redmi Phones and Mi Pad Tablets UA.\r\n\r\n### POC by Yeting Li\r\n```\r\nvar blank = \" \";\r\nfor (let i = 1; i < 5000; i++) {\r\nblank = blank + \" \";\r\n}\r\n\r\nstr_mi = \"android1mipad\" + blank + \"!\";\r\nstr_mi = str_mi + +blank + \"!\";\r\nmi = /android.+(mi[s-_]*(?:pad)(?:[s_]*[ws]+))s+build/i;\r\n\r\nvar count_mi = 0;\r\nfor (let i = 0; i < 10; i++) {\r\nvar time = Date.now();\r\nmi.test(str_mi);\r\nvar len = Date.now() - time;\r\ncount_mi = count_mi + len;\r\nconsole.log(\"mi:\" + blank.length + \": \" + len)\r\n}\r\nconsole.log(count_mi / 10);\r\n\r\nstr_redmi = \"android1redminote\" + blank + \"!\";\r\nredmi = /android.+(redmi[s-_]*(?:note)?(?:[s_]*[ws]+))s+build/i;\r\nvar count_redmi = 0;\r\nfor (let i = 0; i < 10; i++) {\r\nvar time = Date.now();\r\nredmi.test(str_redmi);\r\nvar len = Date.now() - time;\r\ncount_redmi = count_redmi + len;\r\nconsole.log(\"redmi:\" + blank.length + \": \" + len)\r\n}\r\nconsole.log(count_redmi / 10);\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `ua-parser-js` to version 0.7.22 or higher.\n## References\n- [GitHub Commit](https://github.com/faisalman/ua-parser-js/commit/233d3bae22a795153a7e6638887ce159c63e557d)\n",
      "disclosureTime": "2020-09-09T15:28:29Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "0.7.22"
      ],
      "id": "SNYK-JS-UAPARSERJS-610226",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-662x-fhqg-9p8v"
        ],
        "CVE": [
          "CVE-2020-7733"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-07-06T14:08:20.507448Z",
      "moduleName": "ua-parser-js",
      "packageManager": "npm",
      "packageName": "ua-parser-js",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2020-09-16T14:54:55Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/faisalman/ua-parser-js/commit/233d3bae22a795153a7e6638887ce159c63e557d"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<0.7.22"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger-ui@3.25.0",
        "react-redux@4.4.10",
        "create-react-class@15.6.3",
        "fbjs@0.8.17",
        "ua-parser-js@0.7.20"
      ],
      "upgradePath": [
        false,
        "swagger-ui@3.25.0",
        "react-redux@4.4.10",
        "create-react-class@15.6.3",
        "fbjs@0.8.17",
        "ua-parser-js@0.7.22"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "ua-parser-js",
      "version": "0.7.20"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-10-29T10:53:41.363786Z",
      "credit": [
        "Yeting Li",
        "Miguel de Moura"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n[ua-parser-js](https://github.com/faisalman/ua-parser-js) is a lightweight JavaScript-based user-agent string parser.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in multiple regexes (see linked commit for more info).\r\n\r\n## Proof of Concept by Miguel de Moura\r\n``` jsconst ua_parser = require('ua-parser-js');const N_SIZE = 5000;const MALICIOUS_UA = `android;;Trio${' '.repeat(N_SIZE)}buil`;// Trigger ReDoSua_parser(MALICIOUS_UA);```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `ua-parser-js` to version 0.7.23 or higher.\n## References\n- [GitHub Commit](https://github.com/faisalman/ua-parser-js/commit/6d1f26df051ba681463ef109d36c9cf0f7e32b18)\n",
      "disclosureTime": "2020-10-29T10:53:18Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "0.7.23"
      ],
      "id": "SNYK-JS-UAPARSERJS-1023599",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2020-7793"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-06-21T19:28:47.413445Z",
      "moduleName": "ua-parser-js",
      "packageManager": "npm",
      "packageName": "ua-parser-js",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2020-12-13T15:57:49Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/faisalman/ua-parser-js/commit/6d1f26df051ba681463ef109d36c9cf0f7e32b18"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<0.7.23"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger-ui-react@3.25.0",
        "react-redux@4.4.10",
        "create-react-class@15.6.3",
        "fbjs@0.8.17",
        "ua-parser-js@0.7.20"
      ],
      "upgradePath": [
        false,
        "swagger-ui-react@3.25.0",
        "react-redux@4.4.10",
        "create-react-class@15.6.3",
        "fbjs@0.8.17",
        "ua-parser-js@0.7.23"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "ua-parser-js",
      "version": "0.7.20"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:R",
      "alternativeIds": [],
      "creationTime": "2021-02-12T14:40:27.714038Z",
      "credit": [
        "Doyensec"
      ],
      "cvssScore": 5.9,
      "description": "## Overview\n[ua-parser-js](https://github.com/faisalman/ua-parser-js) is a lightweight JavaScript-based user-agent string parser.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). Within `src/ua-parser.js`, the browser regex is vulnerable to exponential backtracking.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `ua-parser-js` to version 0.7.24 or higher.\n## References\n- [GitHub Commit](https://github.com/faisalman/ua-parser-js/commit/809439e20e273ce0d25c1d04e111dcf6011eb566)\n- [POC: Potential Exploit](https://gist.github.com/b-c-ds/6941d80d6b4e694df4bc269493b7be76)\n",
      "disclosureTime": "2021-02-12T14:37:57Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "0.7.24"
      ],
      "id": "SNYK-JS-UAPARSERJS-1072471",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-78cj-fxph-m83p"
        ],
        "CVE": [
          "CVE-2021-27292"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-09-24T13:25:49.071846Z",
      "moduleName": "ua-parser-js",
      "packageManager": "npm",
      "packageName": "ua-parser-js",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-02-12T16:09:40Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/faisalman/ua-parser-js/commit/809439e20e273ce0d25c1d04e111dcf6011eb566"
        },
        {
          "title": "POC: Potential Exploit",
          "url": "https://gist.github.com/b-c-ds/6941d80d6b4e694df4bc269493b7be76"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<0.7.24"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger-ui-react@3.25.0",
        "react-redux@4.4.10",
        "create-react-class@15.6.3",
        "fbjs@0.8.17",
        "ua-parser-js@0.7.20"
      ],
      "upgradePath": [
        false,
        "swagger-ui-react@3.25.0",
        "react-redux@4.4.10",
        "create-react-class@15.6.3",
        "fbjs@0.8.17",
        "ua-parser-js@0.7.24"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "ua-parser-js",
      "version": "0.7.20"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-09-09T15:30:19.590314Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n[ua-parser-js](https://github.com/faisalman/ua-parser-js) is a lightweight JavaScript-based user-agent string parser.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the regex for Redmi Phones and Mi Pad Tablets UA.\r\n\r\n### POC by Yeting Li\r\n```\r\nvar blank = \" \";\r\nfor (let i = 1; i < 5000; i++) {\r\nblank = blank + \" \";\r\n}\r\n\r\nstr_mi = \"android1mipad\" + blank + \"!\";\r\nstr_mi = str_mi + +blank + \"!\";\r\nmi = /android.+(mi[s-_]*(?:pad)(?:[s_]*[ws]+))s+build/i;\r\n\r\nvar count_mi = 0;\r\nfor (let i = 0; i < 10; i++) {\r\nvar time = Date.now();\r\nmi.test(str_mi);\r\nvar len = Date.now() - time;\r\ncount_mi = count_mi + len;\r\nconsole.log(\"mi:\" + blank.length + \": \" + len)\r\n}\r\nconsole.log(count_mi / 10);\r\n\r\nstr_redmi = \"android1redminote\" + blank + \"!\";\r\nredmi = /android.+(redmi[s-_]*(?:note)?(?:[s_]*[ws]+))s+build/i;\r\nvar count_redmi = 0;\r\nfor (let i = 0; i < 10; i++) {\r\nvar time = Date.now();\r\nredmi.test(str_redmi);\r\nvar len = Date.now() - time;\r\ncount_redmi = count_redmi + len;\r\nconsole.log(\"redmi:\" + blank.length + \": \" + len)\r\n}\r\nconsole.log(count_redmi / 10);\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `ua-parser-js` to version 0.7.22 or higher.\n## References\n- [GitHub Commit](https://github.com/faisalman/ua-parser-js/commit/233d3bae22a795153a7e6638887ce159c63e557d)\n",
      "disclosureTime": "2020-09-09T15:28:29Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "0.7.22"
      ],
      "id": "SNYK-JS-UAPARSERJS-610226",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-662x-fhqg-9p8v"
        ],
        "CVE": [
          "CVE-2020-7733"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-07-06T14:08:20.507448Z",
      "moduleName": "ua-parser-js",
      "packageManager": "npm",
      "packageName": "ua-parser-js",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2020-09-16T14:54:55Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/faisalman/ua-parser-js/commit/233d3bae22a795153a7e6638887ce159c63e557d"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<0.7.22"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger-ui-react@3.25.0",
        "react-redux@4.4.10",
        "create-react-class@15.6.3",
        "fbjs@0.8.17",
        "ua-parser-js@0.7.20"
      ],
      "upgradePath": [
        false,
        "swagger-ui-react@3.25.0",
        "react-redux@4.4.10",
        "create-react-class@15.6.3",
        "fbjs@0.8.17",
        "ua-parser-js@0.7.22"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "ua-parser-js",
      "version": "0.7.20"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:H/UI:N/S:U/C:H/I:L/A:L/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2021-03-02T19:52:38.855110Z",
      "credit": [
        "Alessio Della Libera (@d3lla)"
      ],
      "cvssScore": 5.5,
      "description": "## Overview\n[underscore](https://www.npmjs.org/package/underscore) is a JavaScript's functional programming helper library.\n\nAffected versions of this package are vulnerable to Arbitrary Code Injection via the `template` function, particularly when the `variable` option is taken from `_.templateSettings` as it is not sanitized.\r\n\r\n### PoC\r\n```\r\nconst _ = require('underscore');\r\n_.templateSettings.variable = \"a = this.process.mainModule.require('child_process').execSync('touch HELLO')\";\r\nconst t = _.template(\"\")();\r\n```\n## Remediation\nUpgrade `underscore` to version 1.13.0-2, 1.12.1 or higher.\n## References\n- [GitHub Additional Information](https://github.com/jashkenas/underscore/blob/cb5f6fc6c2400649d942f1e36f9e5191fb7a1bf1/modules/template.js#L71)\n- [GitHub Commit](https://github.com/jashkenas/underscore/commit/4c73526d43838ad6ab43a6134728776632adeb66)\n",
      "disclosureTime": "2021-03-02T19:51:03Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "1.13.0-2",
        "1.12.1"
      ],
      "id": "SNYK-JS-UNDERSCORE-1080984",
      "identifiers": {
        "CWE": [
          "CWE-94"
        ],
        "GHSA": [
          "GHSA-cf4h-3jhx-xvhq"
        ],
        "CVE": [
          "CVE-2021-23358"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-07-12T15:25:03.116440Z",
      "moduleName": "underscore",
      "packageManager": "npm",
      "packageName": "underscore",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-03-29T14:54:59Z",
      "references": [
        {
          "title": "GitHub Additional Information",
          "url": "https://github.com/jashkenas/underscore/blob/cb5f6fc6c2400649d942f1e36f9e5191fb7a1bf1/modules/template.js%23L71"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/jashkenas/underscore/commit/4c73526d43838ad6ab43a6134728776632adeb66"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Arbitrary Code Injection",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=1.13.0-0 <1.13.0-2",
          ">=1.3.2 <1.12.1"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "cleanup-dependencies@0.0.6",
        "underscore@1.9.1"
      ],
      "upgradePath": [
        false,
        "cleanup-dependencies@0.0.6",
        "underscore@1.12.1"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "underscore",
      "version": "1.9.1"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [],
      "creationTime": "2021-02-22T08:43:10.670486Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[url-parse](https://www.npmjs.com/package/url-parse) is a Small footprint URL parser that works seamlessly across Node.js and browser environments.\n\nAffected versions of this package are vulnerable to Improper Input Validation. It mishandles certain uses of backslash such as `http:\\/` and interprets the URI as a relative path.\n## Remediation\nUpgrade `url-parse` to version 1.5.0 or higher.\n## References\n- [GitHub Commit](https://github.com/unshiftio/url-parse/commit/d1e7e8822f26e8a49794b757123b51386325b2b0)\n- [GitHub PR](https://github.com/unshiftio/url-parse/pull/197)\n",
      "disclosureTime": "2021-02-22T08:42:02Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "1.5.0"
      ],
      "id": "SNYK-JS-URLPARSE-1078283",
      "identifiers": {
        "CWE": [
          "CWE-20"
        ],
        "GHSA": [
          "GHSA-9m6j-fcg5-2442"
        ],
        "CVE": [
          "CVE-2021-27515"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-07-06T14:08:11.382662Z",
      "moduleName": "url-parse",
      "packageManager": "npm",
      "packageName": "url-parse",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-02-22T15:56:01Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/unshiftio/url-parse/commit/d1e7e8822f26e8a49794b757123b51386325b2b0"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/unshiftio/url-parse/pull/197"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Improper Input Validation",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<1.5.0"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger-ui@3.25.0",
        "url-parse@1.4.7"
      ],
      "upgradePath": [
        false,
        "swagger-ui@3.25.0",
        "url-parse@1.5.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "url-parse",
      "version": "1.4.7"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N/E:P",
      "alternativeIds": [],
      "creationTime": "2021-07-26T12:59:09.903181Z",
      "credit": [
        "ready-research"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[url-parse](https://www.npmjs.com/package/url-parse) is a Small footprint URL parser that works seamlessly across Node.js and browser environments.\n\nAffected versions of this package are vulnerable to Open Redirect due to improper escaping of slash characters.\n## Remediation\nUpgrade `url-parse` to version 1.5.2 or higher.\n## References\n- [GitHub Commit](https://github.com/unshiftio/url-parse/commit/81ab967889b08112d3356e451bf03e6aa0cbb7e0)\n- [GitHub Issue](https://github.com/unshiftio/url-parse/issues/206)\n- [GitHub PR](https://github.com/unshiftio/url-parse/pull/208)\n",
      "disclosureTime": "2021-07-26T12:57:37Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "1.5.2"
      ],
      "id": "SNYK-JS-URLPARSE-1533425",
      "identifiers": {
        "CWE": [
          "CWE-601"
        ],
        "CVE": [
          "CVE-2021-3664"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-07-26T15:23:41.208720Z",
      "moduleName": "url-parse",
      "packageManager": "npm",
      "packageName": "url-parse",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-07-26T15:23:41.206700Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/unshiftio/url-parse/commit/81ab967889b08112d3356e451bf03e6aa0cbb7e0"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/unshiftio/url-parse/issues/206"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/unshiftio/url-parse/pull/208"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Open Redirect",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<1.5.2"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger-ui@3.25.0",
        "url-parse@1.4.7"
      ],
      "upgradePath": [
        false,
        "swagger-ui@3.25.0",
        "url-parse@1.5.2"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "url-parse",
      "version": "1.4.7"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:L/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2022-02-15T10:01:29.002928Z",
      "credit": [
        "ranjit-git"
      ],
      "cvssScore": 6.4,
      "description": "## Overview\n[url-parse](https://www.npmjs.com/package/url-parse) is a Small footprint URL parser that works seamlessly across Node.js and browser environments.\n\nAffected versions of this package are vulnerable to Access Restriction Bypass due to improper parsing process, that may lead to incorrect handling of authentication credentials and hostname, which allows bypass of hostname validation.\r\n\r\n## PoC:\r\n\r\n```js\r\n// PoC.js\r\n var parse = require('url-parse')\r\nvar cc=parse(\"http://admin:password123@@127.0.0.1\")\r\n\r\n//Output:\r\n{ slashes: true,\r\n  protocol: 'http:',\r\n  hash: '',\r\n  query: '',\r\n  pathname: '/',\r\n  auth: 'admin:password123',\r\n  host: '@127.0.0.1',\r\n  port: '',\r\n  hostname: '@127.0.0.1',\r\n  password: 'password123',\r\n  username: 'admin',\r\n  origin: 'http://@127.0.0.1',\r\n  href: 'http://admin:password123@@127.0.0.1/' }\r\n```\n## Remediation\nUpgrade `url-parse` to version 1.5.6 or higher.\n## References\n- [GitHub Commit](https://github.com/unshiftio/url-parse/commit/9be7ee88afd2bb04e4d5a1a8da9a389ac13f8c40)\n- [GitHub PR](https://github.com/unshiftio/url-parse/pull/223)\n",
      "disclosureTime": "2022-02-15T09:53:25Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "1.5.6"
      ],
      "id": "SNYK-JS-URLPARSE-2401205",
      "identifiers": {
        "CWE": [
          "CWE-639"
        ],
        "CVE": [
          "CVE-2022-0512"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-02-15T15:27:36.795014Z",
      "moduleName": "url-parse",
      "packageManager": "npm",
      "packageName": "url-parse",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-02-15T13:06:08Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/unshiftio/url-parse/commit/9be7ee88afd2bb04e4d5a1a8da9a389ac13f8c40"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/unshiftio/url-parse/pull/223"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Access Restriction Bypass",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<1.5.6"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger-ui@3.25.0",
        "url-parse@1.4.7"
      ],
      "upgradePath": [
        false,
        "swagger-ui@3.25.0",
        "url-parse@1.5.6"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "url-parse",
      "version": "1.4.7"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:C/C:L/I:L/A:N/E:P",
      "alternativeIds": [],
      "creationTime": "2022-02-21T10:47:02.113879Z",
      "credit": [
        "Rohan Sharma"
      ],
      "cvssScore": 6.4,
      "description": "## Overview\n[url-parse](https://www.npmjs.com/package/url-parse) is a Small footprint URL parser that works seamlessly across Node.js and browser environments.\n\nAffected versions of this package are vulnerable to Authorization Bypass via the `hostname` field of a parsed URL, because \"url-parse\" is unable to find the correct hostname when no port number is provided in the URL.\r\n\r\n## PoC:\r\n```js\r\nvar Url = require('url-parse');\r\nvar PAYLOAD = \"http://example.com:\";\r\n\r\nconsole.log(Url(PAYLOAD));\r\n\r\n// Expected hostname: example.com\r\n// Actual hostname by url-parse: example.com:\r\n```\r\n\r\nOutput:\r\n\r\n```\r\n{\r\n  slashes: true,\r\n  protocol: 'http:',\r\n  hash: '',\r\n  query: '',\r\n  pathname: '/',\r\n  auth: '',\r\n  host: 'example.com:',\r\n  port: '',\r\n  hostname: 'example.com:',\r\n  password: '',\r\n  username: '',\r\n  origin: 'http://example.com:',\r\n  href: 'http://example.com:/'\r\n}\r\n```\n## Remediation\nUpgrade `url-parse` to version 1.5.8 or higher.\n## References\n- [GitHub Commit](https://github.com/unshiftio/url-parse/commit/d5c64791ef496ca5459ae7f2176a31ea53b127e5)\n",
      "disclosureTime": "2022-02-21T10:36:50Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "1.5.8"
      ],
      "id": "SNYK-JS-URLPARSE-2407759",
      "identifiers": {
        "CWE": [
          "CWE-285"
        ],
        "CVE": [
          "CVE-2022-0686"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-02-21T16:02:45.057937Z",
      "moduleName": "url-parse",
      "packageManager": "npm",
      "packageName": "url-parse",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-02-21T16:02:45.055472Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/unshiftio/url-parse/commit/d5c64791ef496ca5459ae7f2176a31ea53b127e5"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Authorization Bypass",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<1.5.8"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger-ui@3.25.0",
        "url-parse@1.4.7"
      ],
      "upgradePath": [
        false,
        "swagger-ui@3.25.0",
        "url-parse@1.5.8"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "url-parse",
      "version": "1.4.7"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:N/E:P",
      "alternativeIds": [],
      "creationTime": "2022-02-21T12:56:54.006952Z",
      "credit": [
        "haxatron"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n[url-parse](https://www.npmjs.com/package/url-parse) is a Small footprint URL parser that works seamlessly across Node.js and browser environments.\n\nAffected versions of this package are vulnerable to Improper Input Validation due to improper fix of [CVE-2020-8124](https://security.snyk.io/vuln/SNYK-JS-URLPARSE-543307) , it is possible to be exploited via the `\\b` (backspace) character.\r\n\r\n## PoC:\r\n```js\r\nconst parse = require('./index.js')\r\n\r\nurl = parse('\\bhttp://google.com')\r\n\r\nconsole.log(url)\r\n```\r\nOutput:\r\n\r\n```\r\n{\r\n  slashes: false,\r\n  protocol: '',\r\n  hash: '',\r\n  query: '',\r\n  pathname: '\\bhttp://google.com',\r\n  auth: '',\r\n  host: '',\r\n  port: '',\r\n  hostname: '',\r\n  password: '',\r\n  username: '',\r\n  origin: 'null',\r\n  href: '\\bhttp://google.com'\r\n}\r\n```\n## Remediation\nUpgrade `url-parse` to version 1.5.9 or higher.\n## References\n- [GitHub Commit](https://github.com/unshiftio/url-parse/commit/0e3fb542d60ddbf6933f22eb9b1e06e25eaa5b63)\n",
      "disclosureTime": "2022-02-21T12:49:06Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "1.5.9"
      ],
      "id": "SNYK-JS-URLPARSE-2407770",
      "identifiers": {
        "CWE": [
          "CWE-20"
        ],
        "CVE": [
          "CVE-2022-0691"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-06-09T15:13:29.620707Z",
      "moduleName": "url-parse",
      "packageManager": "npm",
      "packageName": "url-parse",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-02-21T16:02:45Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/unshiftio/url-parse/commit/0e3fb542d60ddbf6933f22eb9b1e06e25eaa5b63"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Improper Input Validation",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<1.5.9"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger-ui@3.25.0",
        "url-parse@1.4.7"
      ],
      "upgradePath": [
        false,
        "swagger-ui@3.25.0",
        "url-parse@1.5.9"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "url-parse",
      "version": "1.4.7"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N/E:P",
      "alternativeIds": [],
      "creationTime": "2022-02-24T09:02:19.641584Z",
      "credit": [
        "haxatron"
      ],
      "cvssScore": 6.2,
      "description": "## Overview\n[url-parse](https://www.npmjs.com/package/url-parse) is a Small footprint URL parser that works seamlessly across Node.js and browser environments.\n\nAffected versions of this package are vulnerable to Authorization Bypass Through User-Controlled Key due to incorrect conversion of `@` in the protocol field of the HREF.\r\n\r\n## PoC:\r\n```\r\nparse = require('url-parse')\r\n\r\nconsole.log(parse(\"http:@/127.0.0.1\"))\r\n```\r\nOutput:\r\n\r\n```\r\n{\r\n  slashes: true,\r\n  protocol: 'http:',\r\n  hash: '',\r\n  query: '',\r\n  pathname: '/127.0.0.1',\r\n  auth: '',\r\n  host: '',\r\n  port: '',\r\n  hostname: '',\r\n  password: '',\r\n  username: '',\r\n  origin: 'null',\r\n  href: 'http:///127.0.0.1'\r\n}\r\n```\n## Remediation\nUpgrade `url-parse` to version 1.5.7 or higher.\n## References\n- [GitHub Commit](https://github.com/unshiftio/url-parse/commit/ef45a1355375a8244063793a19059b4f62fc8788)\n- [GitHub PR](https://github.com/unshiftio/url-parse/pull/226)\n",
      "disclosureTime": "2022-02-17T00:00:00Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "1.5.7"
      ],
      "id": "SNYK-JS-URLPARSE-2412697",
      "identifiers": {
        "CWE": [
          "CWE-639"
        ],
        "CVE": [
          "CVE-2022-0639"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-02-24T16:08:31.527221Z",
      "moduleName": "url-parse",
      "packageManager": "npm",
      "packageName": "url-parse",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-02-24T16:08:31.525302Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/unshiftio/url-parse/commit/ef45a1355375a8244063793a19059b4f62fc8788"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/unshiftio/url-parse/pull/226"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Authorization Bypass Through User-Controlled Key",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<1.5.7"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger-ui@3.25.0",
        "url-parse@1.4.7"
      ],
      "upgradePath": [
        false,
        "swagger-ui@3.25.0",
        "url-parse@1.5.7"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "url-parse",
      "version": "1.4.7"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [],
      "creationTime": "2021-02-22T08:43:10.670486Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[url-parse](https://www.npmjs.com/package/url-parse) is a Small footprint URL parser that works seamlessly across Node.js and browser environments.\n\nAffected versions of this package are vulnerable to Improper Input Validation. It mishandles certain uses of backslash such as `http:\\/` and interprets the URI as a relative path.\n## Remediation\nUpgrade `url-parse` to version 1.5.0 or higher.\n## References\n- [GitHub Commit](https://github.com/unshiftio/url-parse/commit/d1e7e8822f26e8a49794b757123b51386325b2b0)\n- [GitHub PR](https://github.com/unshiftio/url-parse/pull/197)\n",
      "disclosureTime": "2021-02-22T08:42:02Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "1.5.0"
      ],
      "id": "SNYK-JS-URLPARSE-1078283",
      "identifiers": {
        "CWE": [
          "CWE-20"
        ],
        "GHSA": [
          "GHSA-9m6j-fcg5-2442"
        ],
        "CVE": [
          "CVE-2021-27515"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-07-06T14:08:11.382662Z",
      "moduleName": "url-parse",
      "packageManager": "npm",
      "packageName": "url-parse",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-02-22T15:56:01Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/unshiftio/url-parse/commit/d1e7e8822f26e8a49794b757123b51386325b2b0"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/unshiftio/url-parse/pull/197"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Improper Input Validation",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<1.5.0"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger-ui-react@3.25.0",
        "url-parse@1.4.7"
      ],
      "upgradePath": [
        false,
        "swagger-ui-react@3.25.0",
        "url-parse@1.5.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "url-parse",
      "version": "1.4.7"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N/E:P",
      "alternativeIds": [],
      "creationTime": "2021-07-26T12:59:09.903181Z",
      "credit": [
        "ready-research"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[url-parse](https://www.npmjs.com/package/url-parse) is a Small footprint URL parser that works seamlessly across Node.js and browser environments.\n\nAffected versions of this package are vulnerable to Open Redirect due to improper escaping of slash characters.\n## Remediation\nUpgrade `url-parse` to version 1.5.2 or higher.\n## References\n- [GitHub Commit](https://github.com/unshiftio/url-parse/commit/81ab967889b08112d3356e451bf03e6aa0cbb7e0)\n- [GitHub Issue](https://github.com/unshiftio/url-parse/issues/206)\n- [GitHub PR](https://github.com/unshiftio/url-parse/pull/208)\n",
      "disclosureTime": "2021-07-26T12:57:37Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "1.5.2"
      ],
      "id": "SNYK-JS-URLPARSE-1533425",
      "identifiers": {
        "CWE": [
          "CWE-601"
        ],
        "CVE": [
          "CVE-2021-3664"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-07-26T15:23:41.208720Z",
      "moduleName": "url-parse",
      "packageManager": "npm",
      "packageName": "url-parse",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-07-26T15:23:41.206700Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/unshiftio/url-parse/commit/81ab967889b08112d3356e451bf03e6aa0cbb7e0"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/unshiftio/url-parse/issues/206"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/unshiftio/url-parse/pull/208"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Open Redirect",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<1.5.2"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger-ui-react@3.25.0",
        "url-parse@1.4.7"
      ],
      "upgradePath": [
        false,
        "swagger-ui-react@3.25.0",
        "url-parse@1.5.2"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "url-parse",
      "version": "1.4.7"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:L/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2022-02-15T10:01:29.002928Z",
      "credit": [
        "ranjit-git"
      ],
      "cvssScore": 6.4,
      "description": "## Overview\n[url-parse](https://www.npmjs.com/package/url-parse) is a Small footprint URL parser that works seamlessly across Node.js and browser environments.\n\nAffected versions of this package are vulnerable to Access Restriction Bypass due to improper parsing process, that may lead to incorrect handling of authentication credentials and hostname, which allows bypass of hostname validation.\r\n\r\n## PoC:\r\n\r\n```js\r\n// PoC.js\r\n var parse = require('url-parse')\r\nvar cc=parse(\"http://admin:password123@@127.0.0.1\")\r\n\r\n//Output:\r\n{ slashes: true,\r\n  protocol: 'http:',\r\n  hash: '',\r\n  query: '',\r\n  pathname: '/',\r\n  auth: 'admin:password123',\r\n  host: '@127.0.0.1',\r\n  port: '',\r\n  hostname: '@127.0.0.1',\r\n  password: 'password123',\r\n  username: 'admin',\r\n  origin: 'http://@127.0.0.1',\r\n  href: 'http://admin:password123@@127.0.0.1/' }\r\n```\n## Remediation\nUpgrade `url-parse` to version 1.5.6 or higher.\n## References\n- [GitHub Commit](https://github.com/unshiftio/url-parse/commit/9be7ee88afd2bb04e4d5a1a8da9a389ac13f8c40)\n- [GitHub PR](https://github.com/unshiftio/url-parse/pull/223)\n",
      "disclosureTime": "2022-02-15T09:53:25Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "1.5.6"
      ],
      "id": "SNYK-JS-URLPARSE-2401205",
      "identifiers": {
        "CWE": [
          "CWE-639"
        ],
        "CVE": [
          "CVE-2022-0512"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-02-15T15:27:36.795014Z",
      "moduleName": "url-parse",
      "packageManager": "npm",
      "packageName": "url-parse",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-02-15T13:06:08Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/unshiftio/url-parse/commit/9be7ee88afd2bb04e4d5a1a8da9a389ac13f8c40"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/unshiftio/url-parse/pull/223"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Access Restriction Bypass",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<1.5.6"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger-ui-react@3.25.0",
        "url-parse@1.4.7"
      ],
      "upgradePath": [
        false,
        "swagger-ui-react@3.25.0",
        "url-parse@1.5.6"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "url-parse",
      "version": "1.4.7"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:C/C:L/I:L/A:N/E:P",
      "alternativeIds": [],
      "creationTime": "2022-02-21T10:47:02.113879Z",
      "credit": [
        "Rohan Sharma"
      ],
      "cvssScore": 6.4,
      "description": "## Overview\n[url-parse](https://www.npmjs.com/package/url-parse) is a Small footprint URL parser that works seamlessly across Node.js and browser environments.\n\nAffected versions of this package are vulnerable to Authorization Bypass via the `hostname` field of a parsed URL, because \"url-parse\" is unable to find the correct hostname when no port number is provided in the URL.\r\n\r\n## PoC:\r\n```js\r\nvar Url = require('url-parse');\r\nvar PAYLOAD = \"http://example.com:\";\r\n\r\nconsole.log(Url(PAYLOAD));\r\n\r\n// Expected hostname: example.com\r\n// Actual hostname by url-parse: example.com:\r\n```\r\n\r\nOutput:\r\n\r\n```\r\n{\r\n  slashes: true,\r\n  protocol: 'http:',\r\n  hash: '',\r\n  query: '',\r\n  pathname: '/',\r\n  auth: '',\r\n  host: 'example.com:',\r\n  port: '',\r\n  hostname: 'example.com:',\r\n  password: '',\r\n  username: '',\r\n  origin: 'http://example.com:',\r\n  href: 'http://example.com:/'\r\n}\r\n```\n## Remediation\nUpgrade `url-parse` to version 1.5.8 or higher.\n## References\n- [GitHub Commit](https://github.com/unshiftio/url-parse/commit/d5c64791ef496ca5459ae7f2176a31ea53b127e5)\n",
      "disclosureTime": "2022-02-21T10:36:50Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "1.5.8"
      ],
      "id": "SNYK-JS-URLPARSE-2407759",
      "identifiers": {
        "CWE": [
          "CWE-285"
        ],
        "CVE": [
          "CVE-2022-0686"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-02-21T16:02:45.057937Z",
      "moduleName": "url-parse",
      "packageManager": "npm",
      "packageName": "url-parse",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-02-21T16:02:45.055472Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/unshiftio/url-parse/commit/d5c64791ef496ca5459ae7f2176a31ea53b127e5"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Authorization Bypass",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<1.5.8"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger-ui-react@3.25.0",
        "url-parse@1.4.7"
      ],
      "upgradePath": [
        false,
        "swagger-ui-react@3.25.0",
        "url-parse@1.5.8"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "url-parse",
      "version": "1.4.7"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:N/E:P",
      "alternativeIds": [],
      "creationTime": "2022-02-21T12:56:54.006952Z",
      "credit": [
        "haxatron"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n[url-parse](https://www.npmjs.com/package/url-parse) is a Small footprint URL parser that works seamlessly across Node.js and browser environments.\n\nAffected versions of this package are vulnerable to Improper Input Validation due to improper fix of [CVE-2020-8124](https://security.snyk.io/vuln/SNYK-JS-URLPARSE-543307) , it is possible to be exploited via the `\\b` (backspace) character.\r\n\r\n## PoC:\r\n```js\r\nconst parse = require('./index.js')\r\n\r\nurl = parse('\\bhttp://google.com')\r\n\r\nconsole.log(url)\r\n```\r\nOutput:\r\n\r\n```\r\n{\r\n  slashes: false,\r\n  protocol: '',\r\n  hash: '',\r\n  query: '',\r\n  pathname: '\\bhttp://google.com',\r\n  auth: '',\r\n  host: '',\r\n  port: '',\r\n  hostname: '',\r\n  password: '',\r\n  username: '',\r\n  origin: 'null',\r\n  href: '\\bhttp://google.com'\r\n}\r\n```\n## Remediation\nUpgrade `url-parse` to version 1.5.9 or higher.\n## References\n- [GitHub Commit](https://github.com/unshiftio/url-parse/commit/0e3fb542d60ddbf6933f22eb9b1e06e25eaa5b63)\n",
      "disclosureTime": "2022-02-21T12:49:06Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "1.5.9"
      ],
      "id": "SNYK-JS-URLPARSE-2407770",
      "identifiers": {
        "CWE": [
          "CWE-20"
        ],
        "CVE": [
          "CVE-2022-0691"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-06-09T15:13:29.620707Z",
      "moduleName": "url-parse",
      "packageManager": "npm",
      "packageName": "url-parse",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-02-21T16:02:45Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/unshiftio/url-parse/commit/0e3fb542d60ddbf6933f22eb9b1e06e25eaa5b63"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Improper Input Validation",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<1.5.9"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger-ui-react@3.25.0",
        "url-parse@1.4.7"
      ],
      "upgradePath": [
        false,
        "swagger-ui-react@3.25.0",
        "url-parse@1.5.9"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "url-parse",
      "version": "1.4.7"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N/E:P",
      "alternativeIds": [],
      "creationTime": "2022-02-24T09:02:19.641584Z",
      "credit": [
        "haxatron"
      ],
      "cvssScore": 6.2,
      "description": "## Overview\n[url-parse](https://www.npmjs.com/package/url-parse) is a Small footprint URL parser that works seamlessly across Node.js and browser environments.\n\nAffected versions of this package are vulnerable to Authorization Bypass Through User-Controlled Key due to incorrect conversion of `@` in the protocol field of the HREF.\r\n\r\n## PoC:\r\n```\r\nparse = require('url-parse')\r\n\r\nconsole.log(parse(\"http:@/127.0.0.1\"))\r\n```\r\nOutput:\r\n\r\n```\r\n{\r\n  slashes: true,\r\n  protocol: 'http:',\r\n  hash: '',\r\n  query: '',\r\n  pathname: '/127.0.0.1',\r\n  auth: '',\r\n  host: '',\r\n  port: '',\r\n  hostname: '',\r\n  password: '',\r\n  username: '',\r\n  origin: 'null',\r\n  href: 'http:///127.0.0.1'\r\n}\r\n```\n## Remediation\nUpgrade `url-parse` to version 1.5.7 or higher.\n## References\n- [GitHub Commit](https://github.com/unshiftio/url-parse/commit/ef45a1355375a8244063793a19059b4f62fc8788)\n- [GitHub PR](https://github.com/unshiftio/url-parse/pull/226)\n",
      "disclosureTime": "2022-02-17T00:00:00Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "1.5.7"
      ],
      "id": "SNYK-JS-URLPARSE-2412697",
      "identifiers": {
        "CWE": [
          "CWE-639"
        ],
        "CVE": [
          "CVE-2022-0639"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-02-24T16:08:31.527221Z",
      "moduleName": "url-parse",
      "packageManager": "npm",
      "packageName": "url-parse",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-02-24T16:08:31.525302Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/unshiftio/url-parse/commit/ef45a1355375a8244063793a19059b4f62fc8788"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/unshiftio/url-parse/pull/226"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Authorization Bypass Through User-Controlled Key",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<1.5.7"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "swagger-ui-react@3.25.0",
        "url-parse@1.4.7"
      ],
      "upgradePath": [
        false,
        "swagger-ui-react@3.25.0",
        "url-parse@1.5.7"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "url-parse",
      "version": "1.4.7"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2020-10-25T14:27:16.715665Z",
      "credit": [
        "po6ix"
      ],
      "cvssScore": 7.3,
      "description": "## Overview\n[y18n](https://www.npmjs.com/package/y18n) is a the bare-bones internationalization library used by yargs\n\nAffected versions of this package are vulnerable to Prototype Pollution. PoC by po6ix:\r\n```\r\nconst y18n = require('y18n')();\r\n \r\ny18n.setLocale('__proto__');\r\ny18n.updateLocale({polluted: true});\r\n\r\nconsole.log(polluted); // true\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `y18n` to version 3.2.2, 4.0.1, 5.0.5 or higher.\n## References\n- [GitHub Commit](https://github.com/yargs/y18n/commit/a9ac604abf756dec9687be3843e2c93bfe581f25)\n- [GitHub Issue](https://github.com/yargs/y18n/issues/96)\n- [GitHub PR](https://github.com/yargs/y18n/pull/108)\n",
      "disclosureTime": "2020-10-25T14:24:22Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "3.2.2",
        "4.0.1",
        "5.0.5"
      ],
      "id": "SNYK-JS-Y18N-1021887",
      "identifiers": {
        "CWE": [
          "CWE-1321"
        ],
        "GHSA": [
          "GHSA-c4w7-xm78-47vh"
        ],
        "CVE": [
          "CVE-2020-7774"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-05-31T06:34:46.699769Z",
      "moduleName": "y18n",
      "packageManager": "npm",
      "packageName": "y18n",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2020-11-10T15:27:28Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/yargs/y18n/commit/a9ac604abf756dec9687be3843e2c93bfe581f25"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/yargs/y18n/issues/96"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/yargs/y18n/pull/108"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<3.2.2",
          ">=4.0.0 <4.0.1",
          ">=5.0.0 <5.0.5"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/devportal@1.0.0",
        "openapi-to-postmanv2@1.2.7",
        "oas-resolver-browser@2.3.3",
        "yargs@15.4.1",
        "y18n@4.0.0"
      ],
      "upgradePath": [
        false,
        "openapi-to-postmanv2@1.2.7",
        "oas-resolver-browser@2.3.3",
        "yargs@15.4.1",
        "y18n@4.0.1"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "y18n",
      "version": "4.0.0"
    }
  ],
  "ok": false,
  "dependencyCount": 542,
  "org": "thayaruban",
  "policy": "# Snyk (https://snyk.io) policy file, patches or ignores known vulnerabilities.\nversion: v1.25.0\nignore: {}\npatch: {}\n",
  "isPrivate": true,
  "licensesPolicy": {
    "severities": {},
    "orgLicenseRules": {
      "AGPL-1.0": {
        "licenseType": "AGPL-1.0",
        "severity": "high",
        "instructions": ""
      },
      "AGPL-3.0": {
        "licenseType": "AGPL-3.0",
        "severity": "high",
        "instructions": ""
      },
      "Artistic-1.0": {
        "licenseType": "Artistic-1.0",
        "severity": "medium",
        "instructions": ""
      },
      "Artistic-2.0": {
        "licenseType": "Artistic-2.0",
        "severity": "medium",
        "instructions": ""
      },
      "CDDL-1.0": {
        "licenseType": "CDDL-1.0",
        "severity": "medium",
        "instructions": ""
      },
      "CPOL-1.02": {
        "licenseType": "CPOL-1.02",
        "severity": "high",
        "instructions": ""
      },
      "EPL-1.0": {
        "licenseType": "EPL-1.0",
        "severity": "medium",
        "instructions": ""
      },
      "GPL-2.0": {
        "licenseType": "GPL-2.0",
        "severity": "high",
        "instructions": ""
      },
      "GPL-3.0": {
        "licenseType": "GPL-3.0",
        "severity": "high",
        "instructions": ""
      },
      "LGPL-2.0": {
        "licenseType": "LGPL-2.0",
        "severity": "medium",
        "instructions": ""
      },
      "LGPL-2.1": {
        "licenseType": "LGPL-2.1",
        "severity": "medium",
        "instructions": ""
      },
      "LGPL-3.0": {
        "licenseType": "LGPL-3.0",
        "severity": "medium",
        "instructions": ""
      },
      "MPL-1.1": {
        "licenseType": "MPL-1.1",
        "severity": "medium",
        "instructions": ""
      },
      "MPL-2.0": {
        "licenseType": "MPL-2.0",
        "severity": "medium",
        "instructions": ""
      },
      "MS-RL": {
        "licenseType": "MS-RL",
        "severity": "medium",
        "instructions": ""
      },
      "SimPL-2.0": {
        "licenseType": "SimPL-2.0",
        "severity": "high",
        "instructions": ""
      }
    }
  },
  "packageManager": "npm",
  "projectId": "861ab26d-7ff4-4f85-9538-3044c50514fb",
  "ignoreSettings": {
    "adminOnly": false,
    "reasonRequired": true,
    "disregardFilesystemIgnores": false
  },
  "summary": "219 vulnerable dependency paths",
  "remediation": {
    "unresolved": [
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2020-07-16T08:19:48.462528Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 8.1,
        "description": "## Overview\n[ajv](https://www.npmjs.com/package/ajv) is an Another JSON Schema Validator\n\nAffected versions of this package are vulnerable to Prototype Pollution. A carefully crafted JSON schema could be provided that allows execution of other code by prototype pollution. (While untrusted schemas are recommended against, the worst case of an untrusted schema should be a denial of service, not execution of code.)\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `ajv` to version 6.12.3 or higher.\n## References\n- [HackerOne Report](https://hackerone.com/bugs?subject=user&report_id=894259)\n",
        "disclosureTime": "2020-07-16T08:14:41Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "6.12.3"
        ],
        "id": "SNYK-JS-AJV-584908",
        "identifiers": {
          "CWE": [
            "CWE-400"
          ],
          "CVE": [
            "CVE-2020-15366"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2020-07-20T12:40:09.463832Z",
        "moduleName": "ajv",
        "packageManager": "npm",
        "packageName": "ajv",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2020-07-16T13:58:04Z",
        "references": [
          {
            "title": "HackerOne Report",
            "url": "https://hackerone.com/bugs?subject=user&report_id=894259"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Prototype Pollution",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "<6.12.3"
          ]
        },
        "from": [
          "@wso2apim/devportal@1.0.0",
          "@asyncapi/react-component@0.17.11",
          "@asyncapi/parser@1.3.1",
          "ajv@6.10.2"
        ],
        "upgradePath": [
          false,
          "@asyncapi/react-component@0.17.11",
          "@asyncapi/parser@1.3.1",
          "ajv@6.12.3"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "ajv",
        "version": "6.10.2",
        "severityWithCritical": "high"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:C",
        "alternativeIds": [],
        "creationTime": "2021-09-09T14:28:31.617043Z",
        "credit": [
          "Yeting Li"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) due to the sub-patterns` [[\\\\]()#;?]*` and `(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]*)*`.\r\n\r\n\r\n### PoC\r\n```js\r\nimport ansiRegex from 'ansi-regex';\r\n\r\nfor(var i = 1; i <= 50000; i++) {\r\n    var time = Date.now();\r\n    var attack_str = \"\\u001B[\"+\";\".repeat(i*10000);\r\n    ansiRegex().test(attack_str)\r\n    var time_cost = Date.now() - time;\r\n    console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `ansi-regex` to version 4.1.1, 5.0.1, 6.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/chalk/ansi-regex/commit/75a657da7af875b2e2724fd6331bf0a4b23d3c9a)\n- [GitHub Commit](https://github.com/chalk/ansi-regex/commit/8d1d7cdb586269882c4bdc1b7325d0c58c8f76f9)\n- [GitHub PR](https://github.com/chalk/ansi-regex/pull/37)\n",
        "disclosureTime": "2021-09-09T14:27:43Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [
          "4.1.1",
          "5.0.1",
          "6.0.1"
        ],
        "id": "SNYK-JS-ANSIREGEX-1583908",
        "identifiers": {
          "CWE": [
            "CWE-400"
          ],
          "CVE": [
            "CVE-2021-3807"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2022-05-13T11:26:51.564118Z",
        "moduleName": "ansi-regex",
        "packageManager": "npm",
        "packageName": "ansi-regex",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2021-09-12T12:52:37Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/chalk/ansi-regex/commit/75a657da7af875b2e2724fd6331bf0a4b23d3c9a"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/chalk/ansi-regex/commit/8d1d7cdb586269882c4bdc1b7325d0c58c8f76f9"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/chalk/ansi-regex/pull/37"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Regular Expression Denial of Service (ReDoS)",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            ">=2.1.1 <4.1.1",
            ">=5.0.0 <5.0.1",
            ">=6.0.0 <6.0.1"
          ]
        },
        "from": [
          "@wso2apim/devportal@1.0.0",
          "openapi-to-postmanv2@1.2.7",
          "oas-resolver-browser@2.3.3",
          "yargs@15.4.1",
          "cliui@6.0.0",
          "wrap-ansi@6.2.0",
          "string-width@4.2.0",
          "strip-ansi@6.0.0",
          "ansi-regex@5.0.0"
        ],
        "upgradePath": [
          false,
          "openapi-to-postmanv2@1.2.7",
          "oas-resolver-browser@2.3.3",
          "yargs@15.4.1",
          "cliui@6.0.0",
          "wrap-ansi@6.2.0",
          "string-width@4.2.0",
          "strip-ansi@6.0.0",
          "ansi-regex@5.0.1"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "ansi-regex",
        "version": "5.0.0",
        "severityWithCritical": "high"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P/RL:O/RC:C",
        "alternativeIds": [],
        "creationTime": "2020-10-09T15:19:25.148622Z",
        "credit": [
          "Yeting Li"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\n[codemirror](https://www.npmjs.com/package/codemirror) is a versatile text editor implemented in JavaScript for the browser.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). The vulnerable regular expression is located in https://github.com/codemirror/CodeMirror/blob/cdb228ac736369c685865b122b736cd0d397836c/mode/javascript/javascript.js#L129. The ReDOS vulnerability of the regex is mainly due to the sub-pattern `(\\s|/\\*.*?\\*/)*`\r\n\r\n## PoC by Yeting Li\r\n\r\n```js\r\nvar value = \"async/**//*/**//*/**//*/**//*/**//*/**//*/**//*/**//*/**//*/**//*/**//*/**//*\r\n/**//*/**//*/**//*/**//*/**//*/**//*/**//*/**//*/**//*/**//*/**//*/**//*/**//*/**//*/**//*\r\n/**//*/**//*/**//*/**//*/**//*/**//*/**//*/**//*/**//*/**//*/**//*/**//*/**//*!\"\r\nvar editor = CodeMirror(document.body.getElementsByTagName(\"article\")[0], {\r\nvalue: value,\r\nlineNumbers: true,\r\nmode: \"javascript\",\r\nkeyMap: \"sublime\",\r\nautoCloseBrackets: true,\r\nmatchBrackets: true,\r\nshowCursorWhenSelecting: true,\r\ntheme: \"monokai\",\r\ntabSize: 2\r\n});\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `codemirror` to version 5.58.2 or higher.\n## References\n- [GitHub Commit](https://github.com/codemirror/CodeMirror/commit/55d0333907117c9231ffdf555ae8824705993bbb)\n",
        "disclosureTime": "2020-10-09T15:16:53Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [
          "5.58.2"
        ],
        "id": "SNYK-JS-CODEMIRROR-1016937",
        "identifiers": {
          "CWE": [
            "CWE-400"
          ],
          "GHSA": [
            "GHSA-4gw3-8f77-f72c"
          ],
          "CVE": [
            "CVE-2020-7760"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2022-06-07T13:58:29.019730Z",
        "moduleName": "codemirror",
        "packageManager": "npm",
        "packageName": "codemirror",
        "patches": [],
        "proprietary": true,
        "publicationTime": "2020-10-30T15:07:02Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/codemirror/CodeMirror/commit/55d0333907117c9231ffdf555ae8824705993bbb"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Regular Expression Denial of Service (ReDoS)",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "<5.58.2"
          ]
        },
        "from": [
          "@wso2apim/devportal@1.0.0",
          "graphiql@0.17.5",
          "codemirror@5.52.0"
        ],
        "upgradePath": [
          false,
          "graphiql@0.17.5",
          "codemirror@5.58.2"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "codemirror",
        "version": "5.52.0",
        "severityWithCritical": "medium"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L/E:U/RL:O/RC:R",
        "alternativeIds": [],
        "creationTime": "2020-05-19T09:53:31.970824Z",
        "credit": [
          "ajinabraham"
        ],
        "cvssScore": 3.7,
        "description": "## Overview\n[codemirror](https://www.npmjs.com/package/codemirror) is a versatile text editor implemented in JavaScript for the browser.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). [This regex](https://github.com/codemirror/CodeMirror/blob/master/mode/javascript/javascript.js#L461)\r\n `cx.stream.match(/^([^>]|<.*?>)*>\\s*\\(/, false)` is vulnerable to catastrophic backtracking and can result in regular expression dos.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `codemirror` to version 5.54.0 or higher.\n## References\n- [GitHub Commit](https://github.com/codemirror/CodeMirror/commit/890cb6bea3e73118d69f4e279da1dff57d7e4627)\n- [GitHub Issue](https://github.com/codemirror/CodeMirror/issues/6273)\n",
        "disclosureTime": "2020-05-14T16:24:20Z",
        "exploit": "Unproven",
        "functions": [],
        "fixedIn": [
          "5.54.0"
        ],
        "id": "SNYK-JS-CODEMIRROR-569611",
        "identifiers": {
          "CWE": [
            "CWE-400"
          ],
          "CVE": []
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2021-03-19T10:03:41.823447Z",
        "moduleName": "codemirror",
        "packageManager": "npm",
        "packageName": "codemirror",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2020-05-28T14:28:17Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/codemirror/CodeMirror/commit/890cb6bea3e73118d69f4e279da1dff57d7e4627"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/codemirror/CodeMirror/issues/6273"
          }
        ],
        "severity": "low",
        "socialTrendAlert": false,
        "title": "Regular Expression Denial of Service (ReDoS)",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "<5.54.0"
          ]
        },
        "from": [
          "@wso2apim/devportal@1.0.0",
          "graphiql@0.17.5",
          "codemirror@5.52.0"
        ],
        "upgradePath": [
          false,
          "graphiql@0.17.5",
          "codemirror@5.54.0"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "codemirror",
        "version": "5.52.0",
        "severityWithCritical": "low"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "alternativeIds": [],
        "creationTime": "2021-05-30T09:26:40.480408Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\n[css-what](https://www.npmjs.org/package/css-what) is an a CSS selector parser\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via attribute parsing.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `css-what` to version 5.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/fb55/css-what/commit/4cdaacfd0d4b6fd00614be030da0dea6c2994655)\n- [GitHub PR](https://github.com/fb55/css-what/pull/503)\n- [GitHub Release](https://github.com/fb55/css-what/releases/tag/v5.0.1)\n",
        "disclosureTime": "2021-05-30T09:19:01Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "5.0.1"
        ],
        "id": "SNYK-JS-CSSWHAT-1298035",
        "identifiers": {
          "CWE": [
            "CWE-400"
          ],
          "GHSA": [
            "GHSA-q8pj-2vqx-8ggc"
          ],
          "CVE": [
            "CVE-2021-33587"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2021-07-06T14:08:59.787603Z",
        "moduleName": "css-what",
        "packageManager": "npm",
        "packageName": "css-what",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2021-05-30T13:11:01.486283Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/fb55/css-what/commit/4cdaacfd0d4b6fd00614be030da0dea6c2994655"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/fb55/css-what/pull/503"
          },
          {
            "title": "GitHub Release",
            "url": "https://github.com/fb55/css-what/releases/tag/v5.0.1"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Regular Expression Denial of Service (ReDoS)",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "<5.0.1"
          ]
        },
        "from": [
          "@wso2apim/devportal@1.0.0",
          "react-safe-html@0.6.1",
          "cheerio@0.22.0",
          "css-select@1.2.0",
          "css-what@2.1.3"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "css-what",
        "version": "2.1.3",
        "severityWithCritical": "medium"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
        "alternativeIds": [],
        "creationTime": "2020-10-08T07:47:24.594794Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 5.6,
        "description": "## Overview\n[dompurify](https://github.com/cure53/DOMPurify) is a DOM-only XSS sanitizer for HTML, MathML and SVG.\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS). This occurs because a `serialize-parse` roundtrip does not necessarily return the original DOM tree, and a namespace can change from HTML to MathML, as demonstrated by nesting of FORM elements.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `dompurify` to version 2.0.17 or higher.\n## References\n- [GitHub Commit](https://github.com/cure53/DOMPurify/commit/02724b8eb048dd219d6725b05c3000936f11d62d)\n- [Research Post](https://research.securitum.com/mutation-xss-via-mathml-mutation-dompurify-2-0-17-bypass/)\n",
        "disclosureTime": "2020-10-08T07:43:43Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [
          "2.0.17"
        ],
        "id": "SNYK-JS-DOMPURIFY-1016634",
        "identifiers": {
          "CWE": [
            "CWE-79"
          ],
          "NSP": [
            "1591"
          ],
          "CVE": [
            "CVE-2020-26870"
          ],
          "GHSA": [
            "GHSA-63q7-h895-m982"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2020-12-23T13:31:15.907244Z",
        "moduleName": "dompurify",
        "packageManager": "npm",
        "packageName": "dompurify",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2020-10-08T16:37:46Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/cure53/DOMPurify/commit/02724b8eb048dd219d6725b05c3000936f11d62d"
          },
          {
            "title": "Research Post",
            "url": "https://research.securitum.com/mutation-xss-via-mathml-mutation-dompurify-2-0-17-bypass/"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Cross-site Scripting (XSS)",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "<2.0.17"
          ]
        },
        "from": [
          "@wso2apim/devportal@1.0.0",
          "swagger-ui-react@3.25.0",
          "dompurify@2.0.8"
        ],
        "upgradePath": [
          false,
          "swagger-ui-react@3.25.0",
          "dompurify@2.0.17"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "dompurify",
        "version": "2.0.8",
        "severityWithCritical": "medium"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N",
        "alternativeIds": [],
        "creationTime": "2020-11-03T16:24:10.541266Z",
        "credit": [
          "bananabr"
        ],
        "cvssScore": 6.5,
        "description": "## Overview\n[dompurify](https://github.com/cure53/DOMPurify) is a DOM-only XSS sanitizer for HTML, MathML and SVG.\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS) when converting from SVG namespace.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `dompurify` to version 2.2.2 or higher.\n## References\n- [GitHub Issue](https://github.com/cure53/DOMPurify/issues/482)\n",
        "disclosureTime": "2020-11-03T16:21:00Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "2.2.2"
        ],
        "id": "SNYK-JS-DOMPURIFY-1035544",
        "identifiers": {
          "CWE": [
            "CWE-79"
          ],
          "CVE": []
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2020-12-23T12:43:18.965176Z",
        "moduleName": "dompurify",
        "packageManager": "npm",
        "packageName": "dompurify",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2020-11-03T16:51:43Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/cure53/DOMPurify/issues/482"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Cross-site Scripting (XSS)",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "<2.2.2"
          ]
        },
        "from": [
          "@wso2apim/devportal@1.0.0",
          "swagger-ui-react@3.25.0",
          "dompurify@2.0.8"
        ],
        "upgradePath": [
          false,
          "swagger-ui-react@3.25.0",
          "dompurify@2.2.2"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "dompurify",
        "version": "2.0.8",
        "severityWithCritical": "medium"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N",
        "alternativeIds": [],
        "creationTime": "2022-06-08T14:54:28.100940Z",
        "credit": [
          "PewGrand"
        ],
        "cvssScore": 6.5,
        "description": "## Overview\n[dompurify](https://github.com/cure53/DOMPurify) is a DOM-only XSS sanitizer for HTML, MathML and SVG.\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS). This is due to a bypass of a previous [XSS vulnerability](https://security.snyk.io/vuln/SNYK-JS-DOMPURIFY-1035544).\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `dompurify` to version 2.2.3 or higher.\n## References\n- [Blog](https://www.vidocsecurity.com/blog/hacking-swagger-ui-from-xss-to-account-takeovers/)\n- [Github Commit](https://github.com/cure53/DOMPurify/commit/0c2edeaef6aefe6cbf5c51a0164235e6953afa16)\n- [Github Releases](https://github.com/cure53/DOMPurify/releases/tag/2.2.3)\n",
        "disclosureTime": "2022-06-08T14:53:31Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "2.2.3"
        ],
        "id": "SNYK-JS-DOMPURIFY-2863266",
        "identifiers": {
          "CWE": [
            "CWE-79"
          ],
          "CVE": []
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2022-06-08T15:31:20.536648Z",
        "moduleName": "dompurify",
        "packageManager": "npm",
        "packageName": "dompurify",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2022-06-08T15:31:20.534786Z",
        "references": [
          {
            "title": "Blog",
            "url": "https://www.vidocsecurity.com/blog/hacking-swagger-ui-from-xss-to-account-takeovers/"
          },
          {
            "title": "Github Commit",
            "url": "https://github.com/cure53/DOMPurify/commit/0c2edeaef6aefe6cbf5c51a0164235e6953afa16"
          },
          {
            "title": "Github Releases",
            "url": "https://github.com/cure53/DOMPurify/releases/tag/2.2.3"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Cross-site Scripting (XSS)",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "<2.2.3"
          ]
        },
        "from": [
          "@wso2apim/devportal@1.0.0",
          "swagger-ui-react@3.25.0",
          "dompurify@2.0.8"
        ],
        "upgradePath": [
          false,
          "swagger-ui-react@3.25.0",
          "dompurify@2.2.3"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "dompurify",
        "version": "2.0.8",
        "severityWithCritical": "medium"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:L/I:L/A:L/E:U/RL:O/RC:C",
        "alternativeIds": [],
        "creationTime": "2020-02-11T08:14:56.161770Z",
        "credit": [
          "Oh Ho Kyun"
        ],
        "cvssScore": 5,
        "description": "## Overview\n[@hapi/hoek](https://www.npmjs.com/package/@hapi/hoek) is an utility methods package for the hapi ecosystem\n\nAffected versions of this package are vulnerable to Prototype Pollution. The `clone` function fails to prevent the modification of the Object prototype when passed specially-crafted input.\r\n\r\n*Note:* This issue does not affect `hapi` applications since the framework protects against such malicious inputs. Only applications that use `@hapi/hoek` outside of the `hapi` ecosystem may be vulnerable.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `@hapi/hoek` to version 8.5.1, 9.0.3 or higher.\n## References\n- [GitHub Commit](https://github.com/hapijs/hoek/commit/948baf98634a5c206875b67d11368f133034fa90)\n- [GitHub Issue](https://github.com/hapijs/hoek/issues/352)\n",
        "disclosureTime": "2020-02-10T18:20:22Z",
        "exploit": "Unproven",
        "functions": [
          {
            "functionId": {
              "filePath": "lib/clone.js",
              "className": null,
              "functionName": "internals.clone"
            },
            "version": [
              "<8.5.1",
              ">=9.0.0 <9.0.3"
            ]
          }
        ],
        "fixedIn": [
          "8.5.1",
          "9.0.3"
        ],
        "id": "SNYK-JS-HAPIHOEK-548452",
        "identifiers": {
          "CWE": [
            "CWE-1321"
          ],
          "NSP": [
            "1468"
          ],
          "CVE": [],
          "GHSA": [
            "GHSA-22h7-7wwg-qmgg"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2021-05-06T13:09:33.193272Z",
        "moduleName": "@hapi/hoek",
        "packageManager": "npm",
        "packageName": "@hapi/hoek",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2020-02-11T08:16:01Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/hapijs/hoek/commit/948baf98634a5c206875b67d11368f133034fa90"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/hapijs/hoek/issues/352"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Prototype Pollution",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [
          {
            "functionId": {
              "filePath": "lib/clone.js",
              "functionName": "internals.clone"
            },
            "version": [
              "<8.5.1",
              ">=9.0.0 <9.0.3"
            ]
          }
        ],
        "semver": {
          "vulnerable": [
            "<8.5.1",
            ">=9.0.0 <9.0.3"
          ]
        },
        "from": [
          "@wso2apim/devportal@1.0.0",
          "@hapi/joi@16.1.8",
          "@hapi/topo@3.1.6",
          "@hapi/hoek@8.5.0"
        ],
        "upgradePath": [
          false,
          "@hapi/joi@16.1.8",
          "@hapi/topo@3.1.6",
          "@hapi/hoek@8.5.1"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "@hapi/hoek",
        "version": "8.5.0",
        "severityWithCritical": "medium"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P",
        "alternativeIds": [],
        "creationTime": "2021-08-31T15:49:30.361142Z",
        "credit": [
          "Alessio Della Libera of Snyk Research Team"
        ],
        "cvssScore": 5.6,
        "description": "## Overview\n[json-pointer](https://www.npmjs.com/package/json-pointer) is a set of utilities for JSON pointers described by RFC 6901\n\nAffected versions of this package are vulnerable to Prototype Pollution. A type confusion vulnerability can lead to a bypass of CVE-2020-7709 when the pointer components are arrays.\r\n\r\n### PoC\r\n\r\n```\r\nconst pointer = require('json-pointer');\r\n\r\n// pointer.set({}, ['__proto__', 'polluted'], 'yes')\r\n// console.log(polluted) // ReferenceError: polluted is not defined\r\n\r\npointer.set({}, [['__proto__'], 'polluted'], 'yes')\r\nconsole.log(polluted)\"\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nA fix was pushed into the `master` branch but not yet published.\n## References\n- [GitHub Commit](https://github.com/manuelstofer/json-pointer/commit/47dae1d369a25bd9bdcdbc963b8699b89a882c81)\n- [Snyk Blog](https://snyk.io/blog/remediate-javascript-type-confusion-bypassed-input-validation/)\n- [Vulnerable Code](https://github.com/manuelstofer/json-pointer/blob/master/index.js#L78)\n",
        "disclosureTime": "2021-08-31T15:48:25Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [],
        "id": "SNYK-JS-JSONPOINTER-1577287",
        "identifiers": {
          "CWE": [
            "CWE-1321"
          ],
          "CVE": [
            "CVE-2021-23820"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2022-06-09T15:18:12.256527Z",
        "moduleName": "json-pointer",
        "packageManager": "npm",
        "packageName": "json-pointer",
        "patches": [],
        "proprietary": true,
        "publicationTime": "2021-11-03T16:34:28Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/manuelstofer/json-pointer/commit/47dae1d369a25bd9bdcdbc963b8699b89a882c81"
          },
          {
            "title": "Snyk Blog",
            "url": "https://snyk.io/blog/remediate-javascript-type-confusion-bypassed-input-validation/"
          },
          {
            "title": "Vulnerable Code",
            "url": "https://github.com/manuelstofer/json-pointer/blob/master/index.js%23L78"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Prototype Pollution",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "*"
          ]
        },
        "from": [
          "@wso2apim/devportal@1.0.0",
          "@asyncapi/react-component@0.17.11",
          "openapi-sampler@1.0.0-beta.18",
          "json-pointer@0.6.1"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "json-pointer",
        "version": "0.6.1",
        "severityWithCritical": "medium"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H/RL:O",
        "alternativeIds": [],
        "creationTime": "2019-03-24T09:59:28.172265Z",
        "credit": [
          "Shawn Rasheed",
          "Jens DIetrich"
        ],
        "cvssScore": 5.9,
        "description": "## Overview\n[js-yaml](https://www.npmjs.com/package/js-yaml) is a human-friendly data serialization language.\n\nAffected versions of this package are vulnerable to Denial of Service (DoS). The parsing of a specially crafted YAML file may exhaust the system resources.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `js-yaml` to version 3.13.0 or higher.\n## References\n- [GitHub Commit](https://github.com/nodeca/js-yaml/commit/a567ef3c6e61eb319f0bfc2671d91061afb01235)\n- [GitHub Issue](https://github.com/nodeca/js-yaml/issues/475)\n",
        "disclosureTime": "2019-03-18T21:29:08Z",
        "exploit": "Not Defined",
        "functions": [
          {
            "functionId": {
              "filePath": "lib/js-yaml/loader.js",
              "className": null,
              "functionName": "storeMappingPair"
            },
            "version": [
              ">=3.0.0 <3.13.0"
            ]
          }
        ],
        "fixedIn": [
          "3.13.0"
        ],
        "id": "SNYK-JS-JSYAML-173999",
        "identifiers": {
          "CWE": [
            "CWE-400"
          ],
          "NSP": [
            "788"
          ],
          "CVE": [],
          "GHSA": [
            "GHSA-2pr6-76vf-7546"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2020-12-14T14:41:10.940959Z",
        "moduleName": "js-yaml",
        "packageManager": "npm",
        "packageName": "js-yaml",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2019-03-24T10:00:08Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/nodeca/js-yaml/commit/a567ef3c6e61eb319f0bfc2671d91061afb01235"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/nodeca/js-yaml/issues/475"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Denial of Service (DoS)",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [
          {
            "functionId": {
              "filePath": "lib/js-yaml/loader.js",
              "functionName": "storeMappingPair"
            },
            "version": [
              ">=3.0.0 <3.13.0"
            ]
          }
        ],
        "semver": {
          "vulnerable": [
            ">=3.0.0 <3.13.0"
          ]
        },
        "from": [
          "@wso2apim/devportal@1.0.0",
          "swagger2-postman2-converter@0.0.3",
          "js-yaml@3.10.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "js-yaml",
        "version": "3.10.0",
        "severityWithCritical": "medium"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2019-04-07T11:15:19.826828Z",
        "credit": [
          "Alex Kocharin"
        ],
        "cvssScore": 8.1,
        "description": "## Overview\n[js-yaml](https://www.npmjs.com/package/js-yaml) is a human-friendly data serialization language.\n\nAffected versions of this package are vulnerable to Arbitrary Code Execution. When an object with an executable `toString()` property used as a map key, it will execute that function. This happens only for `load()`, which should not be used with untrusted data anyway. `safeLoad()` is not affected because it can't parse functions.\n## Remediation\nUpgrade `js-yaml` to version 3.13.1 or higher.\n## References\n- [GitHub Commit](https://github.com/nodeca/js-yaml/pull/480/commits/e18afbf1edcafb7add2c4c7b22abc8d6ebc2fa61)\n- [GitHub PR](https://github.com/nodeca/js-yaml/pull/480)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/813)\n",
        "disclosureTime": "2019-04-05T15:54:43Z",
        "exploit": "Not Defined",
        "functions": [
          {
            "functionId": {
              "filePath": "lib/js-yaml/loader.js",
              "className": null,
              "functionName": "storeMappingPair"
            },
            "version": [
              ">2.1.3 <3.13.1"
            ]
          },
          {
            "functionId": {
              "filePath": "lib/js-yaml/loader.js",
              "className": null,
              "functionName": "loadAll.storeMappingPair"
            },
            "version": [
              ">1.0.3 <=2.1.3"
            ]
          }
        ],
        "fixedIn": [
          "3.13.1"
        ],
        "id": "SNYK-JS-JSYAML-174129",
        "identifiers": {
          "CWE": [
            "CWE-94"
          ],
          "NSP": [
            "813"
          ],
          "CVE": [],
          "GHSA": [
            "GHSA-8j8c-7jfh-h6hx"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2020-12-14T14:41:35.880966Z",
        "moduleName": "js-yaml",
        "packageManager": "npm",
        "packageName": "js-yaml",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2019-04-07T15:54:43Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/nodeca/js-yaml/pull/480/commits/e18afbf1edcafb7add2c4c7b22abc8d6ebc2fa61"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/nodeca/js-yaml/pull/480"
          },
          {
            "title": "NPM Security Advisory",
            "url": "https://www.npmjs.com/advisories/813"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Arbitrary Code Execution",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [
          {
            "functionId": {
              "filePath": "lib/js-yaml/loader.js",
              "functionName": "storeMappingPair"
            },
            "version": [
              ">2.1.3 <3.13.1"
            ]
          },
          {
            "functionId": {
              "filePath": "lib/js-yaml/loader.js",
              "functionName": "loadAll.storeMappingPair"
            },
            "version": [
              ">1.0.3 <=2.1.3"
            ]
          }
        ],
        "semver": {
          "vulnerable": [
            "<3.13.1"
          ]
        },
        "from": [
          "@wso2apim/devportal@1.0.0",
          "swagger2-postman2-converter@0.0.3",
          "js-yaml@3.10.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "js-yaml",
        "version": "3.10.0",
        "severityWithCritical": "high"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
        "alternativeIds": [],
        "creationTime": "2019-06-19T12:04:21.040000Z",
        "credit": [
          "Snyk Security Team"
        ],
        "cvssScore": 7.3,
        "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The function `defaultsDeep` could be tricked into adding or modifying properties of `Object.prototype` using a `constructor` payload.\r\n\r\n## PoC by Snyk\r\n```\r\nconst mergeFn = require('lodash').defaultsDeep;\r\nconst payload = '{\"constructor\": {\"prototype\": {\"a0\": true}}}'\r\n\r\nfunction check() {\r\n    mergeFn({}, JSON.parse(payload));\r\n    if (({})[`a0`] === true) {\r\n        console.log(`Vulnerable to Prototype Pollution via ${payload}`);\r\n    }\r\n  }\r\n\r\ncheck();\r\n```\r\n\r\nFor more information, check out our [blog post](https://snyk.io/blog/snyk-research-team-discovers-severe-prototype-pollution-security-vulnerabilities-affecting-all-versions-of-lodash/)\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.12 or higher.\n## References\n- [GitHub Issue](https://github.com/lodash/lodash/issues/4348)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4336)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4355)\n- [GitHub PR](https://github.com/sailshq/lodash/pull/1)\n- [Node Security Advisory](https://www.npmjs.com/advisories/1065)\n- [Snyk Blog](https://snyk.io/blog/snyk-research-team-discovers-severe-prototype-pollution-security-vulnerabilities-affecting-all-versions-of-lodash/)\n",
        "disclosureTime": "2019-06-19T11:45:02Z",
        "exploit": "Proof of Concept",
        "functions": [
          {
            "functionId": {
              "filePath": "lodash.js",
              "className": null,
              "functionName": "runInContext.customDefaultsMerge"
            },
            "version": [
              ">=4.17.3 <4.17.12"
            ]
          }
        ],
        "fixedIn": [
          "4.17.12"
        ],
        "id": "SNYK-JS-LODASH-450202",
        "identifiers": {
          "CWE": [
            "CWE-400"
          ],
          "NSP": [
            "1065"
          ],
          "CVE": [
            "CVE-2019-10744"
          ],
          "GHSA": [
            "GHSA-jf85-cpcp-j695"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2022-04-05T12:25:20.940478Z",
        "moduleName": "lodash",
        "packageManager": "npm",
        "packageName": "lodash",
        "patches": [
          {
            "comments": [],
            "id": "patch:SNYK-JS-LODASH-450202:0",
            "modificationTime": "2019-12-03T11:40:45.719849Z",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/lodash/20190702/lodash_20190702_0_0_1f8ea07746963a535385a5befc19fa687a627d2b.patch"
            ],
            "version": "=4.17.11"
          }
        ],
        "proprietary": true,
        "publicationTime": "2019-07-02T11:45:01Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/lodash/lodash/issues/4348"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/lodash/lodash/pull/4336"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/lodash/lodash/pull/4355"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/sailshq/lodash/pull/1"
          },
          {
            "title": "Node Security Advisory",
            "url": "https://www.npmjs.com/advisories/1065"
          },
          {
            "title": "Snyk Blog",
            "url": "https://snyk.io/blog/snyk-research-team-discovers-severe-prototype-pollution-security-vulnerabilities-affecting-all-versions-of-lodash/"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Prototype Pollution",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [
          {
            "functionId": {
              "filePath": "lodash.js",
              "functionName": "runInContext.customDefaultsMerge"
            },
            "version": [
              ">=4.17.3 <4.17.12"
            ]
          }
        ],
        "semver": {
          "vulnerable": [
            "<4.17.12"
          ]
        },
        "from": [
          "@wso2apim/devportal@1.0.0",
          "swagger2-postman2-converter@0.0.3",
          "lodash@4.17.5"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "lodash",
        "version": "4.17.5",
        "severityWithCritical": "high"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P",
        "alternativeIds": [],
        "creationTime": "2019-02-03T09:06:37.726000Z",
        "credit": [
          "asgerf"
        ],
        "cvssScore": 7.3,
        "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The functions `merge`, `mergeWith`, and `defaultsDeep` could be tricked into adding or modifying properties of `Object.prototype`. This is due to an incomplete fix to `CVE-2018-3721`.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.11 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/90e6199a161b6445b01454517b40ef65ebecd2ad)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4337)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/1066)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/1068)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/1071)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/782)\n- [POC: HackerOne Report](https://hackerone.com/reports/380873)\n",
        "disclosureTime": "2018-08-31T18:21:00Z",
        "exploit": "Proof of Concept",
        "functions": [
          {
            "functionId": {
              "filePath": "lodash.js",
              "className": null,
              "functionName": "safeGet"
            },
            "version": [
              ">=4.17.5 <4.17.11"
            ]
          },
          {
            "functionId": {
              "filePath": "lodash.js",
              "className": null,
              "functionName": "runInContext.baseMerge"
            },
            "version": [
              ">=4.0.0 <4.17.5"
            ]
          },
          {
            "functionId": {
              "filePath": "lodash.js",
              "className": null,
              "functionName": "runInContext.baseMergeDeep"
            },
            "version": [
              ">=4.0.0 <4.17.5"
            ]
          },
          {
            "functionId": {
              "filePath": "lodash.js",
              "className": null,
              "functionName": "runInContext.assignMergeValue"
            },
            "version": [
              ">=4.0.0 <4.17.5"
            ]
          },
          {
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "runInContext.baseMerge"
            },
            "version": [
              ">=3.0.0 <4.0.0"
            ]
          },
          {
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "runInContext.baseMergeDeep"
            },
            "version": [
              ">=3.0.0 <4.0.0"
            ]
          },
          {
            "functionId": {
              "filePath": "lodash.js",
              "className": null,
              "functionName": "runInContext.mergeDefaults"
            },
            "version": [
              ">=4.0.0 <4.17.3"
            ]
          },
          {
            "functionId": {
              "filePath": "lodash.js",
              "className": null,
              "functionName": "runInContext.merge"
            },
            "version": [
              ">=2.0.0 <3.0.0"
            ]
          },
          {
            "functionId": {
              "filePath": "lodash.js",
              "className": null,
              "functionName": "merge"
            },
            "version": [
              ">=0.9.0 <1.0.0"
            ]
          },
          {
            "functionId": {
              "filePath": "dist/lodash.js",
              "className": null,
              "functionName": "merge"
            },
            "version": [
              ">=1.0.0 <1.0.3"
            ]
          },
          {
            "functionId": {
              "filePath": "dist/lodash.js",
              "className": null,
              "functionName": "runInContext.merge"
            },
            "version": [
              ">=1.1.0 <2.0.0"
            ]
          }
        ],
        "fixedIn": [
          "4.17.11"
        ],
        "id": "SNYK-JS-LODASH-73638",
        "identifiers": {
          "CWE": [
            "CWE-400"
          ],
          "NSP": [
            "782",
            "1066",
            "1068",
            "1071"
          ],
          "CVE": [
            "CVE-2018-16487"
          ],
          "GHSA": [
            "GHSA-4xc9-xhrj-v574"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2022-04-05T12:27:17.510305Z",
        "moduleName": "lodash",
        "packageManager": "npm",
        "packageName": "lodash",
        "patches": [],
        "proprietary": true,
        "publicationTime": "2019-02-01T18:21:00Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/lodash/lodash/commit/90e6199a161b6445b01454517b40ef65ebecd2ad"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/lodash/lodash/pull/4337"
          },
          {
            "title": "NPM Security Advisory",
            "url": "https://www.npmjs.com/advisories/1066"
          },
          {
            "title": "NPM Security Advisory",
            "url": "https://www.npmjs.com/advisories/1068"
          },
          {
            "title": "NPM Security Advisory",
            "url": "https://www.npmjs.com/advisories/1071"
          },
          {
            "title": "NPM Security Advisory",
            "url": "https://www.npmjs.com/advisories/782"
          },
          {
            "title": "POC: HackerOne Report",
            "url": "https://hackerone.com/reports/380873"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Prototype Pollution",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [
          {
            "functionId": {
              "filePath": "lodash.js",
              "functionName": "safeGet"
            },
            "version": [
              ">=4.17.5 <4.17.11"
            ]
          },
          {
            "functionId": {
              "filePath": "lodash.js",
              "functionName": "runInContext.baseMerge"
            },
            "version": [
              ">=4.0.0 <4.17.5"
            ]
          },
          {
            "functionId": {
              "filePath": "lodash.js",
              "functionName": "runInContext.baseMergeDeep"
            },
            "version": [
              ">=4.0.0 <4.17.5"
            ]
          },
          {
            "functionId": {
              "filePath": "lodash.js",
              "functionName": "runInContext.assignMergeValue"
            },
            "version": [
              ">=4.0.0 <4.17.5"
            ]
          },
          {
            "functionId": {
              "filePath": "index.js",
              "functionName": "runInContext.baseMerge"
            },
            "version": [
              ">=3.0.0 <4.0.0"
            ]
          },
          {
            "functionId": {
              "filePath": "index.js",
              "functionName": "runInContext.baseMergeDeep"
            },
            "version": [
              ">=3.0.0 <4.0.0"
            ]
          },
          {
            "functionId": {
              "filePath": "lodash.js",
              "functionName": "runInContext.mergeDefaults"
            },
            "version": [
              ">=4.0.0 <4.17.3"
            ]
          },
          {
            "functionId": {
              "filePath": "lodash.js",
              "functionName": "runInContext.merge"
            },
            "version": [
              ">=2.0.0 <3.0.0"
            ]
          },
          {
            "functionId": {
              "filePath": "lodash.js",
              "functionName": "merge"
            },
            "version": [
              ">=0.9.0 <1.0.0"
            ]
          },
          {
            "functionId": {
              "filePath": "dist/lodash.js",
              "functionName": "merge"
            },
            "version": [
              ">=1.0.0 <1.0.3"
            ]
          },
          {
            "functionId": {
              "filePath": "dist/lodash.js",
              "functionName": "runInContext.merge"
            },
            "version": [
              ">=1.1.0 <2.0.0"
            ]
          }
        ],
        "semver": {
          "vulnerable": [
            "<4.17.11"
          ]
        },
        "from": [
          "@wso2apim/devportal@1.0.0",
          "swagger2-postman2-converter@0.0.3",
          "lodash@4.17.5"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "lodash",
        "version": "4.17.5",
        "severityWithCritical": "high"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:H/UI:N/S:U/C:N/I:N/A:H/E:P",
        "alternativeIds": [],
        "creationTime": "2019-02-03T09:18:05.060741Z",
        "credit": [
          "cristianstaicu"
        ],
        "cvssScore": 4.4,
        "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). It parses dates using regex strings, which may cause a slowdown of 2 seconds per 50k characters.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `lodash` to version 4.17.11 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/5c08f18d365b64063bfbfa686cbb97cdd6267347)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4450)\n- [POC: GitHub Issue](https://github.com/lodash/lodash/issues/3359)\n",
        "disclosureTime": "2017-09-05T09:14:29Z",
        "exploit": "Proof of Concept",
        "functions": [
          {
            "functionId": {
              "filePath": "lodash.js",
              "className": null,
              "functionName": "hasUnicodeWord"
            },
            "version": [
              ">=4.15.0 <4.17.11"
            ]
          }
        ],
        "fixedIn": [
          "4.17.11"
        ],
        "id": "SNYK-JS-LODASH-73639",
        "identifiers": {
          "CWE": [
            "CWE-185"
          ],
          "CVE": [
            "CVE-2019-1010266"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2022-04-05T12:27:32.267901Z",
        "moduleName": "lodash",
        "packageManager": "npm",
        "packageName": "lodash",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2019-04-05T09:14:22Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/lodash/lodash/commit/5c08f18d365b64063bfbfa686cbb97cdd6267347"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/lodash/lodash/pull/4450"
          },
          {
            "title": "POC: GitHub Issue",
            "url": "https://github.com/lodash/lodash/issues/3359"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Regular Expression Denial of Service (ReDoS)",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [
          {
            "functionId": {
              "filePath": "lodash.js",
              "functionName": "hasUnicodeWord"
            },
            "version": [
              ">=4.15.0 <4.17.11"
            ]
          }
        ],
        "semver": {
          "vulnerable": [
            "<4.17.11"
          ]
        },
        "from": [
          "@wso2apim/devportal@1.0.0",
          "swagger2-postman2-converter@0.0.3",
          "lodash@4.17.5"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "lodash",
        "version": "4.17.5",
        "severityWithCritical": "medium"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:H/E:P/RL:U/RC:C",
        "alternativeIds": [],
        "creationTime": "2022-03-27T14:00:23.274733Z",
        "credit": [
          "posix"
        ],
        "cvssScore": 8.2,
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Prototype Pollution. The function `zipObjectDeep` can be tricked into adding or modifying properties of the Object prototype. These properties will be present on all objects.\r\n\r\n## PoC\r\n```\r\nconst _ = require('lodash');\r\n_.zipObjectDeep(['__proto__.z'],[123])\r\nconsole.log(z) // 123\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash-es` to version 4.17.20 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c84fe82760fb2d3e03a63379b297a1cc1a2fce12)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4759)\n",
        "disclosureTime": "2020-04-27T22:14:18Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [
          "4.17.20"
        ],
        "id": "SNYK-JS-LODASHES-2434283",
        "identifiers": {
          "CWE": [
            "CWE-400"
          ],
          "NSP": [
            "1523"
          ],
          "CVE": [
            "CVE-2020-8203"
          ],
          "GHSA": [
            "GHSA-p6mc-m468-83gw"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2022-04-05T12:28:33.431814Z",
        "moduleName": "lodash-es",
        "packageManager": "npm",
        "packageName": "lodash-es",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2020-04-28T14:59:14Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/lodash/lodash/commit/c84fe82760fb2d3e03a63379b297a1cc1a2fce12"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/lodash/lodash/pull/4759"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Prototype Pollution",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "<4.17.20"
          ]
        },
        "from": [
          "@wso2apim/devportal@1.0.0",
          "swagger-ui-react@3.25.0",
          "redux@3.7.2",
          "lodash-es@4.17.15"
        ],
        "upgradePath": [
          false,
          "swagger-ui-react@3.25.0",
          "redux@3.7.2",
          "lodash-es@4.17.20"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "lodash-es",
        "version": "4.17.15",
        "severityWithCritical": "high"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C",
        "alternativeIds": [],
        "creationTime": "2022-03-27T14:00:56.359552Z",
        "credit": [
          "Marc Hassan"
        ],
        "cvssScore": 7.2,
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Command Injection via `template`.\r\n\r\n### PoC\r\n```js\r\nvar _ = require('lodash');\r\n\r\n_.template('', { variable: '){console.log(process.env)}; with(obj' })()\r\n```\n## Remediation\nUpgrade `lodash-es` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c)\n- [Vulnerable Code](https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js#L14851)\n",
        "disclosureTime": "2020-11-17T13:02:10Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [
          "4.17.21"
        ],
        "id": "SNYK-JS-LODASHES-2434284",
        "identifiers": {
          "CWE": [
            "CWE-78"
          ],
          "GHSA": [
            "GHSA-35jh-r3h4-6jhm"
          ],
          "CVE": [
            "CVE-2021-23337"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2022-04-05T12:28:18.096614Z",
        "moduleName": "lodash-es",
        "packageManager": "npm",
        "packageName": "lodash-es",
        "patches": [],
        "proprietary": true,
        "publicationTime": "2021-02-15T11:50:50Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c"
          },
          {
            "title": "Vulnerable Code",
            "url": "https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js%23L14851"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Command Injection",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "<4.17.21"
          ]
        },
        "from": [
          "@wso2apim/devportal@1.0.0",
          "swagger-ui-react@3.25.0",
          "redux@3.7.2",
          "lodash-es@4.17.15"
        ],
        "upgradePath": [
          false,
          "swagger-ui-react@3.25.0",
          "redux@3.7.2",
          "lodash-es@4.17.21"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "lodash-es",
        "version": "4.17.15",
        "severityWithCritical": "high"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
        "alternativeIds": [],
        "creationTime": "2022-03-27T14:01:59.637773Z",
        "credit": [
          "awarau"
        ],
        "cvssScore": 7.3,
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `setWith` and `set` functions.\r\n\r\n## PoC by awarau\r\n* Create a JS file with this contents:\r\n```\r\nlod = require('lodash')\r\nlod.setWith({}, \"__proto__[test]\", \"123\")\r\nlod.set({}, \"__proto__[test2]\", \"456\")\r\nconsole.log(Object.prototype)\r\n```\r\n* Execute it with `node`\r\n* Observe that `test` and `test2` is now in the `Object.prototype`.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash-es` to version 4.17.20 or higher.\n## References\n- [HackerOne Report](https://hackerone.com/reports/864701)\n",
        "disclosureTime": "2020-08-21T10:34:29Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [
          "4.17.20"
        ],
        "id": "SNYK-JS-LODASHES-2434285",
        "identifiers": {
          "CWE": [
            "CWE-400"
          ],
          "CVE": []
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2022-05-25T11:18:25.335427Z",
        "moduleName": "lodash-es",
        "packageManager": "npm",
        "packageName": "lodash-es",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2020-08-21T12:53:03Z",
        "references": [
          {
            "title": "HackerOne Report",
            "url": "https://hackerone.com/reports/864701"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Prototype Pollution",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "<4.17.20"
          ]
        },
        "from": [
          "@wso2apim/devportal@1.0.0",
          "swagger-ui-react@3.25.0",
          "redux@3.7.2",
          "lodash-es@4.17.15"
        ],
        "upgradePath": [
          false,
          "swagger-ui-react@3.25.0",
          "redux@3.7.2",
          "lodash-es@4.17.20"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "lodash-es",
        "version": "4.17.15",
        "severityWithCritical": "high"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
        "alternativeIds": [],
        "creationTime": "2022-03-27T14:03:57.745561Z",
        "credit": [
          "Liyuan Chen"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `toNumber`, `trim` and `trimEnd` functions.\r\n\r\n### POC\r\n```\r\nvar lo = require('lodash');\r\n\r\nfunction build_blank (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\n\r\nvar s = build_blank(50000)\r\nvar time0 = Date.now();\r\nlo.trim(s)\r\nvar time_cost0 = Date.now() - time0;\r\nconsole.log(\"time_cost0: \" + time_cost0)\r\n\r\nvar time1 = Date.now();\r\nlo.toNumber(s)\r\nvar time_cost1 = Date.now() - time1;\r\nconsole.log(\"time_cost1: \" + time_cost1)\r\n\r\nvar time2 = Date.now();\r\nlo.trimEnd(s)\r\nvar time_cost2 = Date.now() - time2;\r\nconsole.log(\"time_cost2: \" + time_cost2)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `lodash-es` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a)\n- [GitHub Fix PR](https://github.com/lodash/lodash/pull/5065)\n",
        "disclosureTime": "2020-10-16T16:47:34Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [
          "4.17.21"
        ],
        "id": "SNYK-JS-LODASHES-2434289",
        "identifiers": {
          "CWE": [
            "CWE-400"
          ],
          "CVE": [
            "CVE-2020-28500"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2022-04-05T12:26:11.286253Z",
        "moduleName": "lodash-es",
        "packageManager": "npm",
        "packageName": "lodash-es",
        "patches": [],
        "proprietary": true,
        "publicationTime": "2021-02-15T11:50:49Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a"
          },
          {
            "title": "GitHub Fix PR",
            "url": "https://github.com/lodash/lodash/pull/5065"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Regular Expression Denial of Service (ReDoS)",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "<4.17.21"
          ]
        },
        "from": [
          "@wso2apim/devportal@1.0.0",
          "swagger-ui-react@3.25.0",
          "redux@3.7.2",
          "lodash-es@4.17.15"
        ],
        "upgradePath": [
          false,
          "swagger-ui-react@3.25.0",
          "redux@3.7.2",
          "lodash-es@4.17.21"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "lodash-es",
        "version": "4.17.15",
        "severityWithCritical": "medium"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C",
        "alternativeIds": [],
        "creationTime": "2021-03-22T12:03:39.360085Z",
        "credit": [
          "Marc Hassan"
        ],
        "cvssScore": 7.2,
        "description": "## Overview\n[lodash.template](https://www.npmjs.com/package/lodash.template) is a The Lodash method _.template exported as a Node.js module.\n\nAffected versions of this package are vulnerable to Command Injection via `template`.\r\n\r\n### PoC\r\n```js\r\nvar _ = require('lodash');\r\n\r\n_.template('', { variable: '){console.log(process.env)}; with(obj' })()\r\n```\n## Remediation\nThere is no fixed version for `lodash.template`.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c)\n- [Vulnerable Code](https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js#L14851)\n",
        "disclosureTime": "2020-11-17T13:02:10Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [],
        "id": "SNYK-JS-LODASHTEMPLATE-1088054",
        "identifiers": {
          "CWE": [
            "CWE-78"
          ],
          "GHSA": [
            "GHSA-35jh-r3h4-6jhm"
          ],
          "CVE": [
            "CVE-2021-23337"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2022-04-05T12:28:18.096614Z",
        "moduleName": "lodash.template",
        "packageManager": "npm",
        "packageName": "lodash.template",
        "patches": [],
        "proprietary": true,
        "publicationTime": "2021-02-15T11:50:50Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c"
          },
          {
            "title": "Vulnerable Code",
            "url": "https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js%23L14851"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Command Injection",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "*"
          ]
        },
        "from": [
          "@wso2apim/devportal@1.0.0",
          "swagger-ui-react@3.25.0",
          "remarkable@1.7.4",
          "autolinker@0.28.1",
          "gulp-header@1.8.12",
          "lodash.template@4.5.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "lodash.template",
        "version": "4.5.0",
        "severityWithCritical": "high"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H/E:U/RL:O/RC:R",
        "alternativeIds": [],
        "creationTime": "2020-07-13T15:50:25.938503Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 5.9,
        "description": "## Overview\n[marked](https://marked.js.org/) is a low-level compiler for parsing markdown without caching or blocking for long periods of time.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). The `em` regex within `src/rules.js` file have multiple unused capture groups which could lead to a denial of service attack if user input is reachable.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `marked` to version 1.1.1 or higher.\n## References\n- [GitHub Commit](https://github.com/markedjs/marked/commit/bd4f8c464befad2b304d51e33e89e567326e62e0)\n",
        "disclosureTime": "2020-07-13T15:47:58Z",
        "exploit": "Unproven",
        "functions": [],
        "fixedIn": [
          "1.1.1"
        ],
        "id": "SNYK-JS-MARKED-584281",
        "identifiers": {
          "CWE": [
            "CWE-1333"
          ],
          "CVE": []
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2021-09-23T16:58:42.707391Z",
        "moduleName": "marked",
        "packageManager": "npm",
        "packageName": "marked",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2020-07-27T15:44:09Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/markedjs/marked/commit/bd4f8c464befad2b304d51e33e89e567326e62e0"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Regular Expression Denial of Service (ReDoS)",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "<1.1.1"
          ]
        },
        "from": [
          "@wso2apim/devportal@1.0.0",
          "graphql-to-postman@0.0.6",
          "postman-collection@3.5.5",
          "marked@0.7.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "marked",
        "version": "0.7.0",
        "severityWithCritical": "medium"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P",
        "alternativeIds": [],
        "creationTime": "2020-11-22T15:18:43.156000Z",
        "credit": [
          "Alessio Della Libera (d3lla)"
        ],
        "cvssScore": 7.3,
        "description": "## Overview\n[merge](https://github.com/yeikos/js.merge) is a library that allows you to merge multiple objects into one, optionally creating a new cloned object. Similar to the jQuery.extend but more flexible. Works in Node.js and the browser.\n\nAffected versions of this package are vulnerable to Prototype Pollution via `_recursiveMerge `. \r\n\r\n## PoC: \r\n\r\n```javascript\r\nconst merge = require('merge');\r\n\r\nconst payload2 = JSON.parse('{\"x\": {\"__proto__\":{\"polluted\":\"yes\"}}}');\r\n\r\nlet obj1 = {x: {y:1}};\r\n\r\nconsole.log(\"Before : \" + obj1.polluted);\r\nmerge.recursive(obj1, payload2);\r\nconsole.log(\"After : \" + obj1.polluted);\r\nconsole.log(\"After : \" + {}.polluted);\r\n```\r\n\r\nOutput:\r\n```console\r\nBefore : undefined\r\nAfter : yes\r\nAfter : yes\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `merge` to version 2.1.1 or higher.\n## References\n- [GitHub Commit](https://github.com/yeikos/js.merge/commit/7b0ddc2701d813f2ba289b32d6a4b9d4cc235fb4)\n- [Vulnerable Code](https://github.com/yeikos/js.merge/blob/master/src/index.ts#L64)\n",
        "disclosureTime": "2020-11-22T15:13:53Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [
          "2.1.1"
        ],
        "id": "SNYK-JS-MERGE-1042987",
        "identifiers": {
          "CWE": [
            "CWE-400"
          ],
          "GHSA": [
            "GHSA-7wpw-2hjm-89gp"
          ],
          "CVE": [
            "CVE-2020-28499"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2021-07-06T14:08:07.366296Z",
        "moduleName": "merge",
        "packageManager": "npm",
        "packageName": "merge",
        "patches": [],
        "proprietary": true,
        "publicationTime": "2021-02-23T16:42:39.612000Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/yeikos/js.merge/commit/7b0ddc2701d813f2ba289b32d6a4b9d4cc235fb4"
          },
          {
            "title": "Vulnerable Code",
            "url": "https://github.com/yeikos/js.merge/blob/master/src/index.ts%23L64"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Prototype Pollution",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "<2.1.1"
          ]
        },
        "from": [
          "@wso2apim/devportal@1.0.0",
          "@asyncapi/react-component@0.17.11",
          "merge@2.1.0"
        ],
        "upgradePath": [
          false,
          "@asyncapi/react-component@0.17.11",
          "merge@2.1.1"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "merge",
        "version": "2.1.0",
        "severityWithCritical": "high"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "alternativeIds": [],
        "creationTime": "2021-09-17T14:35:00.993728Z",
        "credit": [
          "Yeting Li"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) when parsing crafted invalid CSS nth-checks, due to the sub-pattern `\\s*(?:([+-]?)\\s*(\\d+))?` in `RE_NTH_ELEMENT` with quantified overlapping adjacency.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `nth-check` to version 2.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/fb55/nth-check/commit/9894c1d2010870c351f66c6f6efcf656e26bb726)\n",
        "disclosureTime": "2021-09-17T14:32:39Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [
          "2.0.1"
        ],
        "id": "SNYK-JS-NTHCHECK-1586032",
        "identifiers": {
          "CWE": [
            "CWE-1333"
          ],
          "CVE": [
            "CVE-2021-3803"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2022-04-13T10:42:22.281450Z",
        "moduleName": "nth-check",
        "packageManager": "npm",
        "packageName": "nth-check",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2021-09-17T15:20:51Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/fb55/nth-check/commit/9894c1d2010870c351f66c6f6efcf656e26bb726"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Regular Expression Denial of Service (ReDoS)",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "<2.0.1"
          ]
        },
        "from": [
          "@wso2apim/devportal@1.0.0",
          "react-safe-html@0.6.1",
          "cheerio@0.22.0",
          "css-select@1.2.0",
          "nth-check@1.0.2"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "nth-check",
        "version": "1.0.2",
        "severityWithCritical": "high"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
        "alternativeIds": [],
        "creationTime": "2021-04-05T10:34:06.518802Z",
        "credit": [
          "Yeting Li"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) during source map parsing.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}/*# sourceMappingURL=\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \" \"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 7.0.36, 8.2.10 or higher.\n## References\n- [Fix Commit #1](https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5)\n- [Fix Commit #2](https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4)\n- [GitHub Advisory](https://github.com/advisories/GHSA-hwj9-h5mp-3pm3)\n",
        "disclosureTime": "2021-04-05T10:32:44Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [
          "7.0.36",
          "8.2.10"
        ],
        "id": "SNYK-JS-POSTCSS-1090595",
        "identifiers": {
          "CWE": [
            "CWE-400"
          ],
          "GHSA": [
            "GHSA-hwj9-h5mp-3pm3"
          ],
          "CVE": [
            "CVE-2021-23368"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2021-08-08T13:56:55.030348Z",
        "moduleName": "postcss",
        "packageManager": "npm",
        "packageName": "postcss",
        "patches": [],
        "proprietary": true,
        "publicationTime": "2021-04-12T13:07:14Z",
        "references": [
          {
            "title": "Fix Commit #1",
            "url": "https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5"
          },
          {
            "title": "Fix Commit #2",
            "url": "https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4"
          },
          {
            "title": "GitHub Advisory",
            "url": "https://github.com/advisories/GHSA-hwj9-h5mp-3pm3"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Regular Expression Denial of Service (ReDoS)",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            ">=7.0.0 <7.0.36",
            ">=8.0.0 <8.2.10"
          ]
        },
        "from": [
          "@wso2apim/devportal@1.0.0",
          "swagger2-postman2-converter@0.0.3",
          "postman-collection@3.6.6",
          "sanitize-html@1.20.1",
          "postcss@7.0.26"
        ],
        "upgradePath": [
          false,
          "swagger2-postman2-converter@0.0.3",
          "postman-collection@3.6.6",
          "sanitize-html@1.20.1",
          "postcss@7.0.36"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "postcss",
        "version": "7.0.26",
        "severityWithCritical": "medium"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
        "alternativeIds": [],
        "creationTime": "2021-04-26T15:22:41.908415Z",
        "credit": [
          "Yeting Li"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `getAnnotationURL()` and `loadAnnotation()` in `lib/previous-map.js`. The vulnerable regexes are caused mainly by the sub-pattern `\\/\\*\\s*# sourceMappingURL=(.*)`.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/*# sourceMappingURL=\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 8.2.13, 7.0.36 or higher.\n## References\n- [GitHub Commit](https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956)\n",
        "disclosureTime": "2021-04-26T15:09:50Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [
          "8.2.13",
          "7.0.36"
        ],
        "id": "SNYK-JS-POSTCSS-1255640",
        "identifiers": {
          "CWE": [
            "CWE-400"
          ],
          "CVE": [
            "CVE-2021-23382"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2021-08-08T13:56:55.050563Z",
        "moduleName": "postcss",
        "packageManager": "npm",
        "packageName": "postcss",
        "patches": [],
        "proprietary": true,
        "publicationTime": "2021-04-26T16:18:39Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Regular Expression Denial of Service (ReDoS)",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            ">=8.0.0 <8.2.13",
            "<7.0.36"
          ]
        },
        "from": [
          "@wso2apim/devportal@1.0.0",
          "swagger2-postman2-converter@0.0.3",
          "postman-collection@3.6.6",
          "sanitize-html@1.20.1",
          "postcss@7.0.26"
        ],
        "upgradePath": [
          false,
          "swagger2-postman2-converter@0.0.3",
          "postman-collection@3.6.6",
          "sanitize-html@1.20.1",
          "postcss@7.0.36"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "postcss",
        "version": "7.0.26",
        "severityWithCritical": "medium"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:U/RL:O/RC:R",
        "alternativeIds": [],
        "creationTime": "2021-09-03T13:28:34.208880Z",
        "credit": [
          "ready-research"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in `source/trim.js` within variable `ws`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `ramda` to version 0.27.2 or higher.\n## References\n- [Github Commit](https://github.com/ramda/ramda/pull/3212/commits/94d057032c9b3ecf26d9842fbb12c981bda29f4b)\n- [GitHub Commit](https://github.com/ramda/ramda/commit/37af6ae2ca8b94656996dd27fb0a1f208d69134e)\n- [GitHub PR](https://github.com/ramda/ramda/pull/3177)\n",
        "disclosureTime": "2021-09-03T13:26:28Z",
        "exploit": "Unproven",
        "functions": [],
        "fixedIn": [
          "0.27.2"
        ],
        "id": "SNYK-JS-RAMDA-1582370",
        "identifiers": {
          "CWE": [
            "CWE-400"
          ],
          "CVE": []
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2022-01-19T14:54:18.169246Z",
        "moduleName": "ramda",
        "packageManager": "npm",
        "packageName": "ramda",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2021-10-28T15:08:22Z",
        "references": [
          {
            "title": "Github Commit",
            "url": "https://github.com/ramda/ramda/pull/3212/commits/94d057032c9b3ecf26d9842fbb12c981bda29f4b"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/ramda/ramda/commit/37af6ae2ca8b94656996dd27fb0a1f208d69134e"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/ramda/ramda/pull/3177"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Regular Expression Denial of Service (ReDoS)",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "<0.27.2"
          ]
        },
        "from": [
          "@wso2apim/devportal@1.0.0",
          "react-markdown@5.0.3",
          "html-to-react@1.4.5",
          "ramda@0.27.1"
        ],
        "upgradePath": [
          false,
          "react-markdown@5.0.3",
          "html-to-react@1.4.5",
          "ramda@0.27.2"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "ramda",
        "version": "0.27.1",
        "severityWithCritical": "medium"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:C",
        "alternativeIds": [],
        "creationTime": "2020-10-29T10:53:41.363786Z",
        "credit": [
          "Yeting Li",
          "Miguel de Moura"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n[ua-parser-js](https://github.com/faisalman/ua-parser-js) is a lightweight JavaScript-based user-agent string parser.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in multiple regexes (see linked commit for more info).\r\n\r\n## Proof of Concept by Miguel de Moura\r\n``` jsconst ua_parser = require('ua-parser-js');const N_SIZE = 5000;const MALICIOUS_UA = `android;;Trio${' '.repeat(N_SIZE)}buil`;// Trigger ReDoSua_parser(MALICIOUS_UA);```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `ua-parser-js` to version 0.7.23 or higher.\n## References\n- [GitHub Commit](https://github.com/faisalman/ua-parser-js/commit/6d1f26df051ba681463ef109d36c9cf0f7e32b18)\n",
        "disclosureTime": "2020-10-29T10:53:18Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [
          "0.7.23"
        ],
        "id": "SNYK-JS-UAPARSERJS-1023599",
        "identifiers": {
          "CWE": [
            "CWE-400"
          ],
          "CVE": [
            "CVE-2020-7793"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2021-06-21T19:28:47.413445Z",
        "moduleName": "ua-parser-js",
        "packageManager": "npm",
        "packageName": "ua-parser-js",
        "patches": [],
        "proprietary": true,
        "publicationTime": "2020-12-13T15:57:49Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/faisalman/ua-parser-js/commit/6d1f26df051ba681463ef109d36c9cf0f7e32b18"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Regular Expression Denial of Service (ReDoS)",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "<0.7.23"
          ]
        },
        "from": [
          "@wso2apim/devportal@1.0.0",
          "swagger-ui-react@3.25.0",
          "react-redux@4.4.10",
          "create-react-class@15.6.3",
          "fbjs@0.8.17",
          "ua-parser-js@0.7.20"
        ],
        "upgradePath": [
          false,
          "swagger-ui-react@3.25.0",
          "react-redux@4.4.10",
          "create-react-class@15.6.3",
          "fbjs@0.8.17",
          "ua-parser-js@0.7.23"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "ua-parser-js",
        "version": "0.7.20",
        "severityWithCritical": "high"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:R",
        "alternativeIds": [],
        "creationTime": "2021-02-12T14:40:27.714038Z",
        "credit": [
          "Doyensec"
        ],
        "cvssScore": 5.9,
        "description": "## Overview\n[ua-parser-js](https://github.com/faisalman/ua-parser-js) is a lightweight JavaScript-based user-agent string parser.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). Within `src/ua-parser.js`, the browser regex is vulnerable to exponential backtracking.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `ua-parser-js` to version 0.7.24 or higher.\n## References\n- [GitHub Commit](https://github.com/faisalman/ua-parser-js/commit/809439e20e273ce0d25c1d04e111dcf6011eb566)\n- [POC: Potential Exploit](https://gist.github.com/b-c-ds/6941d80d6b4e694df4bc269493b7be76)\n",
        "disclosureTime": "2021-02-12T14:37:57Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [
          "0.7.24"
        ],
        "id": "SNYK-JS-UAPARSERJS-1072471",
        "identifiers": {
          "CWE": [
            "CWE-400"
          ],
          "GHSA": [
            "GHSA-78cj-fxph-m83p"
          ],
          "CVE": [
            "CVE-2021-27292"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2021-09-24T13:25:49.071846Z",
        "moduleName": "ua-parser-js",
        "packageManager": "npm",
        "packageName": "ua-parser-js",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2021-02-12T16:09:40Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/faisalman/ua-parser-js/commit/809439e20e273ce0d25c1d04e111dcf6011eb566"
          },
          {
            "title": "POC: Potential Exploit",
            "url": "https://gist.github.com/b-c-ds/6941d80d6b4e694df4bc269493b7be76"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Regular Expression Denial of Service (ReDoS)",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "<0.7.24"
          ]
        },
        "from": [
          "@wso2apim/devportal@1.0.0",
          "swagger-ui-react@3.25.0",
          "react-redux@4.4.10",
          "create-react-class@15.6.3",
          "fbjs@0.8.17",
          "ua-parser-js@0.7.20"
        ],
        "upgradePath": [
          false,
          "swagger-ui-react@3.25.0",
          "react-redux@4.4.10",
          "create-react-class@15.6.3",
          "fbjs@0.8.17",
          "ua-parser-js@0.7.24"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "ua-parser-js",
        "version": "0.7.20",
        "severityWithCritical": "medium"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:C",
        "alternativeIds": [],
        "creationTime": "2020-09-09T15:30:19.590314Z",
        "credit": [
          "Yeting Li"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n[ua-parser-js](https://github.com/faisalman/ua-parser-js) is a lightweight JavaScript-based user-agent string parser.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the regex for Redmi Phones and Mi Pad Tablets UA.\r\n\r\n### POC by Yeting Li\r\n```\r\nvar blank = \" \";\r\nfor (let i = 1; i < 5000; i++) {\r\nblank = blank + \" \";\r\n}\r\n\r\nstr_mi = \"android1mipad\" + blank + \"!\";\r\nstr_mi = str_mi + +blank + \"!\";\r\nmi = /android.+(mi[s-_]*(?:pad)(?:[s_]*[ws]+))s+build/i;\r\n\r\nvar count_mi = 0;\r\nfor (let i = 0; i < 10; i++) {\r\nvar time = Date.now();\r\nmi.test(str_mi);\r\nvar len = Date.now() - time;\r\ncount_mi = count_mi + len;\r\nconsole.log(\"mi:\" + blank.length + \": \" + len)\r\n}\r\nconsole.log(count_mi / 10);\r\n\r\nstr_redmi = \"android1redminote\" + blank + \"!\";\r\nredmi = /android.+(redmi[s-_]*(?:note)?(?:[s_]*[ws]+))s+build/i;\r\nvar count_redmi = 0;\r\nfor (let i = 0; i < 10; i++) {\r\nvar time = Date.now();\r\nredmi.test(str_redmi);\r\nvar len = Date.now() - time;\r\ncount_redmi = count_redmi + len;\r\nconsole.log(\"redmi:\" + blank.length + \": \" + len)\r\n}\r\nconsole.log(count_redmi / 10);\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `ua-parser-js` to version 0.7.22 or higher.\n## References\n- [GitHub Commit](https://github.com/faisalman/ua-parser-js/commit/233d3bae22a795153a7e6638887ce159c63e557d)\n",
        "disclosureTime": "2020-09-09T15:28:29Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [
          "0.7.22"
        ],
        "id": "SNYK-JS-UAPARSERJS-610226",
        "identifiers": {
          "CWE": [
            "CWE-400"
          ],
          "GHSA": [
            "GHSA-662x-fhqg-9p8v"
          ],
          "CVE": [
            "CVE-2020-7733"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2021-07-06T14:08:20.507448Z",
        "moduleName": "ua-parser-js",
        "packageManager": "npm",
        "packageName": "ua-parser-js",
        "patches": [],
        "proprietary": true,
        "publicationTime": "2020-09-16T14:54:55Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/faisalman/ua-parser-js/commit/233d3bae22a795153a7e6638887ce159c63e557d"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Regular Expression Denial of Service (ReDoS)",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "<0.7.22"
          ]
        },
        "from": [
          "@wso2apim/devportal@1.0.0",
          "swagger-ui-react@3.25.0",
          "react-redux@4.4.10",
          "create-react-class@15.6.3",
          "fbjs@0.8.17",
          "ua-parser-js@0.7.20"
        ],
        "upgradePath": [
          false,
          "swagger-ui-react@3.25.0",
          "react-redux@4.4.10",
          "create-react-class@15.6.3",
          "fbjs@0.8.17",
          "ua-parser-js@0.7.22"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "ua-parser-js",
        "version": "0.7.20",
        "severityWithCritical": "high"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:H/UI:N/S:U/C:H/I:L/A:L/E:P/RL:O/RC:C",
        "alternativeIds": [],
        "creationTime": "2021-03-02T19:52:38.855110Z",
        "credit": [
          "Alessio Della Libera (@d3lla)"
        ],
        "cvssScore": 5.5,
        "description": "## Overview\n[underscore](https://www.npmjs.org/package/underscore) is a JavaScript's functional programming helper library.\n\nAffected versions of this package are vulnerable to Arbitrary Code Injection via the `template` function, particularly when the `variable` option is taken from `_.templateSettings` as it is not sanitized.\r\n\r\n### PoC\r\n```\r\nconst _ = require('underscore');\r\n_.templateSettings.variable = \"a = this.process.mainModule.require('child_process').execSync('touch HELLO')\";\r\nconst t = _.template(\"\")();\r\n```\n## Remediation\nUpgrade `underscore` to version 1.13.0-2, 1.12.1 or higher.\n## References\n- [GitHub Additional Information](https://github.com/jashkenas/underscore/blob/cb5f6fc6c2400649d942f1e36f9e5191fb7a1bf1/modules/template.js#L71)\n- [GitHub Commit](https://github.com/jashkenas/underscore/commit/4c73526d43838ad6ab43a6134728776632adeb66)\n",
        "disclosureTime": "2021-03-02T19:51:03Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [
          "1.13.0-2",
          "1.12.1"
        ],
        "id": "SNYK-JS-UNDERSCORE-1080984",
        "identifiers": {
          "CWE": [
            "CWE-94"
          ],
          "GHSA": [
            "GHSA-cf4h-3jhx-xvhq"
          ],
          "CVE": [
            "CVE-2021-23358"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2021-07-12T15:25:03.116440Z",
        "moduleName": "underscore",
        "packageManager": "npm",
        "packageName": "underscore",
        "patches": [],
        "proprietary": true,
        "publicationTime": "2021-03-29T14:54:59Z",
        "references": [
          {
            "title": "GitHub Additional Information",
            "url": "https://github.com/jashkenas/underscore/blob/cb5f6fc6c2400649d942f1e36f9e5191fb7a1bf1/modules/template.js%23L71"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/jashkenas/underscore/commit/4c73526d43838ad6ab43a6134728776632adeb66"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Arbitrary Code Injection",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            ">=1.13.0-0 <1.13.0-2",
            ">=1.3.2 <1.12.1"
          ]
        },
        "from": [
          "@wso2apim/devportal@1.0.0",
          "cleanup-dependencies@0.0.6",
          "underscore@1.9.1"
        ],
        "upgradePath": [
          false,
          "cleanup-dependencies@0.0.6",
          "underscore@1.12.1"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "underscore",
        "version": "1.9.1",
        "severityWithCritical": "medium"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "alternativeIds": [],
        "creationTime": "2021-02-22T08:43:10.670486Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\n[url-parse](https://www.npmjs.com/package/url-parse) is a Small footprint URL parser that works seamlessly across Node.js and browser environments.\n\nAffected versions of this package are vulnerable to Improper Input Validation. It mishandles certain uses of backslash such as `http:\\/` and interprets the URI as a relative path.\n## Remediation\nUpgrade `url-parse` to version 1.5.0 or higher.\n## References\n- [GitHub Commit](https://github.com/unshiftio/url-parse/commit/d1e7e8822f26e8a49794b757123b51386325b2b0)\n- [GitHub PR](https://github.com/unshiftio/url-parse/pull/197)\n",
        "disclosureTime": "2021-02-22T08:42:02Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "1.5.0"
        ],
        "id": "SNYK-JS-URLPARSE-1078283",
        "identifiers": {
          "CWE": [
            "CWE-20"
          ],
          "GHSA": [
            "GHSA-9m6j-fcg5-2442"
          ],
          "CVE": [
            "CVE-2021-27515"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2021-07-06T14:08:11.382662Z",
        "moduleName": "url-parse",
        "packageManager": "npm",
        "packageName": "url-parse",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2021-02-22T15:56:01Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/unshiftio/url-parse/commit/d1e7e8822f26e8a49794b757123b51386325b2b0"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/unshiftio/url-parse/pull/197"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Improper Input Validation",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "<1.5.0"
          ]
        },
        "from": [
          "@wso2apim/devportal@1.0.0",
          "swagger-ui-react@3.25.0",
          "url-parse@1.4.7"
        ],
        "upgradePath": [
          false,
          "swagger-ui-react@3.25.0",
          "url-parse@1.5.0"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "url-parse",
        "version": "1.4.7",
        "severityWithCritical": "medium"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N/E:P",
        "alternativeIds": [],
        "creationTime": "2021-07-26T12:59:09.903181Z",
        "credit": [
          "ready-research"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\n[url-parse](https://www.npmjs.com/package/url-parse) is a Small footprint URL parser that works seamlessly across Node.js and browser environments.\n\nAffected versions of this package are vulnerable to Open Redirect due to improper escaping of slash characters.\n## Remediation\nUpgrade `url-parse` to version 1.5.2 or higher.\n## References\n- [GitHub Commit](https://github.com/unshiftio/url-parse/commit/81ab967889b08112d3356e451bf03e6aa0cbb7e0)\n- [GitHub Issue](https://github.com/unshiftio/url-parse/issues/206)\n- [GitHub PR](https://github.com/unshiftio/url-parse/pull/208)\n",
        "disclosureTime": "2021-07-26T12:57:37Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [
          "1.5.2"
        ],
        "id": "SNYK-JS-URLPARSE-1533425",
        "identifiers": {
          "CWE": [
            "CWE-601"
          ],
          "CVE": [
            "CVE-2021-3664"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2021-07-26T15:23:41.208720Z",
        "moduleName": "url-parse",
        "packageManager": "npm",
        "packageName": "url-parse",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2021-07-26T15:23:41.206700Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/unshiftio/url-parse/commit/81ab967889b08112d3356e451bf03e6aa0cbb7e0"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/unshiftio/url-parse/issues/206"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/unshiftio/url-parse/pull/208"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Open Redirect",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "<1.5.2"
          ]
        },
        "from": [
          "@wso2apim/devportal@1.0.0",
          "swagger-ui-react@3.25.0",
          "url-parse@1.4.7"
        ],
        "upgradePath": [
          false,
          "swagger-ui-react@3.25.0",
          "url-parse@1.5.2"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "url-parse",
        "version": "1.4.7",
        "severityWithCritical": "medium"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:L/A:L/E:P",
        "alternativeIds": [],
        "creationTime": "2022-02-15T10:01:29.002928Z",
        "credit": [
          "ranjit-git"
        ],
        "cvssScore": 6.4,
        "description": "## Overview\n[url-parse](https://www.npmjs.com/package/url-parse) is a Small footprint URL parser that works seamlessly across Node.js and browser environments.\n\nAffected versions of this package are vulnerable to Access Restriction Bypass due to improper parsing process, that may lead to incorrect handling of authentication credentials and hostname, which allows bypass of hostname validation.\r\n\r\n## PoC:\r\n\r\n```js\r\n// PoC.js\r\n var parse = require('url-parse')\r\nvar cc=parse(\"http://admin:password123@@127.0.0.1\")\r\n\r\n//Output:\r\n{ slashes: true,\r\n  protocol: 'http:',\r\n  hash: '',\r\n  query: '',\r\n  pathname: '/',\r\n  auth: 'admin:password123',\r\n  host: '@127.0.0.1',\r\n  port: '',\r\n  hostname: '@127.0.0.1',\r\n  password: 'password123',\r\n  username: 'admin',\r\n  origin: 'http://@127.0.0.1',\r\n  href: 'http://admin:password123@@127.0.0.1/' }\r\n```\n## Remediation\nUpgrade `url-parse` to version 1.5.6 or higher.\n## References\n- [GitHub Commit](https://github.com/unshiftio/url-parse/commit/9be7ee88afd2bb04e4d5a1a8da9a389ac13f8c40)\n- [GitHub PR](https://github.com/unshiftio/url-parse/pull/223)\n",
        "disclosureTime": "2022-02-15T09:53:25Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [
          "1.5.6"
        ],
        "id": "SNYK-JS-URLPARSE-2401205",
        "identifiers": {
          "CWE": [
            "CWE-639"
          ],
          "CVE": [
            "CVE-2022-0512"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2022-02-15T15:27:36.795014Z",
        "moduleName": "url-parse",
        "packageManager": "npm",
        "packageName": "url-parse",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2022-02-15T13:06:08Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/unshiftio/url-parse/commit/9be7ee88afd2bb04e4d5a1a8da9a389ac13f8c40"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/unshiftio/url-parse/pull/223"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Access Restriction Bypass",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "<1.5.6"
          ]
        },
        "from": [
          "@wso2apim/devportal@1.0.0",
          "swagger-ui-react@3.25.0",
          "url-parse@1.4.7"
        ],
        "upgradePath": [
          false,
          "swagger-ui-react@3.25.0",
          "url-parse@1.5.6"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "url-parse",
        "version": "1.4.7",
        "severityWithCritical": "medium"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:C/C:L/I:L/A:N/E:P",
        "alternativeIds": [],
        "creationTime": "2022-02-21T10:47:02.113879Z",
        "credit": [
          "Rohan Sharma"
        ],
        "cvssScore": 6.4,
        "description": "## Overview\n[url-parse](https://www.npmjs.com/package/url-parse) is a Small footprint URL parser that works seamlessly across Node.js and browser environments.\n\nAffected versions of this package are vulnerable to Authorization Bypass via the `hostname` field of a parsed URL, because \"url-parse\" is unable to find the correct hostname when no port number is provided in the URL.\r\n\r\n## PoC:\r\n```js\r\nvar Url = require('url-parse');\r\nvar PAYLOAD = \"http://example.com:\";\r\n\r\nconsole.log(Url(PAYLOAD));\r\n\r\n// Expected hostname: example.com\r\n// Actual hostname by url-parse: example.com:\r\n```\r\n\r\nOutput:\r\n\r\n```\r\n{\r\n  slashes: true,\r\n  protocol: 'http:',\r\n  hash: '',\r\n  query: '',\r\n  pathname: '/',\r\n  auth: '',\r\n  host: 'example.com:',\r\n  port: '',\r\n  hostname: 'example.com:',\r\n  password: '',\r\n  username: '',\r\n  origin: 'http://example.com:',\r\n  href: 'http://example.com:/'\r\n}\r\n```\n## Remediation\nUpgrade `url-parse` to version 1.5.8 or higher.\n## References\n- [GitHub Commit](https://github.com/unshiftio/url-parse/commit/d5c64791ef496ca5459ae7f2176a31ea53b127e5)\n",
        "disclosureTime": "2022-02-21T10:36:50Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [
          "1.5.8"
        ],
        "id": "SNYK-JS-URLPARSE-2407759",
        "identifiers": {
          "CWE": [
            "CWE-285"
          ],
          "CVE": [
            "CVE-2022-0686"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2022-02-21T16:02:45.057937Z",
        "moduleName": "url-parse",
        "packageManager": "npm",
        "packageName": "url-parse",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2022-02-21T16:02:45.055472Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/unshiftio/url-parse/commit/d5c64791ef496ca5459ae7f2176a31ea53b127e5"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Authorization Bypass",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "<1.5.8"
          ]
        },
        "from": [
          "@wso2apim/devportal@1.0.0",
          "swagger-ui-react@3.25.0",
          "url-parse@1.4.7"
        ],
        "upgradePath": [
          false,
          "swagger-ui-react@3.25.0",
          "url-parse@1.5.8"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "url-parse",
        "version": "1.4.7",
        "severityWithCritical": "medium"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:N/E:P",
        "alternativeIds": [],
        "creationTime": "2022-02-21T12:56:54.006952Z",
        "credit": [
          "haxatron"
        ],
        "cvssScore": 8.1,
        "description": "## Overview\n[url-parse](https://www.npmjs.com/package/url-parse) is a Small footprint URL parser that works seamlessly across Node.js and browser environments.\n\nAffected versions of this package are vulnerable to Improper Input Validation due to improper fix of [CVE-2020-8124](https://security.snyk.io/vuln/SNYK-JS-URLPARSE-543307) , it is possible to be exploited via the `\\b` (backspace) character.\r\n\r\n## PoC:\r\n```js\r\nconst parse = require('./index.js')\r\n\r\nurl = parse('\\bhttp://google.com')\r\n\r\nconsole.log(url)\r\n```\r\nOutput:\r\n\r\n```\r\n{\r\n  slashes: false,\r\n  protocol: '',\r\n  hash: '',\r\n  query: '',\r\n  pathname: '\\bhttp://google.com',\r\n  auth: '',\r\n  host: '',\r\n  port: '',\r\n  hostname: '',\r\n  password: '',\r\n  username: '',\r\n  origin: 'null',\r\n  href: '\\bhttp://google.com'\r\n}\r\n```\n## Remediation\nUpgrade `url-parse` to version 1.5.9 or higher.\n## References\n- [GitHub Commit](https://github.com/unshiftio/url-parse/commit/0e3fb542d60ddbf6933f22eb9b1e06e25eaa5b63)\n",
        "disclosureTime": "2022-02-21T12:49:06Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [
          "1.5.9"
        ],
        "id": "SNYK-JS-URLPARSE-2407770",
        "identifiers": {
          "CWE": [
            "CWE-20"
          ],
          "CVE": [
            "CVE-2022-0691"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2022-06-09T15:13:29.620707Z",
        "moduleName": "url-parse",
        "packageManager": "npm",
        "packageName": "url-parse",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2022-02-21T16:02:45Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/unshiftio/url-parse/commit/0e3fb542d60ddbf6933f22eb9b1e06e25eaa5b63"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Improper Input Validation",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "<1.5.9"
          ]
        },
        "from": [
          "@wso2apim/devportal@1.0.0",
          "swagger-ui-react@3.25.0",
          "url-parse@1.4.7"
        ],
        "upgradePath": [
          false,
          "swagger-ui-react@3.25.0",
          "url-parse@1.5.9"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "url-parse",
        "version": "1.4.7",
        "severityWithCritical": "high"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N/E:P",
        "alternativeIds": [],
        "creationTime": "2022-02-24T09:02:19.641584Z",
        "credit": [
          "haxatron"
        ],
        "cvssScore": 6.2,
        "description": "## Overview\n[url-parse](https://www.npmjs.com/package/url-parse) is a Small footprint URL parser that works seamlessly across Node.js and browser environments.\n\nAffected versions of this package are vulnerable to Authorization Bypass Through User-Controlled Key due to incorrect conversion of `@` in the protocol field of the HREF.\r\n\r\n## PoC:\r\n```\r\nparse = require('url-parse')\r\n\r\nconsole.log(parse(\"http:@/127.0.0.1\"))\r\n```\r\nOutput:\r\n\r\n```\r\n{\r\n  slashes: true,\r\n  protocol: 'http:',\r\n  hash: '',\r\n  query: '',\r\n  pathname: '/127.0.0.1',\r\n  auth: '',\r\n  host: '',\r\n  port: '',\r\n  hostname: '',\r\n  password: '',\r\n  username: '',\r\n  origin: 'null',\r\n  href: 'http:///127.0.0.1'\r\n}\r\n```\n## Remediation\nUpgrade `url-parse` to version 1.5.7 or higher.\n## References\n- [GitHub Commit](https://github.com/unshiftio/url-parse/commit/ef45a1355375a8244063793a19059b4f62fc8788)\n- [GitHub PR](https://github.com/unshiftio/url-parse/pull/226)\n",
        "disclosureTime": "2022-02-17T00:00:00Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [
          "1.5.7"
        ],
        "id": "SNYK-JS-URLPARSE-2412697",
        "identifiers": {
          "CWE": [
            "CWE-639"
          ],
          "CVE": [
            "CVE-2022-0639"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2022-02-24T16:08:31.527221Z",
        "moduleName": "url-parse",
        "packageManager": "npm",
        "packageName": "url-parse",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2022-02-24T16:08:31.525302Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/unshiftio/url-parse/commit/ef45a1355375a8244063793a19059b4f62fc8788"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/unshiftio/url-parse/pull/226"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Authorization Bypass Through User-Controlled Key",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "<1.5.7"
          ]
        },
        "from": [
          "@wso2apim/devportal@1.0.0",
          "swagger-ui-react@3.25.0",
          "url-parse@1.4.7"
        ],
        "upgradePath": [
          false,
          "swagger-ui-react@3.25.0",
          "url-parse@1.5.7"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "url-parse",
        "version": "1.4.7",
        "severityWithCritical": "medium"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P",
        "alternativeIds": [],
        "creationTime": "2020-10-25T14:27:16.715665Z",
        "credit": [
          "po6ix"
        ],
        "cvssScore": 7.3,
        "description": "## Overview\n[y18n](https://www.npmjs.com/package/y18n) is a the bare-bones internationalization library used by yargs\n\nAffected versions of this package are vulnerable to Prototype Pollution. PoC by po6ix:\r\n```\r\nconst y18n = require('y18n')();\r\n \r\ny18n.setLocale('__proto__');\r\ny18n.updateLocale({polluted: true});\r\n\r\nconsole.log(polluted); // true\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `y18n` to version 3.2.2, 4.0.1, 5.0.5 or higher.\n## References\n- [GitHub Commit](https://github.com/yargs/y18n/commit/a9ac604abf756dec9687be3843e2c93bfe581f25)\n- [GitHub Issue](https://github.com/yargs/y18n/issues/96)\n- [GitHub PR](https://github.com/yargs/y18n/pull/108)\n",
        "disclosureTime": "2020-10-25T14:24:22Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [
          "3.2.2",
          "4.0.1",
          "5.0.5"
        ],
        "id": "SNYK-JS-Y18N-1021887",
        "identifiers": {
          "CWE": [
            "CWE-1321"
          ],
          "GHSA": [
            "GHSA-c4w7-xm78-47vh"
          ],
          "CVE": [
            "CVE-2020-7774"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2022-05-31T06:34:46.699769Z",
        "moduleName": "y18n",
        "packageManager": "npm",
        "packageName": "y18n",
        "patches": [],
        "proprietary": true,
        "publicationTime": "2020-11-10T15:27:28Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/yargs/y18n/commit/a9ac604abf756dec9687be3843e2c93bfe581f25"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/yargs/y18n/issues/96"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/yargs/y18n/pull/108"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Prototype Pollution",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "<3.2.2",
            ">=4.0.0 <4.0.1",
            ">=5.0.0 <5.0.5"
          ]
        },
        "from": [
          "@wso2apim/devportal@1.0.0",
          "openapi-to-postmanv2@1.2.7",
          "oas-resolver-browser@2.3.3",
          "yargs@15.4.1",
          "y18n@4.0.0"
        ],
        "upgradePath": [
          false,
          "openapi-to-postmanv2@1.2.7",
          "oas-resolver-browser@2.3.3",
          "yargs@15.4.1",
          "y18n@4.0.1"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "y18n",
        "version": "4.0.0",
        "severityWithCritical": "high"
      }
    ],
    "upgrade": {
      "@asyncapi/react-component@0.17.11": {
        "upgradeTo": "@asyncapi/react-component@0.24.20",
        "upgrades": [
          "markdown-it@11.0.1"
        ],
        "vulns": [
          "SNYK-JS-MARKDOWNIT-2331914"
        ]
      },
      "axios@0.19.1": {
        "upgradeTo": "axios@0.21.3",
        "upgrades": [
          "axios@0.19.1",
          "axios@0.19.1",
          "follow-redirects@1.5.10",
          "follow-redirects@1.5.10"
        ],
        "vulns": [
          "SNYK-JS-AXIOS-1579269",
          "SNYK-JS-AXIOS-1038255",
          "SNYK-JS-FOLLOWREDIRECTS-2332181",
          "SNYK-JS-FOLLOWREDIRECTS-2396346"
        ]
      },
      "caniuse-api@1.6.1": {
        "upgradeTo": "caniuse-api@3.0.0",
        "upgrades": [
          "browserslist@1.7.7"
        ],
        "vulns": [
          "SNYK-JS-BROWSERSLIST-1090194"
        ]
      },
      "graphiql@0.17.5": {
        "upgradeTo": "graphiql@1.4.7",
        "upgrades": [
          "graphiql@0.17.5",
          "markdown-it@10.0.0"
        ],
        "vulns": [
          "SNYK-JS-GRAPHIQL-1912088",
          "SNYK-JS-MARKDOWNIT-2331914"
        ]
      },
      "graphql-to-postman@0.0.6": {
        "upgradeTo": "graphql-to-postman@0.0.8",
        "upgrades": [
          "lodash@4.17.15"
        ],
        "vulns": [
          "SNYK-JS-LODASH-608086"
        ]
      },
      "isomorphic-fetch@2.2.1": {
        "upgradeTo": "isomorphic-fetch@3.0.0",
        "upgrades": [
          "node-fetch@1.7.3",
          "node-fetch@1.7.3"
        ],
        "vulns": [
          "SNYK-JS-NODEFETCH-2342118",
          "SNYK-JS-NODEFETCH-674311"
        ]
      },
      "lodash@4.17.20": {
        "upgradeTo": "lodash@4.17.21",
        "upgrades": [
          "lodash@4.17.20",
          "lodash@4.17.20"
        ],
        "vulns": [
          "SNYK-JS-LODASH-1018905",
          "SNYK-JS-LODASH-1040724"
        ]
      },
      "mui-datatables@2.13.0": {
        "upgradeTo": "mui-datatables@2.14.0",
        "upgrades": [
          "mui-datatables@2.13.0"
        ],
        "vulns": [
          "SNYK-JS-MUIDATATABLES-174185"
        ]
      },
      "openapi-to-postmanv2@1.2.7": {
        "upgradeTo": "openapi-to-postmanv2@2.13.0",
        "upgrades": [
          "async@3.2.0",
          "marked@1.1.1",
          "marked@1.1.1",
          "sanitize-html@1.20.1",
          "sanitize-html@1.20.1",
          "sanitize-html@1.20.1",
          "lodash@4.17.20",
          "lodash@4.17.20",
          "marked@1.1.1"
        ],
        "vulns": [
          "SNYK-JS-ASYNC-2441827",
          "SNYK-JS-MARKED-2342073",
          "SNYK-JS-MARKED-2342082",
          "SNYK-JS-SANITIZEHTML-1070780",
          "SNYK-JS-SANITIZEHTML-1070786",
          "SNYK-JS-SANITIZEHTML-585892",
          "SNYK-JS-LODASH-1018905",
          "SNYK-JS-LODASH-1040724",
          "SNYK-JS-MARKED-1070800"
        ]
      },
      "swagger-ui@3.25.0": {
        "upgradeTo": "swagger-ui@4.7.0",
        "upgrades": [
          "@braintree/sanitize-url@3.1.0",
          "swagger-ui@3.25.0",
          "swagger-ui@3.25.0",
          "autolinker@0.28.1",
          "autolinker@0.28.1"
        ],
        "vulns": [
          "SNYK-JS-BRAINTREESANITIZEURL-2339882",
          "SNYK-JS-SWAGGERUI-2314885",
          "SNYK-JS-SWAGGERUI-572012",
          "SNYK-JS-AUTOLINKER-564438",
          "SNYK-JS-AUTOLINKER-73494"
        ]
      },
      "swagger-ui-react@3.25.0": {
        "upgradeTo": "swagger-ui-react@4.7.0",
        "upgrades": [
          "@braintree/sanitize-url@3.1.0",
          "autolinker@0.28.1",
          "autolinker@0.28.1"
        ],
        "vulns": [
          "SNYK-JS-BRAINTREESANITIZEURL-2339882",
          "SNYK-JS-AUTOLINKER-564438",
          "SNYK-JS-AUTOLINKER-73494"
        ]
      }
    },
    "patch": {
      "SNYK-JS-LODASH-567746": {
        "paths": [
          {
            "graphql-to-postman > lodash": {
              "patched": "2022-06-24T05:44:01.724Z"
            }
          },
          {
            "graphql-to-postman > postman-collection > lodash": {
              "patched": "2022-06-24T05:44:01.724Z"
            }
          },
          {
            "swagger2-postman2-converter > lodash": {
              "patched": "2022-06-24T05:44:01.724Z"
            }
          }
        ]
      }
    },
    "ignore": {},
    "pin": {}
  },
  "filesystemPolicy": false,
  "filtered": {
    "ignore": [],
    "patch": []
  },
  "uniqueCount": 63,
  "projectName": "@wso2apim/devportal",
  "foundProjectCount": 1,
  "displayTargetFile": "package-lock.json",
  "path": "/home/thayaruban/Desktop/apim-apps/portals/devportal/devportal"
}
