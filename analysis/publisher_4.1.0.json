{
  "vulnerabilities": [
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
      "alternativeIds": [],
      "creationTime": "2020-07-16T08:19:48.462528Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n[ajv](https://www.npmjs.com/package/ajv) is an Another JSON Schema Validator\n\nAffected versions of this package are vulnerable to Prototype Pollution. A carefully crafted JSON schema could be provided that allows execution of other code by prototype pollution. (While untrusted schemas are recommended against, the worst case of an untrusted schema should be a denial of service, not execution of code.)\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `ajv` to version 6.12.3 or higher.\n## References\n- [HackerOne Report](https://hackerone.com/bugs?subject=user&report_id=894259)\n",
      "disclosureTime": "2020-07-16T08:14:41Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "6.12.3"
      ],
      "id": "SNYK-JS-AJV-584908",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2020-15366"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-07-20T12:40:09.463832Z",
      "moduleName": "ajv",
      "packageManager": "npm",
      "packageName": "ajv",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-07-16T13:58:04Z",
      "references": [
        {
          "title": "HackerOne Report",
          "url": "https://hackerone.com/bugs?subject=user&report_id=894259"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<6.12.3"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/publisher@4.0.0",
        "babel-plugin-formatjs@9.1.3",
        "@types/schema-utils@2.4.0",
        "schema-utils@0.3.0",
        "ajv@5.5.2"
      ],
      "upgradePath": [
        false,
        "babel-plugin-formatjs@9.1.3",
        "@types/schema-utils@2.4.0",
        "schema-utils@0.4.4",
        "ajv@6.12.3"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "ajv",
      "version": "5.5.2"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N/E:P",
      "alternativeIds": [],
      "creationTime": "2022-01-13T16:19:10.956384Z",
      "credit": [
        "Bob \"Wombat\" Hogg"
      ],
      "cvssScore": 5.4,
      "description": "## Overview\n[@braintree/sanitize-url](https://www.npmjs.org/package/@braintree/sanitize-url) is an A url sanitizer\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS) due to improper sanitization in `sanitizeUrl` function.\r\n\r\n## PoC:\r\n\r\n```js\r\nconst sanitizeUrl = require(\"@braintree/sanitize-url\").sanitizeUrl\r\n\r\n\r\nfor(const vector of [ \"&#0000106&#0000097&#0000118&#0000097&#0000115&#0000099&#0000114&#0000105&#0000112&#0000116&#0000058&#0000097&#0000108&#0000101&#0000114&#0000116&#0000040&#0000039&#0000088&#0000083&#0000083&#0000039&#0000041\",\r\n\"javascript:alert('XSS')\",\r\n\"&#0000106&#0000097&#0000118&#0000097&#0000115&#0000099&#0000114&#0000105&#0000112&#0000116&#0000058&#0000097&#0000108&#0000101&#0000114&#0000116&#0000040&#0000039&#0000088&#0000083&#0000083&#0000039&#0000041\",\r\n\"&#x6A&#x61&#x76&#x61&#x73&#x63&#x72&#x69&#x70&#x74&#x3A&#x61&#x6C&#x65&#x72&#x74&#x28&#x27&#x58&#x53&#x53&#x27&#x29\",\r\n\"jav ascript:alert('XSS');\",\r\n\" &#14; javascript:alert('XSS');\"\r\n]) {\r\nconsole.log(sanitizeUrl(vector))\r\n}\r\n\r\n```\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `@braintree/sanitize-url` to version 6.0.0 or higher.\n## References\n- [GitHub Commit](https://github.com/braintree/sanitize-url/pull/40/commits/e5afda45d9833682b705f73fc2c1265d34832183)\n- [GitHub PR](https://github.com/braintree/sanitize-url/pull/40)\n- [Vulnerable Code](https://github.com/braintree/sanitize-url/blob/main/src/index.ts#L11)\n",
      "disclosureTime": "2022-01-13T16:13:00Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "6.0.0"
      ],
      "id": "SNYK-JS-BRAINTREESANITIZEURL-2339882",
      "identifiers": {
        "CWE": [
          "CWE-79"
        ],
        "CVE": [
          "CVE-2021-23648"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-03-07T16:39:50.132701Z",
      "moduleName": "@braintree/sanitize-url",
      "packageManager": "npm",
      "packageName": "@braintree/sanitize-url",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2022-03-07T16:39:50.131102Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/braintree/sanitize-url/pull/40/commits/e5afda45d9833682b705f73fc2c1265d34832183"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/braintree/sanitize-url/pull/40"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/braintree/sanitize-url/blob/main/src/index.ts%23L11"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Cross-site Scripting (XSS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<6.0.0"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/publisher@4.0.0",
        "swagger-ui-react@3.45.0",
        "@braintree/sanitize-url@5.0.0"
      ],
      "upgradePath": [
        false,
        "swagger-ui-react@4.7.0",
        "@braintree/sanitize-url@6.0.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "@braintree/sanitize-url",
      "version": "5.0.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-01T13:30:25.617926Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[browserslist](https://www.npmjs.org/package/browserslist) is a Share target browsers between different front-end tools, like Autoprefixer, Stylelint and babel-env-preset\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) during parsing of queries.\r\n\r\n### PoC by Yeting Li\r\n```\r\nvar browserslist = require(\"browserslist\")\r\nfunction build_attack(n) {\r\n    var ret = \"> \"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"1\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// browserslist('> 1%')\r\n\r\n//browserslist(build_attack(500000))\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            browserslist(attack_str);\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `browserslist` to version 4.16.5 or higher.\n## References\n- [GitHub Commit](https://github.com/browserslist/browserslist/commit/c091916910dfe0b5fd61caad96083c6709b02d98)\n- [GitHub PR](https://github.com/browserslist/browserslist/pull/593)\n- [Vulnerable Regular Expression](https://github.com/browserslist/browserslist/blob/e82f32d1d4100d6bc79ea0b6b6a2d281a561e33c/index.js#L472-L474)\n",
      "disclosureTime": "2021-04-01T13:19:27Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.16.5"
      ],
      "id": "SNYK-JS-BROWSERSLIST-1090194",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w8qv-6jwh-64r5"
        ],
        "CVE": [
          "CVE-2021-23364"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-05-16T13:18:31.649076Z",
      "moduleName": "browserslist",
      "packageManager": "npm",
      "packageName": "browserslist",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-28T15:14:31Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/browserslist/browserslist/commit/c091916910dfe0b5fd61caad96083c6709b02d98"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/browserslist/browserslist/pull/593"
        },
        {
          "title": "Vulnerable Regular Expression",
          "url": "https://github.com/browserslist/browserslist/blob/e82f32d1d4100d6bc79ea0b6b6a2d281a561e33c/index.js%23L472-L474"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.16.5"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/publisher@4.0.0",
        "babel-plugin-formatjs@9.1.3",
        "@babel/core@7.13.0",
        "@babel/helper-compilation-targets@7.13.0",
        "browserslist@4.16.3"
      ],
      "upgradePath": [
        false,
        "babel-plugin-formatjs@9.1.3",
        "@babel/core@7.13.0",
        "@babel/helper-compilation-targets@7.13.0",
        "browserslist@4.16.5"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "browserslist",
      "version": "4.16.3"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-01T13:30:25.617926Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[browserslist](https://www.npmjs.org/package/browserslist) is a Share target browsers between different front-end tools, like Autoprefixer, Stylelint and babel-env-preset\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) during parsing of queries.\r\n\r\n### PoC by Yeting Li\r\n```\r\nvar browserslist = require(\"browserslist\")\r\nfunction build_attack(n) {\r\n    var ret = \"> \"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"1\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// browserslist('> 1%')\r\n\r\n//browserslist(build_attack(500000))\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            browserslist(attack_str);\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `browserslist` to version 4.16.5 or higher.\n## References\n- [GitHub Commit](https://github.com/browserslist/browserslist/commit/c091916910dfe0b5fd61caad96083c6709b02d98)\n- [GitHub PR](https://github.com/browserslist/browserslist/pull/593)\n- [Vulnerable Regular Expression](https://github.com/browserslist/browserslist/blob/e82f32d1d4100d6bc79ea0b6b6a2d281a561e33c/index.js#L472-L474)\n",
      "disclosureTime": "2021-04-01T13:19:27Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.16.5"
      ],
      "id": "SNYK-JS-BROWSERSLIST-1090194",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w8qv-6jwh-64r5"
        ],
        "CVE": [
          "CVE-2021-23364"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-05-16T13:18:31.649076Z",
      "moduleName": "browserslist",
      "packageManager": "npm",
      "packageName": "browserslist",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-28T15:14:31Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/browserslist/browserslist/commit/c091916910dfe0b5fd61caad96083c6709b02d98"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/browserslist/browserslist/pull/593"
        },
        {
          "title": "Vulnerable Regular Expression",
          "url": "https://github.com/browserslist/browserslist/blob/e82f32d1d4100d6bc79ea0b6b6a2d281a561e33c/index.js%23L472-L474"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.16.5"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/publisher@4.0.0",
        "caniuse-api@3.0.0",
        "browserslist@4.12.0"
      ],
      "upgradePath": [
        false,
        "caniuse-api@3.0.0",
        "browserslist@4.16.5"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "browserslist",
      "version": "4.12.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [],
      "creationTime": "2021-05-30T09:26:40.480408Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[css-what](https://www.npmjs.org/package/css-what) is an a CSS selector parser\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via attribute parsing.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `css-what` to version 5.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/fb55/css-what/commit/4cdaacfd0d4b6fd00614be030da0dea6c2994655)\n- [GitHub PR](https://github.com/fb55/css-what/pull/503)\n- [GitHub Release](https://github.com/fb55/css-what/releases/tag/v5.0.1)\n",
      "disclosureTime": "2021-05-30T09:19:01Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "5.0.1"
      ],
      "id": "SNYK-JS-CSSWHAT-1298035",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-q8pj-2vqx-8ggc"
        ],
        "CVE": [
          "CVE-2021-33587"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-07-06T14:08:59.787603Z",
      "moduleName": "css-what",
      "packageManager": "npm",
      "packageName": "css-what",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-05-30T13:11:01.486283Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/fb55/css-what/commit/4cdaacfd0d4b6fd00614be030da0dea6c2994655"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/fb55/css-what/pull/503"
        },
        {
          "title": "GitHub Release",
          "url": "https://github.com/fb55/css-what/releases/tag/v5.0.1"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<5.0.1"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/publisher@4.0.0",
        "react-safe-html@0.6.1",
        "cheerio@0.22.0",
        "css-select@1.2.0",
        "css-what@2.1.3"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "css-what",
      "version": "2.1.3"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [],
      "creationTime": "2022-04-20T11:36:03.873001Z",
      "credit": [
        "Joe Portner",
        "Thomas Watson",
        "AlanBugz"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[@hapi/statehood](https://github.com/hapijs/statehood/releases) is a HTTP State Management Utilities package.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the cookie parser due to improper regex usage.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `@hapi/statehood` to version 7.0.4 or higher.\n## References\n- [GitHub Commit](https://github.com/hapijs/statehood/pull/81/commits/19ecc44f0131729c43488e2b07508ffd97ee3284)\n- [GitHub PR](https://github.com/hapijs/statehood/pull/81#issuecomment-1103408142)\n",
      "disclosureTime": "2022-04-20T11:30:23Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "7.0.4"
      ],
      "id": "SNYK-JS-HAPISTATEHOOD-2769251",
      "identifiers": {
        "CWE": [
          "CWE-1333"
        ],
        "CVE": []
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-20T16:23:16.028475Z",
      "moduleName": "@hapi/statehood",
      "packageManager": "npm",
      "packageName": "@hapi/statehood",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-04-20T16:23:16.026265Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/hapijs/statehood/pull/81/commits/19ecc44f0131729c43488e2b07508ffd97ee3284"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/hapijs/statehood/pull/81%23issuecomment-1103408142"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<7.0.4"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/publisher@4.0.0",
        "@hapi/hapi@18.4.1",
        "@hapi/statehood@6.1.2"
      ],
      "upgradePath": [
        false,
        "@hapi/hapi@19.0.0",
        "@hapi/statehood@7.0.4"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "@hapi/statehood",
      "version": "6.1.2"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-08-31T15:49:30.361142Z",
      "credit": [
        "Alessio Della Libera of Snyk Research Team"
      ],
      "cvssScore": 5.6,
      "description": "## Overview\n[json-pointer](https://www.npmjs.com/package/json-pointer) is a set of utilities for JSON pointers described by RFC 6901\n\nAffected versions of this package are vulnerable to Prototype Pollution. A type confusion vulnerability can lead to a bypass of CVE-2020-7709 when the pointer components are arrays.\r\n\r\n### PoC\r\n\r\n```\r\nconst pointer = require('json-pointer');\r\n\r\n// pointer.set({}, ['__proto__', 'polluted'], 'yes')\r\n// console.log(polluted) // ReferenceError: polluted is not defined\r\n\r\npointer.set({}, [['__proto__'], 'polluted'], 'yes')\r\nconsole.log(polluted)\"\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nA fix was pushed into the `master` branch but not yet published.\n## References\n- [GitHub Commit](https://github.com/manuelstofer/json-pointer/commit/47dae1d369a25bd9bdcdbc963b8699b89a882c81)\n- [Snyk Blog](https://snyk.io/blog/remediate-javascript-type-confusion-bypassed-input-validation/)\n- [Vulnerable Code](https://github.com/manuelstofer/json-pointer/blob/master/index.js#L78)\n",
      "disclosureTime": "2021-08-31T15:48:25Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [],
      "id": "SNYK-JS-JSONPOINTER-1577287",
      "identifiers": {
        "CWE": [
          "CWE-1321"
        ],
        "CVE": [
          "CVE-2021-23820"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-06-09T15:18:12.256527Z",
      "moduleName": "json-pointer",
      "packageManager": "npm",
      "packageName": "json-pointer",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-11-03T16:34:28Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/manuelstofer/json-pointer/commit/47dae1d369a25bd9bdcdbc963b8699b89a882c81"
        },
        {
          "title": "Snyk Blog",
          "url": "https://snyk.io/blog/remediate-javascript-type-confusion-bypassed-input-validation/"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/manuelstofer/json-pointer/blob/master/index.js%23L78"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "*"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/publisher@4.0.0",
        "@asyncapi/react-component@0.19.2",
        "openapi-sampler@1.0.0-beta.15",
        "json-pointer@0.6.0"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "json-pointer",
      "version": "0.6.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:L/I:L/A:H/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-07-30T14:36:34.722773Z",
      "credit": [
        "posix"
      ],
      "cvssScore": 6,
      "description": "## Overview\n[json-pointer](https://www.npmjs.com/package/json-pointer) is a set of utilities for JSON pointers described by RFC 6901\n\nAffected versions of this package are vulnerable to Prototype Pollution. Multiple reference of object using slash is supported.\r\n\r\n### PoC\r\n```js\r\nvar pointer = require('json-pointer');\r\n\r\nvar obj = {};\r\npointer.set(obj, '/__proto__/polluted', true);\r\n\r\nconsole.log(polluted); // true\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `json-pointer` to version 0.6.1 or higher.\n## References\n- [GitHub PR](https://github.com/manuelstofer/json-pointer/pull/34/files)\n",
      "disclosureTime": "2020-07-30T14:03:12Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "0.6.1"
      ],
      "id": "SNYK-JS-JSONPOINTER-596925",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-7mg4-w3w5-x5pc"
        ],
        "CVE": [
          "CVE-2020-7709"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-07-06T14:08:28.760779Z",
      "moduleName": "json-pointer",
      "packageManager": "npm",
      "packageName": "json-pointer",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2020-10-05T16:18:46.808225Z",
      "references": [
        {
          "title": "GitHub PR",
          "url": "https://github.com/manuelstofer/json-pointer/pull/34/files"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<0.6.1"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/publisher@4.0.0",
        "@asyncapi/react-component@0.19.2",
        "openapi-sampler@1.0.0-beta.15",
        "json-pointer@0.6.0"
      ],
      "upgradePath": [
        false,
        "@asyncapi/react-component@0.19.2",
        "openapi-sampler@1.0.0",
        "json-pointer@0.6.1"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "json-pointer",
      "version": "0.6.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2020-10-16T16:48:40.985673Z",
      "credit": [
        "Liyuan Chen"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `toNumber`, `trim` and `trimEnd` functions.\r\n\r\n### POC\r\n```\r\nvar lo = require('lodash');\r\n\r\nfunction build_blank (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\n\r\nvar s = build_blank(50000)\r\nvar time0 = Date.now();\r\nlo.trim(s)\r\nvar time_cost0 = Date.now() - time0;\r\nconsole.log(\"time_cost0: \" + time_cost0)\r\n\r\nvar time1 = Date.now();\r\nlo.toNumber(s)\r\nvar time_cost1 = Date.now() - time1;\r\nconsole.log(\"time_cost1: \" + time_cost1)\r\n\r\nvar time2 = Date.now();\r\nlo.trimEnd(s)\r\nvar time_cost2 = Date.now() - time2;\r\nconsole.log(\"time_cost2: \" + time_cost2)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a)\n- [GitHub Fix PR](https://github.com/lodash/lodash/pull/5065)\n",
      "disclosureTime": "2020-10-16T16:47:34Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.21"
      ],
      "id": "SNYK-JS-LODASH-1018905",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2020-28500"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:26:11.286253Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:49Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a"
        },
        {
          "title": "GitHub Fix PR",
          "url": "https://github.com/lodash/lodash/pull/5065"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/publisher@4.0.0",
        "react-quill@1.0.0",
        "lodash@4.17.11"
      ],
      "upgradePath": [
        false,
        "react-quill@1.0.0",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.11"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-11-17T14:07:17.048472Z",
      "credit": [
        "Marc Hassan"
      ],
      "cvssScore": 7.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Command Injection via `template`.\r\n\r\n### PoC\r\n```js\r\nvar _ = require('lodash');\r\n\r\n_.template('', { variable: '){console.log(process.env)}; with(obj' })()\r\n```\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c)\n- [Vulnerable Code](https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js#L14851)\n",
      "disclosureTime": "2020-11-17T13:02:10Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.21"
      ],
      "id": "SNYK-JS-LODASH-1040724",
      "identifiers": {
        "CWE": [
          "CWE-78"
        ],
        "GHSA": [
          "GHSA-35jh-r3h4-6jhm"
        ],
        "CVE": [
          "CVE-2021-23337"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:28:18.096614Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:50Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js%23L14851"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Command Injection",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/publisher@4.0.0",
        "react-quill@1.0.0",
        "lodash@4.17.11"
      ],
      "upgradePath": [
        false,
        "react-quill@1.0.0",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.11"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2019-06-19T12:04:21.040000Z",
      "credit": [
        "Snyk Security Team"
      ],
      "cvssScore": 7.3,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The function `defaultsDeep` could be tricked into adding or modifying properties of `Object.prototype` using a `constructor` payload.\r\n\r\n## PoC by Snyk\r\n```\r\nconst mergeFn = require('lodash').defaultsDeep;\r\nconst payload = '{\"constructor\": {\"prototype\": {\"a0\": true}}}'\r\n\r\nfunction check() {\r\n    mergeFn({}, JSON.parse(payload));\r\n    if (({})[`a0`] === true) {\r\n        console.log(`Vulnerable to Prototype Pollution via ${payload}`);\r\n    }\r\n  }\r\n\r\ncheck();\r\n```\r\n\r\nFor more information, check out our [blog post](https://snyk.io/blog/snyk-research-team-discovers-severe-prototype-pollution-security-vulnerabilities-affecting-all-versions-of-lodash/)\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.12 or higher.\n## References\n- [GitHub Issue](https://github.com/lodash/lodash/issues/4348)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4336)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4355)\n- [GitHub PR](https://github.com/sailshq/lodash/pull/1)\n- [Node Security Advisory](https://www.npmjs.com/advisories/1065)\n- [Snyk Blog](https://snyk.io/blog/snyk-research-team-discovers-severe-prototype-pollution-security-vulnerabilities-affecting-all-versions-of-lodash/)\n",
      "disclosureTime": "2019-06-19T11:45:02Z",
      "exploit": "Proof of Concept",
      "functions": [
        {
          "functionId": {
            "filePath": "lodash.js",
            "className": null,
            "functionName": "runInContext.customDefaultsMerge"
          },
          "version": [
            ">=4.17.3 <4.17.12"
          ]
        }
      ],
      "fixedIn": [
        "4.17.12"
      ],
      "id": "SNYK-JS-LODASH-450202",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "NSP": [
          "1065"
        ],
        "CVE": [
          "CVE-2019-10744"
        ],
        "GHSA": [
          "GHSA-jf85-cpcp-j695"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:25:20.940478Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [
        {
          "comments": [],
          "id": "patch:SNYK-JS-LODASH-450202:0",
          "modificationTime": "2019-12-03T11:40:45.719849Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/lodash/20190702/lodash_20190702_0_0_1f8ea07746963a535385a5befc19fa687a627d2b.patch"
          ],
          "version": "=4.17.11"
        }
      ],
      "proprietary": true,
      "publicationTime": "2019-07-02T11:45:01Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/lodash/lodash/issues/4348"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/lodash/lodash/pull/4336"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/lodash/lodash/pull/4355"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/sailshq/lodash/pull/1"
        },
        {
          "title": "Node Security Advisory",
          "url": "https://www.npmjs.com/advisories/1065"
        },
        {
          "title": "Snyk Blog",
          "url": "https://snyk.io/blog/snyk-research-team-discovers-severe-prototype-pollution-security-vulnerabilities-affecting-all-versions-of-lodash/"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [
        {
          "functionId": {
            "filePath": "lodash.js",
            "functionName": "runInContext.customDefaultsMerge"
          },
          "version": [
            ">=4.17.3 <4.17.12"
          ]
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.12"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/publisher@4.0.0",
        "react-quill@1.0.0",
        "lodash@4.17.11"
      ],
      "upgradePath": [
        false,
        "react-quill@1.0.0",
        "lodash@4.17.12"
      ],
      "isUpgradable": true,
      "isPatchable": true,
      "name": "lodash",
      "version": "4.17.11"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-04-28T14:32:13.683154Z",
      "credit": [
        "posix"
      ],
      "cvssScore": 8.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The function `zipObjectDeep` can be tricked into adding or modifying properties of the Object prototype. These properties will be present on all objects.\r\n\r\n## PoC\r\n```\r\nconst _ = require('lodash');\r\n_.zipObjectDeep(['__proto__.z'],[123])\r\nconsole.log(z) // 123\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.20 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c84fe82760fb2d3e03a63379b297a1cc1a2fce12)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4759)\n",
      "disclosureTime": "2020-04-27T22:14:18Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.20"
      ],
      "id": "SNYK-JS-LODASH-567746",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "NSP": [
          "1523"
        ],
        "CVE": [
          "CVE-2020-8203"
        ],
        "GHSA": [
          "GHSA-p6mc-m468-83gw"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:28:33.431814Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [
        {
          "comments": [],
          "id": "patch:SNYK-JS-LODASH-567746:0",
          "modificationTime": "2020-04-30T14:28:46.729327Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/lodash/20200430/lodash_0_0_20200430_6baae67d501e4c45021280876d42efe351e77551.patch"
          ],
          "version": ">=4.14.2"
        }
      ],
      "proprietary": false,
      "publicationTime": "2020-04-28T14:59:14Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/c84fe82760fb2d3e03a63379b297a1cc1a2fce12"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/lodash/lodash/pull/4759"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.20"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/publisher@4.0.0",
        "react-quill@1.0.0",
        "lodash@4.17.11"
      ],
      "upgradePath": [
        false,
        "react-quill@1.0.0",
        "lodash@4.17.20"
      ],
      "isUpgradable": true,
      "isPatchable": true,
      "name": "lodash",
      "version": "4.17.11"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-08-21T12:52:58.443440Z",
      "credit": [
        "awarau"
      ],
      "cvssScore": 7.3,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `setWith` and `set` functions.\r\n\r\n## PoC by awarau\r\n* Create a JS file with this contents:\r\n```\r\nlod = require('lodash')\r\nlod.setWith({}, \"__proto__[test]\", \"123\")\r\nlod.set({}, \"__proto__[test2]\", \"456\")\r\nconsole.log(Object.prototype)\r\n```\r\n* Execute it with `node`\r\n* Observe that `test` and `test2` is now in the `Object.prototype`.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.17 or higher.\n## References\n- [HackerOne Report](https://hackerone.com/reports/864701)\n",
      "disclosureTime": "2020-08-21T10:34:29Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.17"
      ],
      "id": "SNYK-JS-LODASH-608086",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": []
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-05-25T11:18:25.335427Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-08-21T12:53:03Z",
      "references": [
        {
          "title": "HackerOne Report",
          "url": "https://hackerone.com/reports/864701"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.17"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/publisher@4.0.0",
        "react-quill@1.0.0",
        "lodash@4.17.11"
      ],
      "upgradePath": [
        false,
        "react-quill@1.0.0",
        "lodash@4.17.17"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.11"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2020-10-16T16:48:40.985673Z",
      "credit": [
        "Liyuan Chen"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `toNumber`, `trim` and `trimEnd` functions.\r\n\r\n### POC\r\n```\r\nvar lo = require('lodash');\r\n\r\nfunction build_blank (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\n\r\nvar s = build_blank(50000)\r\nvar time0 = Date.now();\r\nlo.trim(s)\r\nvar time_cost0 = Date.now() - time0;\r\nconsole.log(\"time_cost0: \" + time_cost0)\r\n\r\nvar time1 = Date.now();\r\nlo.toNumber(s)\r\nvar time_cost1 = Date.now() - time1;\r\nconsole.log(\"time_cost1: \" + time_cost1)\r\n\r\nvar time2 = Date.now();\r\nlo.trimEnd(s)\r\nvar time_cost2 = Date.now() - time2;\r\nconsole.log(\"time_cost2: \" + time_cost2)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a)\n- [GitHub Fix PR](https://github.com/lodash/lodash/pull/5065)\n",
      "disclosureTime": "2020-10-16T16:47:34Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.21"
      ],
      "id": "SNYK-JS-LODASH-1018905",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2020-28500"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:26:11.286253Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:49Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a"
        },
        {
          "title": "GitHub Fix PR",
          "url": "https://github.com/lodash/lodash/pull/5065"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/publisher@4.0.0",
        "swagger-ui-react@3.45.0",
        "react-redux@4.4.10",
        "lodash@4.17.11"
      ],
      "upgradePath": [
        false,
        "swagger-ui-react@3.45.0",
        "react-redux@4.4.10",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.11"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-11-17T14:07:17.048472Z",
      "credit": [
        "Marc Hassan"
      ],
      "cvssScore": 7.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Command Injection via `template`.\r\n\r\n### PoC\r\n```js\r\nvar _ = require('lodash');\r\n\r\n_.template('', { variable: '){console.log(process.env)}; with(obj' })()\r\n```\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c)\n- [Vulnerable Code](https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js#L14851)\n",
      "disclosureTime": "2020-11-17T13:02:10Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.21"
      ],
      "id": "SNYK-JS-LODASH-1040724",
      "identifiers": {
        "CWE": [
          "CWE-78"
        ],
        "GHSA": [
          "GHSA-35jh-r3h4-6jhm"
        ],
        "CVE": [
          "CVE-2021-23337"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:28:18.096614Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:50Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js%23L14851"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Command Injection",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/publisher@4.0.0",
        "swagger-ui-react@3.45.0",
        "react-redux@4.4.10",
        "lodash@4.17.11"
      ],
      "upgradePath": [
        false,
        "swagger-ui-react@3.45.0",
        "react-redux@4.4.10",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.11"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2019-06-19T12:04:21.040000Z",
      "credit": [
        "Snyk Security Team"
      ],
      "cvssScore": 7.3,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The function `defaultsDeep` could be tricked into adding or modifying properties of `Object.prototype` using a `constructor` payload.\r\n\r\n## PoC by Snyk\r\n```\r\nconst mergeFn = require('lodash').defaultsDeep;\r\nconst payload = '{\"constructor\": {\"prototype\": {\"a0\": true}}}'\r\n\r\nfunction check() {\r\n    mergeFn({}, JSON.parse(payload));\r\n    if (({})[`a0`] === true) {\r\n        console.log(`Vulnerable to Prototype Pollution via ${payload}`);\r\n    }\r\n  }\r\n\r\ncheck();\r\n```\r\n\r\nFor more information, check out our [blog post](https://snyk.io/blog/snyk-research-team-discovers-severe-prototype-pollution-security-vulnerabilities-affecting-all-versions-of-lodash/)\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.12 or higher.\n## References\n- [GitHub Issue](https://github.com/lodash/lodash/issues/4348)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4336)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4355)\n- [GitHub PR](https://github.com/sailshq/lodash/pull/1)\n- [Node Security Advisory](https://www.npmjs.com/advisories/1065)\n- [Snyk Blog](https://snyk.io/blog/snyk-research-team-discovers-severe-prototype-pollution-security-vulnerabilities-affecting-all-versions-of-lodash/)\n",
      "disclosureTime": "2019-06-19T11:45:02Z",
      "exploit": "Proof of Concept",
      "functions": [
        {
          "functionId": {
            "filePath": "lodash.js",
            "className": null,
            "functionName": "runInContext.customDefaultsMerge"
          },
          "version": [
            ">=4.17.3 <4.17.12"
          ]
        }
      ],
      "fixedIn": [
        "4.17.12"
      ],
      "id": "SNYK-JS-LODASH-450202",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "NSP": [
          "1065"
        ],
        "CVE": [
          "CVE-2019-10744"
        ],
        "GHSA": [
          "GHSA-jf85-cpcp-j695"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:25:20.940478Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [
        {
          "comments": [],
          "id": "patch:SNYK-JS-LODASH-450202:0",
          "modificationTime": "2019-12-03T11:40:45.719849Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/lodash/20190702/lodash_20190702_0_0_1f8ea07746963a535385a5befc19fa687a627d2b.patch"
          ],
          "version": "=4.17.11"
        }
      ],
      "proprietary": true,
      "publicationTime": "2019-07-02T11:45:01Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/lodash/lodash/issues/4348"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/lodash/lodash/pull/4336"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/lodash/lodash/pull/4355"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/sailshq/lodash/pull/1"
        },
        {
          "title": "Node Security Advisory",
          "url": "https://www.npmjs.com/advisories/1065"
        },
        {
          "title": "Snyk Blog",
          "url": "https://snyk.io/blog/snyk-research-team-discovers-severe-prototype-pollution-security-vulnerabilities-affecting-all-versions-of-lodash/"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [
        {
          "functionId": {
            "filePath": "lodash.js",
            "functionName": "runInContext.customDefaultsMerge"
          },
          "version": [
            ">=4.17.3 <4.17.12"
          ]
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.12"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/publisher@4.0.0",
        "swagger-ui-react@3.45.0",
        "react-redux@4.4.10",
        "lodash@4.17.11"
      ],
      "upgradePath": [
        false,
        "swagger-ui-react@3.45.0",
        "react-redux@4.4.10",
        "lodash@4.17.12"
      ],
      "isUpgradable": true,
      "isPatchable": true,
      "name": "lodash",
      "version": "4.17.11"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-04-28T14:32:13.683154Z",
      "credit": [
        "posix"
      ],
      "cvssScore": 8.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The function `zipObjectDeep` can be tricked into adding or modifying properties of the Object prototype. These properties will be present on all objects.\r\n\r\n## PoC\r\n```\r\nconst _ = require('lodash');\r\n_.zipObjectDeep(['__proto__.z'],[123])\r\nconsole.log(z) // 123\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.20 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c84fe82760fb2d3e03a63379b297a1cc1a2fce12)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4759)\n",
      "disclosureTime": "2020-04-27T22:14:18Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.20"
      ],
      "id": "SNYK-JS-LODASH-567746",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "NSP": [
          "1523"
        ],
        "CVE": [
          "CVE-2020-8203"
        ],
        "GHSA": [
          "GHSA-p6mc-m468-83gw"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:28:33.431814Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [
        {
          "comments": [],
          "id": "patch:SNYK-JS-LODASH-567746:0",
          "modificationTime": "2020-04-30T14:28:46.729327Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/lodash/20200430/lodash_0_0_20200430_6baae67d501e4c45021280876d42efe351e77551.patch"
          ],
          "version": ">=4.14.2"
        }
      ],
      "proprietary": false,
      "publicationTime": "2020-04-28T14:59:14Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/c84fe82760fb2d3e03a63379b297a1cc1a2fce12"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/lodash/lodash/pull/4759"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.20"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/publisher@4.0.0",
        "swagger-ui-react@3.45.0",
        "react-redux@4.4.10",
        "lodash@4.17.11"
      ],
      "upgradePath": [
        false,
        "swagger-ui-react@3.45.0",
        "react-redux@4.4.10",
        "lodash@4.17.20"
      ],
      "isUpgradable": true,
      "isPatchable": true,
      "name": "lodash",
      "version": "4.17.11"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-08-21T12:52:58.443440Z",
      "credit": [
        "awarau"
      ],
      "cvssScore": 7.3,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `setWith` and `set` functions.\r\n\r\n## PoC by awarau\r\n* Create a JS file with this contents:\r\n```\r\nlod = require('lodash')\r\nlod.setWith({}, \"__proto__[test]\", \"123\")\r\nlod.set({}, \"__proto__[test2]\", \"456\")\r\nconsole.log(Object.prototype)\r\n```\r\n* Execute it with `node`\r\n* Observe that `test` and `test2` is now in the `Object.prototype`.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.17 or higher.\n## References\n- [HackerOne Report](https://hackerone.com/reports/864701)\n",
      "disclosureTime": "2020-08-21T10:34:29Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.17"
      ],
      "id": "SNYK-JS-LODASH-608086",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": []
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-05-25T11:18:25.335427Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-08-21T12:53:03Z",
      "references": [
        {
          "title": "HackerOne Report",
          "url": "https://hackerone.com/reports/864701"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.17"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/publisher@4.0.0",
        "swagger-ui-react@3.45.0",
        "react-redux@4.4.10",
        "lodash@4.17.11"
      ],
      "upgradePath": [
        false,
        "swagger-ui-react@3.45.0",
        "react-redux@4.4.10",
        "lodash@4.17.17"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.11"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2020-10-16T16:48:40.985673Z",
      "credit": [
        "Liyuan Chen"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `toNumber`, `trim` and `trimEnd` functions.\r\n\r\n### POC\r\n```\r\nvar lo = require('lodash');\r\n\r\nfunction build_blank (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\n\r\nvar s = build_blank(50000)\r\nvar time0 = Date.now();\r\nlo.trim(s)\r\nvar time_cost0 = Date.now() - time0;\r\nconsole.log(\"time_cost0: \" + time_cost0)\r\n\r\nvar time1 = Date.now();\r\nlo.toNumber(s)\r\nvar time_cost1 = Date.now() - time1;\r\nconsole.log(\"time_cost1: \" + time_cost1)\r\n\r\nvar time2 = Date.now();\r\nlo.trimEnd(s)\r\nvar time_cost2 = Date.now() - time2;\r\nconsole.log(\"time_cost2: \" + time_cost2)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a)\n- [GitHub Fix PR](https://github.com/lodash/lodash/pull/5065)\n",
      "disclosureTime": "2020-10-16T16:47:34Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.21"
      ],
      "id": "SNYK-JS-LODASH-1018905",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2020-28500"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:26:11.286253Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:49Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a"
        },
        {
          "title": "GitHub Fix PR",
          "url": "https://github.com/lodash/lodash/pull/5065"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/publisher@4.0.0",
        "swagger-ui-react@3.45.0",
        "redux@3.7.2",
        "lodash@4.17.11"
      ],
      "upgradePath": [
        false,
        "swagger-ui-react@3.45.0",
        "redux@3.7.2",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.11"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-11-17T14:07:17.048472Z",
      "credit": [
        "Marc Hassan"
      ],
      "cvssScore": 7.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Command Injection via `template`.\r\n\r\n### PoC\r\n```js\r\nvar _ = require('lodash');\r\n\r\n_.template('', { variable: '){console.log(process.env)}; with(obj' })()\r\n```\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c)\n- [Vulnerable Code](https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js#L14851)\n",
      "disclosureTime": "2020-11-17T13:02:10Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.21"
      ],
      "id": "SNYK-JS-LODASH-1040724",
      "identifiers": {
        "CWE": [
          "CWE-78"
        ],
        "GHSA": [
          "GHSA-35jh-r3h4-6jhm"
        ],
        "CVE": [
          "CVE-2021-23337"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:28:18.096614Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:50Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js%23L14851"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Command Injection",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/publisher@4.0.0",
        "swagger-ui-react@3.45.0",
        "redux@3.7.2",
        "lodash@4.17.11"
      ],
      "upgradePath": [
        false,
        "swagger-ui-react@3.45.0",
        "redux@3.7.2",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.11"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2019-06-19T12:04:21.040000Z",
      "credit": [
        "Snyk Security Team"
      ],
      "cvssScore": 7.3,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The function `defaultsDeep` could be tricked into adding or modifying properties of `Object.prototype` using a `constructor` payload.\r\n\r\n## PoC by Snyk\r\n```\r\nconst mergeFn = require('lodash').defaultsDeep;\r\nconst payload = '{\"constructor\": {\"prototype\": {\"a0\": true}}}'\r\n\r\nfunction check() {\r\n    mergeFn({}, JSON.parse(payload));\r\n    if (({})[`a0`] === true) {\r\n        console.log(`Vulnerable to Prototype Pollution via ${payload}`);\r\n    }\r\n  }\r\n\r\ncheck();\r\n```\r\n\r\nFor more information, check out our [blog post](https://snyk.io/blog/snyk-research-team-discovers-severe-prototype-pollution-security-vulnerabilities-affecting-all-versions-of-lodash/)\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.12 or higher.\n## References\n- [GitHub Issue](https://github.com/lodash/lodash/issues/4348)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4336)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4355)\n- [GitHub PR](https://github.com/sailshq/lodash/pull/1)\n- [Node Security Advisory](https://www.npmjs.com/advisories/1065)\n- [Snyk Blog](https://snyk.io/blog/snyk-research-team-discovers-severe-prototype-pollution-security-vulnerabilities-affecting-all-versions-of-lodash/)\n",
      "disclosureTime": "2019-06-19T11:45:02Z",
      "exploit": "Proof of Concept",
      "functions": [
        {
          "functionId": {
            "filePath": "lodash.js",
            "className": null,
            "functionName": "runInContext.customDefaultsMerge"
          },
          "version": [
            ">=4.17.3 <4.17.12"
          ]
        }
      ],
      "fixedIn": [
        "4.17.12"
      ],
      "id": "SNYK-JS-LODASH-450202",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "NSP": [
          "1065"
        ],
        "CVE": [
          "CVE-2019-10744"
        ],
        "GHSA": [
          "GHSA-jf85-cpcp-j695"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:25:20.940478Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [
        {
          "comments": [],
          "id": "patch:SNYK-JS-LODASH-450202:0",
          "modificationTime": "2019-12-03T11:40:45.719849Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/lodash/20190702/lodash_20190702_0_0_1f8ea07746963a535385a5befc19fa687a627d2b.patch"
          ],
          "version": "=4.17.11"
        }
      ],
      "proprietary": true,
      "publicationTime": "2019-07-02T11:45:01Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/lodash/lodash/issues/4348"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/lodash/lodash/pull/4336"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/lodash/lodash/pull/4355"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/sailshq/lodash/pull/1"
        },
        {
          "title": "Node Security Advisory",
          "url": "https://www.npmjs.com/advisories/1065"
        },
        {
          "title": "Snyk Blog",
          "url": "https://snyk.io/blog/snyk-research-team-discovers-severe-prototype-pollution-security-vulnerabilities-affecting-all-versions-of-lodash/"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [
        {
          "functionId": {
            "filePath": "lodash.js",
            "functionName": "runInContext.customDefaultsMerge"
          },
          "version": [
            ">=4.17.3 <4.17.12"
          ]
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.12"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/publisher@4.0.0",
        "swagger-ui-react@3.45.0",
        "redux@3.7.2",
        "lodash@4.17.11"
      ],
      "upgradePath": [
        false,
        "swagger-ui-react@3.45.0",
        "redux@3.7.2",
        "lodash@4.17.12"
      ],
      "isUpgradable": true,
      "isPatchable": true,
      "name": "lodash",
      "version": "4.17.11"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-04-28T14:32:13.683154Z",
      "credit": [
        "posix"
      ],
      "cvssScore": 8.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The function `zipObjectDeep` can be tricked into adding or modifying properties of the Object prototype. These properties will be present on all objects.\r\n\r\n## PoC\r\n```\r\nconst _ = require('lodash');\r\n_.zipObjectDeep(['__proto__.z'],[123])\r\nconsole.log(z) // 123\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.20 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c84fe82760fb2d3e03a63379b297a1cc1a2fce12)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4759)\n",
      "disclosureTime": "2020-04-27T22:14:18Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.20"
      ],
      "id": "SNYK-JS-LODASH-567746",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "NSP": [
          "1523"
        ],
        "CVE": [
          "CVE-2020-8203"
        ],
        "GHSA": [
          "GHSA-p6mc-m468-83gw"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:28:33.431814Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [
        {
          "comments": [],
          "id": "patch:SNYK-JS-LODASH-567746:0",
          "modificationTime": "2020-04-30T14:28:46.729327Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/lodash/20200430/lodash_0_0_20200430_6baae67d501e4c45021280876d42efe351e77551.patch"
          ],
          "version": ">=4.14.2"
        }
      ],
      "proprietary": false,
      "publicationTime": "2020-04-28T14:59:14Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/c84fe82760fb2d3e03a63379b297a1cc1a2fce12"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/lodash/lodash/pull/4759"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.20"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/publisher@4.0.0",
        "swagger-ui-react@3.45.0",
        "redux@3.7.2",
        "lodash@4.17.11"
      ],
      "upgradePath": [
        false,
        "swagger-ui-react@3.45.0",
        "redux@3.7.2",
        "lodash@4.17.20"
      ],
      "isUpgradable": true,
      "isPatchable": true,
      "name": "lodash",
      "version": "4.17.11"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-08-21T12:52:58.443440Z",
      "credit": [
        "awarau"
      ],
      "cvssScore": 7.3,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `setWith` and `set` functions.\r\n\r\n## PoC by awarau\r\n* Create a JS file with this contents:\r\n```\r\nlod = require('lodash')\r\nlod.setWith({}, \"__proto__[test]\", \"123\")\r\nlod.set({}, \"__proto__[test2]\", \"456\")\r\nconsole.log(Object.prototype)\r\n```\r\n* Execute it with `node`\r\n* Observe that `test` and `test2` is now in the `Object.prototype`.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.17 or higher.\n## References\n- [HackerOne Report](https://hackerone.com/reports/864701)\n",
      "disclosureTime": "2020-08-21T10:34:29Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.17"
      ],
      "id": "SNYK-JS-LODASH-608086",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": []
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-05-25T11:18:25.335427Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-08-21T12:53:03Z",
      "references": [
        {
          "title": "HackerOne Report",
          "url": "https://hackerone.com/reports/864701"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.17"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/publisher@4.0.0",
        "swagger-ui-react@3.45.0",
        "redux@3.7.2",
        "lodash@4.17.11"
      ],
      "upgradePath": [
        false,
        "swagger-ui-react@3.45.0",
        "redux@3.7.2",
        "lodash@4.17.17"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.11"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2020-10-16T16:48:40.985673Z",
      "credit": [
        "Liyuan Chen"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `toNumber`, `trim` and `trimEnd` functions.\r\n\r\n### POC\r\n```\r\nvar lo = require('lodash');\r\n\r\nfunction build_blank (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\n\r\nvar s = build_blank(50000)\r\nvar time0 = Date.now();\r\nlo.trim(s)\r\nvar time_cost0 = Date.now() - time0;\r\nconsole.log(\"time_cost0: \" + time_cost0)\r\n\r\nvar time1 = Date.now();\r\nlo.toNumber(s)\r\nvar time_cost1 = Date.now() - time1;\r\nconsole.log(\"time_cost1: \" + time_cost1)\r\n\r\nvar time2 = Date.now();\r\nlo.trimEnd(s)\r\nvar time_cost2 = Date.now() - time2;\r\nconsole.log(\"time_cost2: \" + time_cost2)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a)\n- [GitHub Fix PR](https://github.com/lodash/lodash/pull/5065)\n",
      "disclosureTime": "2020-10-16T16:47:34Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.21"
      ],
      "id": "SNYK-JS-LODASH-1018905",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2020-28500"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:26:11.286253Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:49Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a"
        },
        {
          "title": "GitHub Fix PR",
          "url": "https://github.com/lodash/lodash/pull/5065"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/publisher@4.0.0",
        "babel-plugin-formatjs@9.1.3",
        "@types/babel__core@7.1.12",
        "@types/babel__generator@7.0.2",
        "@babel/types@7.4.4",
        "lodash@4.17.11"
      ],
      "upgradePath": [
        false,
        "babel-plugin-formatjs@9.1.3",
        "@types/babel__core@7.1.12",
        "@types/babel__generator@7.0.2",
        "@babel/types@7.4.4",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.11"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-11-17T14:07:17.048472Z",
      "credit": [
        "Marc Hassan"
      ],
      "cvssScore": 7.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Command Injection via `template`.\r\n\r\n### PoC\r\n```js\r\nvar _ = require('lodash');\r\n\r\n_.template('', { variable: '){console.log(process.env)}; with(obj' })()\r\n```\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c)\n- [Vulnerable Code](https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js#L14851)\n",
      "disclosureTime": "2020-11-17T13:02:10Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.21"
      ],
      "id": "SNYK-JS-LODASH-1040724",
      "identifiers": {
        "CWE": [
          "CWE-78"
        ],
        "GHSA": [
          "GHSA-35jh-r3h4-6jhm"
        ],
        "CVE": [
          "CVE-2021-23337"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:28:18.096614Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:50Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js%23L14851"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Command Injection",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/publisher@4.0.0",
        "babel-plugin-formatjs@9.1.3",
        "@types/babel__core@7.1.12",
        "@types/babel__generator@7.0.2",
        "@babel/types@7.4.4",
        "lodash@4.17.11"
      ],
      "upgradePath": [
        false,
        "babel-plugin-formatjs@9.1.3",
        "@types/babel__core@7.1.12",
        "@types/babel__generator@7.0.2",
        "@babel/types@7.4.4",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.11"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2019-06-19T12:04:21.040000Z",
      "credit": [
        "Snyk Security Team"
      ],
      "cvssScore": 7.3,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The function `defaultsDeep` could be tricked into adding or modifying properties of `Object.prototype` using a `constructor` payload.\r\n\r\n## PoC by Snyk\r\n```\r\nconst mergeFn = require('lodash').defaultsDeep;\r\nconst payload = '{\"constructor\": {\"prototype\": {\"a0\": true}}}'\r\n\r\nfunction check() {\r\n    mergeFn({}, JSON.parse(payload));\r\n    if (({})[`a0`] === true) {\r\n        console.log(`Vulnerable to Prototype Pollution via ${payload}`);\r\n    }\r\n  }\r\n\r\ncheck();\r\n```\r\n\r\nFor more information, check out our [blog post](https://snyk.io/blog/snyk-research-team-discovers-severe-prototype-pollution-security-vulnerabilities-affecting-all-versions-of-lodash/)\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.12 or higher.\n## References\n- [GitHub Issue](https://github.com/lodash/lodash/issues/4348)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4336)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4355)\n- [GitHub PR](https://github.com/sailshq/lodash/pull/1)\n- [Node Security Advisory](https://www.npmjs.com/advisories/1065)\n- [Snyk Blog](https://snyk.io/blog/snyk-research-team-discovers-severe-prototype-pollution-security-vulnerabilities-affecting-all-versions-of-lodash/)\n",
      "disclosureTime": "2019-06-19T11:45:02Z",
      "exploit": "Proof of Concept",
      "functions": [
        {
          "functionId": {
            "filePath": "lodash.js",
            "className": null,
            "functionName": "runInContext.customDefaultsMerge"
          },
          "version": [
            ">=4.17.3 <4.17.12"
          ]
        }
      ],
      "fixedIn": [
        "4.17.12"
      ],
      "id": "SNYK-JS-LODASH-450202",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "NSP": [
          "1065"
        ],
        "CVE": [
          "CVE-2019-10744"
        ],
        "GHSA": [
          "GHSA-jf85-cpcp-j695"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:25:20.940478Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [
        {
          "comments": [],
          "id": "patch:SNYK-JS-LODASH-450202:0",
          "modificationTime": "2019-12-03T11:40:45.719849Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/lodash/20190702/lodash_20190702_0_0_1f8ea07746963a535385a5befc19fa687a627d2b.patch"
          ],
          "version": "=4.17.11"
        }
      ],
      "proprietary": true,
      "publicationTime": "2019-07-02T11:45:01Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/lodash/lodash/issues/4348"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/lodash/lodash/pull/4336"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/lodash/lodash/pull/4355"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/sailshq/lodash/pull/1"
        },
        {
          "title": "Node Security Advisory",
          "url": "https://www.npmjs.com/advisories/1065"
        },
        {
          "title": "Snyk Blog",
          "url": "https://snyk.io/blog/snyk-research-team-discovers-severe-prototype-pollution-security-vulnerabilities-affecting-all-versions-of-lodash/"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [
        {
          "functionId": {
            "filePath": "lodash.js",
            "functionName": "runInContext.customDefaultsMerge"
          },
          "version": [
            ">=4.17.3 <4.17.12"
          ]
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.12"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/publisher@4.0.0",
        "babel-plugin-formatjs@9.1.3",
        "@types/babel__core@7.1.12",
        "@types/babel__generator@7.0.2",
        "@babel/types@7.4.4",
        "lodash@4.17.11"
      ],
      "upgradePath": [
        false,
        "babel-plugin-formatjs@9.1.3",
        "@types/babel__core@7.1.12",
        "@types/babel__generator@7.0.2",
        "@babel/types@7.4.4",
        "lodash@4.17.12"
      ],
      "isUpgradable": true,
      "isPatchable": true,
      "name": "lodash",
      "version": "4.17.11"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-04-28T14:32:13.683154Z",
      "credit": [
        "posix"
      ],
      "cvssScore": 8.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The function `zipObjectDeep` can be tricked into adding or modifying properties of the Object prototype. These properties will be present on all objects.\r\n\r\n## PoC\r\n```\r\nconst _ = require('lodash');\r\n_.zipObjectDeep(['__proto__.z'],[123])\r\nconsole.log(z) // 123\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.20 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c84fe82760fb2d3e03a63379b297a1cc1a2fce12)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4759)\n",
      "disclosureTime": "2020-04-27T22:14:18Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.20"
      ],
      "id": "SNYK-JS-LODASH-567746",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "NSP": [
          "1523"
        ],
        "CVE": [
          "CVE-2020-8203"
        ],
        "GHSA": [
          "GHSA-p6mc-m468-83gw"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:28:33.431814Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [
        {
          "comments": [],
          "id": "patch:SNYK-JS-LODASH-567746:0",
          "modificationTime": "2020-04-30T14:28:46.729327Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/lodash/20200430/lodash_0_0_20200430_6baae67d501e4c45021280876d42efe351e77551.patch"
          ],
          "version": ">=4.14.2"
        }
      ],
      "proprietary": false,
      "publicationTime": "2020-04-28T14:59:14Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/c84fe82760fb2d3e03a63379b297a1cc1a2fce12"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/lodash/lodash/pull/4759"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.20"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/publisher@4.0.0",
        "babel-plugin-formatjs@9.1.3",
        "@types/babel__core@7.1.12",
        "@types/babel__generator@7.0.2",
        "@babel/types@7.4.4",
        "lodash@4.17.11"
      ],
      "upgradePath": [
        false,
        "babel-plugin-formatjs@9.1.3",
        "@types/babel__core@7.1.12",
        "@types/babel__generator@7.0.2",
        "@babel/types@7.4.4",
        "lodash@4.17.20"
      ],
      "isUpgradable": true,
      "isPatchable": true,
      "name": "lodash",
      "version": "4.17.11"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-08-21T12:52:58.443440Z",
      "credit": [
        "awarau"
      ],
      "cvssScore": 7.3,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `setWith` and `set` functions.\r\n\r\n## PoC by awarau\r\n* Create a JS file with this contents:\r\n```\r\nlod = require('lodash')\r\nlod.setWith({}, \"__proto__[test]\", \"123\")\r\nlod.set({}, \"__proto__[test2]\", \"456\")\r\nconsole.log(Object.prototype)\r\n```\r\n* Execute it with `node`\r\n* Observe that `test` and `test2` is now in the `Object.prototype`.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.17 or higher.\n## References\n- [HackerOne Report](https://hackerone.com/reports/864701)\n",
      "disclosureTime": "2020-08-21T10:34:29Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.17"
      ],
      "id": "SNYK-JS-LODASH-608086",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": []
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-05-25T11:18:25.335427Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-08-21T12:53:03Z",
      "references": [
        {
          "title": "HackerOne Report",
          "url": "https://hackerone.com/reports/864701"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.17"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/publisher@4.0.0",
        "babel-plugin-formatjs@9.1.3",
        "@types/babel__core@7.1.12",
        "@types/babel__generator@7.0.2",
        "@babel/types@7.4.4",
        "lodash@4.17.11"
      ],
      "upgradePath": [
        false,
        "babel-plugin-formatjs@9.1.3",
        "@types/babel__core@7.1.12",
        "@types/babel__generator@7.0.2",
        "@babel/types@7.4.4",
        "lodash@4.17.17"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.11"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2020-10-16T16:48:40.985673Z",
      "credit": [
        "Liyuan Chen"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `toNumber`, `trim` and `trimEnd` functions.\r\n\r\n### POC\r\n```\r\nvar lo = require('lodash');\r\n\r\nfunction build_blank (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\n\r\nvar s = build_blank(50000)\r\nvar time0 = Date.now();\r\nlo.trim(s)\r\nvar time_cost0 = Date.now() - time0;\r\nconsole.log(\"time_cost0: \" + time_cost0)\r\n\r\nvar time1 = Date.now();\r\nlo.toNumber(s)\r\nvar time_cost1 = Date.now() - time1;\r\nconsole.log(\"time_cost1: \" + time_cost1)\r\n\r\nvar time2 = Date.now();\r\nlo.trimEnd(s)\r\nvar time_cost2 = Date.now() - time2;\r\nconsole.log(\"time_cost2: \" + time_cost2)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a)\n- [GitHub Fix PR](https://github.com/lodash/lodash/pull/5065)\n",
      "disclosureTime": "2020-10-16T16:47:34Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.21"
      ],
      "id": "SNYK-JS-LODASH-1018905",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2020-28500"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:26:11.286253Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:49Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a"
        },
        {
          "title": "GitHub Fix PR",
          "url": "https://github.com/lodash/lodash/pull/5065"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/publisher@4.0.0",
        "babel-plugin-formatjs@9.1.3",
        "@types/babel__core@7.1.12",
        "@types/babel__template@7.0.2",
        "@babel/types@7.4.4",
        "lodash@4.17.11"
      ],
      "upgradePath": [
        false,
        "babel-plugin-formatjs@9.1.3",
        "@types/babel__core@7.1.12",
        "@types/babel__template@7.0.2",
        "@babel/types@7.4.4",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.11"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-11-17T14:07:17.048472Z",
      "credit": [
        "Marc Hassan"
      ],
      "cvssScore": 7.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Command Injection via `template`.\r\n\r\n### PoC\r\n```js\r\nvar _ = require('lodash');\r\n\r\n_.template('', { variable: '){console.log(process.env)}; with(obj' })()\r\n```\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c)\n- [Vulnerable Code](https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js#L14851)\n",
      "disclosureTime": "2020-11-17T13:02:10Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.21"
      ],
      "id": "SNYK-JS-LODASH-1040724",
      "identifiers": {
        "CWE": [
          "CWE-78"
        ],
        "GHSA": [
          "GHSA-35jh-r3h4-6jhm"
        ],
        "CVE": [
          "CVE-2021-23337"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:28:18.096614Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:50Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js%23L14851"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Command Injection",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/publisher@4.0.0",
        "babel-plugin-formatjs@9.1.3",
        "@types/babel__core@7.1.12",
        "@types/babel__template@7.0.2",
        "@babel/types@7.4.4",
        "lodash@4.17.11"
      ],
      "upgradePath": [
        false,
        "babel-plugin-formatjs@9.1.3",
        "@types/babel__core@7.1.12",
        "@types/babel__template@7.0.2",
        "@babel/types@7.4.4",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.11"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2019-06-19T12:04:21.040000Z",
      "credit": [
        "Snyk Security Team"
      ],
      "cvssScore": 7.3,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The function `defaultsDeep` could be tricked into adding or modifying properties of `Object.prototype` using a `constructor` payload.\r\n\r\n## PoC by Snyk\r\n```\r\nconst mergeFn = require('lodash').defaultsDeep;\r\nconst payload = '{\"constructor\": {\"prototype\": {\"a0\": true}}}'\r\n\r\nfunction check() {\r\n    mergeFn({}, JSON.parse(payload));\r\n    if (({})[`a0`] === true) {\r\n        console.log(`Vulnerable to Prototype Pollution via ${payload}`);\r\n    }\r\n  }\r\n\r\ncheck();\r\n```\r\n\r\nFor more information, check out our [blog post](https://snyk.io/blog/snyk-research-team-discovers-severe-prototype-pollution-security-vulnerabilities-affecting-all-versions-of-lodash/)\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.12 or higher.\n## References\n- [GitHub Issue](https://github.com/lodash/lodash/issues/4348)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4336)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4355)\n- [GitHub PR](https://github.com/sailshq/lodash/pull/1)\n- [Node Security Advisory](https://www.npmjs.com/advisories/1065)\n- [Snyk Blog](https://snyk.io/blog/snyk-research-team-discovers-severe-prototype-pollution-security-vulnerabilities-affecting-all-versions-of-lodash/)\n",
      "disclosureTime": "2019-06-19T11:45:02Z",
      "exploit": "Proof of Concept",
      "functions": [
        {
          "functionId": {
            "filePath": "lodash.js",
            "className": null,
            "functionName": "runInContext.customDefaultsMerge"
          },
          "version": [
            ">=4.17.3 <4.17.12"
          ]
        }
      ],
      "fixedIn": [
        "4.17.12"
      ],
      "id": "SNYK-JS-LODASH-450202",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "NSP": [
          "1065"
        ],
        "CVE": [
          "CVE-2019-10744"
        ],
        "GHSA": [
          "GHSA-jf85-cpcp-j695"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:25:20.940478Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [
        {
          "comments": [],
          "id": "patch:SNYK-JS-LODASH-450202:0",
          "modificationTime": "2019-12-03T11:40:45.719849Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/lodash/20190702/lodash_20190702_0_0_1f8ea07746963a535385a5befc19fa687a627d2b.patch"
          ],
          "version": "=4.17.11"
        }
      ],
      "proprietary": true,
      "publicationTime": "2019-07-02T11:45:01Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/lodash/lodash/issues/4348"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/lodash/lodash/pull/4336"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/lodash/lodash/pull/4355"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/sailshq/lodash/pull/1"
        },
        {
          "title": "Node Security Advisory",
          "url": "https://www.npmjs.com/advisories/1065"
        },
        {
          "title": "Snyk Blog",
          "url": "https://snyk.io/blog/snyk-research-team-discovers-severe-prototype-pollution-security-vulnerabilities-affecting-all-versions-of-lodash/"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [
        {
          "functionId": {
            "filePath": "lodash.js",
            "functionName": "runInContext.customDefaultsMerge"
          },
          "version": [
            ">=4.17.3 <4.17.12"
          ]
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.12"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/publisher@4.0.0",
        "babel-plugin-formatjs@9.1.3",
        "@types/babel__core@7.1.12",
        "@types/babel__template@7.0.2",
        "@babel/types@7.4.4",
        "lodash@4.17.11"
      ],
      "upgradePath": [
        false,
        "babel-plugin-formatjs@9.1.3",
        "@types/babel__core@7.1.12",
        "@types/babel__template@7.0.2",
        "@babel/types@7.4.4",
        "lodash@4.17.12"
      ],
      "isUpgradable": true,
      "isPatchable": true,
      "name": "lodash",
      "version": "4.17.11"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-04-28T14:32:13.683154Z",
      "credit": [
        "posix"
      ],
      "cvssScore": 8.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The function `zipObjectDeep` can be tricked into adding or modifying properties of the Object prototype. These properties will be present on all objects.\r\n\r\n## PoC\r\n```\r\nconst _ = require('lodash');\r\n_.zipObjectDeep(['__proto__.z'],[123])\r\nconsole.log(z) // 123\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.20 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c84fe82760fb2d3e03a63379b297a1cc1a2fce12)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4759)\n",
      "disclosureTime": "2020-04-27T22:14:18Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.20"
      ],
      "id": "SNYK-JS-LODASH-567746",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "NSP": [
          "1523"
        ],
        "CVE": [
          "CVE-2020-8203"
        ],
        "GHSA": [
          "GHSA-p6mc-m468-83gw"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:28:33.431814Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [
        {
          "comments": [],
          "id": "patch:SNYK-JS-LODASH-567746:0",
          "modificationTime": "2020-04-30T14:28:46.729327Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/lodash/20200430/lodash_0_0_20200430_6baae67d501e4c45021280876d42efe351e77551.patch"
          ],
          "version": ">=4.14.2"
        }
      ],
      "proprietary": false,
      "publicationTime": "2020-04-28T14:59:14Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/c84fe82760fb2d3e03a63379b297a1cc1a2fce12"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/lodash/lodash/pull/4759"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.20"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/publisher@4.0.0",
        "babel-plugin-formatjs@9.1.3",
        "@types/babel__core@7.1.12",
        "@types/babel__template@7.0.2",
        "@babel/types@7.4.4",
        "lodash@4.17.11"
      ],
      "upgradePath": [
        false,
        "babel-plugin-formatjs@9.1.3",
        "@types/babel__core@7.1.12",
        "@types/babel__template@7.0.2",
        "@babel/types@7.4.4",
        "lodash@4.17.20"
      ],
      "isUpgradable": true,
      "isPatchable": true,
      "name": "lodash",
      "version": "4.17.11"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-08-21T12:52:58.443440Z",
      "credit": [
        "awarau"
      ],
      "cvssScore": 7.3,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `setWith` and `set` functions.\r\n\r\n## PoC by awarau\r\n* Create a JS file with this contents:\r\n```\r\nlod = require('lodash')\r\nlod.setWith({}, \"__proto__[test]\", \"123\")\r\nlod.set({}, \"__proto__[test2]\", \"456\")\r\nconsole.log(Object.prototype)\r\n```\r\n* Execute it with `node`\r\n* Observe that `test` and `test2` is now in the `Object.prototype`.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.17 or higher.\n## References\n- [HackerOne Report](https://hackerone.com/reports/864701)\n",
      "disclosureTime": "2020-08-21T10:34:29Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.17"
      ],
      "id": "SNYK-JS-LODASH-608086",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": []
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-05-25T11:18:25.335427Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-08-21T12:53:03Z",
      "references": [
        {
          "title": "HackerOne Report",
          "url": "https://hackerone.com/reports/864701"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.17"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/publisher@4.0.0",
        "babel-plugin-formatjs@9.1.3",
        "@types/babel__core@7.1.12",
        "@types/babel__template@7.0.2",
        "@babel/types@7.4.4",
        "lodash@4.17.11"
      ],
      "upgradePath": [
        false,
        "babel-plugin-formatjs@9.1.3",
        "@types/babel__core@7.1.12",
        "@types/babel__template@7.0.2",
        "@babel/types@7.4.4",
        "lodash@4.17.17"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.11"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2020-10-16T16:48:40.985673Z",
      "credit": [
        "Liyuan Chen"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `toNumber`, `trim` and `trimEnd` functions.\r\n\r\n### POC\r\n```\r\nvar lo = require('lodash');\r\n\r\nfunction build_blank (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\n\r\nvar s = build_blank(50000)\r\nvar time0 = Date.now();\r\nlo.trim(s)\r\nvar time_cost0 = Date.now() - time0;\r\nconsole.log(\"time_cost0: \" + time_cost0)\r\n\r\nvar time1 = Date.now();\r\nlo.toNumber(s)\r\nvar time_cost1 = Date.now() - time1;\r\nconsole.log(\"time_cost1: \" + time_cost1)\r\n\r\nvar time2 = Date.now();\r\nlo.trimEnd(s)\r\nvar time_cost2 = Date.now() - time2;\r\nconsole.log(\"time_cost2: \" + time_cost2)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a)\n- [GitHub Fix PR](https://github.com/lodash/lodash/pull/5065)\n",
      "disclosureTime": "2020-10-16T16:47:34Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.21"
      ],
      "id": "SNYK-JS-LODASH-1018905",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2020-28500"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:26:11.286253Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:49Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a"
        },
        {
          "title": "GitHub Fix PR",
          "url": "https://github.com/lodash/lodash/pull/5065"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/publisher@4.0.0",
        "babel-plugin-formatjs@9.1.3",
        "@types/babel__core@7.1.12",
        "@types/babel__traverse@7.0.7",
        "@babel/types@7.4.4",
        "lodash@4.17.11"
      ],
      "upgradePath": [
        false,
        "babel-plugin-formatjs@9.1.3",
        "@types/babel__core@7.1.12",
        "@types/babel__traverse@7.0.7",
        "@babel/types@7.4.4",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.11"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-11-17T14:07:17.048472Z",
      "credit": [
        "Marc Hassan"
      ],
      "cvssScore": 7.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Command Injection via `template`.\r\n\r\n### PoC\r\n```js\r\nvar _ = require('lodash');\r\n\r\n_.template('', { variable: '){console.log(process.env)}; with(obj' })()\r\n```\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c)\n- [Vulnerable Code](https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js#L14851)\n",
      "disclosureTime": "2020-11-17T13:02:10Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.21"
      ],
      "id": "SNYK-JS-LODASH-1040724",
      "identifiers": {
        "CWE": [
          "CWE-78"
        ],
        "GHSA": [
          "GHSA-35jh-r3h4-6jhm"
        ],
        "CVE": [
          "CVE-2021-23337"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:28:18.096614Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:50Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js%23L14851"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Command Injection",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/publisher@4.0.0",
        "babel-plugin-formatjs@9.1.3",
        "@types/babel__core@7.1.12",
        "@types/babel__traverse@7.0.7",
        "@babel/types@7.4.4",
        "lodash@4.17.11"
      ],
      "upgradePath": [
        false,
        "babel-plugin-formatjs@9.1.3",
        "@types/babel__core@7.1.12",
        "@types/babel__traverse@7.0.7",
        "@babel/types@7.4.4",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.11"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2019-06-19T12:04:21.040000Z",
      "credit": [
        "Snyk Security Team"
      ],
      "cvssScore": 7.3,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The function `defaultsDeep` could be tricked into adding or modifying properties of `Object.prototype` using a `constructor` payload.\r\n\r\n## PoC by Snyk\r\n```\r\nconst mergeFn = require('lodash').defaultsDeep;\r\nconst payload = '{\"constructor\": {\"prototype\": {\"a0\": true}}}'\r\n\r\nfunction check() {\r\n    mergeFn({}, JSON.parse(payload));\r\n    if (({})[`a0`] === true) {\r\n        console.log(`Vulnerable to Prototype Pollution via ${payload}`);\r\n    }\r\n  }\r\n\r\ncheck();\r\n```\r\n\r\nFor more information, check out our [blog post](https://snyk.io/blog/snyk-research-team-discovers-severe-prototype-pollution-security-vulnerabilities-affecting-all-versions-of-lodash/)\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.12 or higher.\n## References\n- [GitHub Issue](https://github.com/lodash/lodash/issues/4348)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4336)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4355)\n- [GitHub PR](https://github.com/sailshq/lodash/pull/1)\n- [Node Security Advisory](https://www.npmjs.com/advisories/1065)\n- [Snyk Blog](https://snyk.io/blog/snyk-research-team-discovers-severe-prototype-pollution-security-vulnerabilities-affecting-all-versions-of-lodash/)\n",
      "disclosureTime": "2019-06-19T11:45:02Z",
      "exploit": "Proof of Concept",
      "functions": [
        {
          "functionId": {
            "filePath": "lodash.js",
            "className": null,
            "functionName": "runInContext.customDefaultsMerge"
          },
          "version": [
            ">=4.17.3 <4.17.12"
          ]
        }
      ],
      "fixedIn": [
        "4.17.12"
      ],
      "id": "SNYK-JS-LODASH-450202",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "NSP": [
          "1065"
        ],
        "CVE": [
          "CVE-2019-10744"
        ],
        "GHSA": [
          "GHSA-jf85-cpcp-j695"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:25:20.940478Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [
        {
          "comments": [],
          "id": "patch:SNYK-JS-LODASH-450202:0",
          "modificationTime": "2019-12-03T11:40:45.719849Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/lodash/20190702/lodash_20190702_0_0_1f8ea07746963a535385a5befc19fa687a627d2b.patch"
          ],
          "version": "=4.17.11"
        }
      ],
      "proprietary": true,
      "publicationTime": "2019-07-02T11:45:01Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/lodash/lodash/issues/4348"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/lodash/lodash/pull/4336"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/lodash/lodash/pull/4355"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/sailshq/lodash/pull/1"
        },
        {
          "title": "Node Security Advisory",
          "url": "https://www.npmjs.com/advisories/1065"
        },
        {
          "title": "Snyk Blog",
          "url": "https://snyk.io/blog/snyk-research-team-discovers-severe-prototype-pollution-security-vulnerabilities-affecting-all-versions-of-lodash/"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [
        {
          "functionId": {
            "filePath": "lodash.js",
            "functionName": "runInContext.customDefaultsMerge"
          },
          "version": [
            ">=4.17.3 <4.17.12"
          ]
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.12"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/publisher@4.0.0",
        "babel-plugin-formatjs@9.1.3",
        "@types/babel__core@7.1.12",
        "@types/babel__traverse@7.0.7",
        "@babel/types@7.4.4",
        "lodash@4.17.11"
      ],
      "upgradePath": [
        false,
        "babel-plugin-formatjs@9.1.3",
        "@types/babel__core@7.1.12",
        "@types/babel__traverse@7.0.7",
        "@babel/types@7.4.4",
        "lodash@4.17.12"
      ],
      "isUpgradable": true,
      "isPatchable": true,
      "name": "lodash",
      "version": "4.17.11"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-04-28T14:32:13.683154Z",
      "credit": [
        "posix"
      ],
      "cvssScore": 8.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The function `zipObjectDeep` can be tricked into adding or modifying properties of the Object prototype. These properties will be present on all objects.\r\n\r\n## PoC\r\n```\r\nconst _ = require('lodash');\r\n_.zipObjectDeep(['__proto__.z'],[123])\r\nconsole.log(z) // 123\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.20 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c84fe82760fb2d3e03a63379b297a1cc1a2fce12)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4759)\n",
      "disclosureTime": "2020-04-27T22:14:18Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.20"
      ],
      "id": "SNYK-JS-LODASH-567746",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "NSP": [
          "1523"
        ],
        "CVE": [
          "CVE-2020-8203"
        ],
        "GHSA": [
          "GHSA-p6mc-m468-83gw"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:28:33.431814Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [
        {
          "comments": [],
          "id": "patch:SNYK-JS-LODASH-567746:0",
          "modificationTime": "2020-04-30T14:28:46.729327Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/lodash/20200430/lodash_0_0_20200430_6baae67d501e4c45021280876d42efe351e77551.patch"
          ],
          "version": ">=4.14.2"
        }
      ],
      "proprietary": false,
      "publicationTime": "2020-04-28T14:59:14Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/c84fe82760fb2d3e03a63379b297a1cc1a2fce12"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/lodash/lodash/pull/4759"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.20"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/publisher@4.0.0",
        "babel-plugin-formatjs@9.1.3",
        "@types/babel__core@7.1.12",
        "@types/babel__traverse@7.0.7",
        "@babel/types@7.4.4",
        "lodash@4.17.11"
      ],
      "upgradePath": [
        false,
        "babel-plugin-formatjs@9.1.3",
        "@types/babel__core@7.1.12",
        "@types/babel__traverse@7.0.7",
        "@babel/types@7.4.4",
        "lodash@4.17.20"
      ],
      "isUpgradable": true,
      "isPatchable": true,
      "name": "lodash",
      "version": "4.17.11"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-08-21T12:52:58.443440Z",
      "credit": [
        "awarau"
      ],
      "cvssScore": 7.3,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `setWith` and `set` functions.\r\n\r\n## PoC by awarau\r\n* Create a JS file with this contents:\r\n```\r\nlod = require('lodash')\r\nlod.setWith({}, \"__proto__[test]\", \"123\")\r\nlod.set({}, \"__proto__[test2]\", \"456\")\r\nconsole.log(Object.prototype)\r\n```\r\n* Execute it with `node`\r\n* Observe that `test` and `test2` is now in the `Object.prototype`.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.17 or higher.\n## References\n- [HackerOne Report](https://hackerone.com/reports/864701)\n",
      "disclosureTime": "2020-08-21T10:34:29Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.17"
      ],
      "id": "SNYK-JS-LODASH-608086",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": []
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-05-25T11:18:25.335427Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-08-21T12:53:03Z",
      "references": [
        {
          "title": "HackerOne Report",
          "url": "https://hackerone.com/reports/864701"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.17"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/publisher@4.0.0",
        "babel-plugin-formatjs@9.1.3",
        "@types/babel__core@7.1.12",
        "@types/babel__traverse@7.0.7",
        "@babel/types@7.4.4",
        "lodash@4.17.11"
      ],
      "upgradePath": [
        false,
        "babel-plugin-formatjs@9.1.3",
        "@types/babel__core@7.1.12",
        "@types/babel__traverse@7.0.7",
        "@babel/types@7.4.4",
        "lodash@4.17.17"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.11"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2020-10-16T16:48:40.985673Z",
      "credit": [
        "Liyuan Chen"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `toNumber`, `trim` and `trimEnd` functions.\r\n\r\n### POC\r\n```\r\nvar lo = require('lodash');\r\n\r\nfunction build_blank (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\n\r\nvar s = build_blank(50000)\r\nvar time0 = Date.now();\r\nlo.trim(s)\r\nvar time_cost0 = Date.now() - time0;\r\nconsole.log(\"time_cost0: \" + time_cost0)\r\n\r\nvar time1 = Date.now();\r\nlo.toNumber(s)\r\nvar time_cost1 = Date.now() - time1;\r\nconsole.log(\"time_cost1: \" + time_cost1)\r\n\r\nvar time2 = Date.now();\r\nlo.trimEnd(s)\r\nvar time_cost2 = Date.now() - time2;\r\nconsole.log(\"time_cost2: \" + time_cost2)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a)\n- [GitHub Fix PR](https://github.com/lodash/lodash/pull/5065)\n",
      "disclosureTime": "2020-10-16T16:47:34Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.21"
      ],
      "id": "SNYK-JS-LODASH-1018905",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2020-28500"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:26:11.286253Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:49Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a"
        },
        {
          "title": "GitHub Fix PR",
          "url": "https://github.com/lodash/lodash/pull/5065"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/publisher@4.0.0",
        "swagger-client@3.12.0",
        "lodash@4.17.20"
      ],
      "upgradePath": [
        false,
        "swagger-client@3.12.0",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.20"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-11-17T14:07:17.048472Z",
      "credit": [
        "Marc Hassan"
      ],
      "cvssScore": 7.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Command Injection via `template`.\r\n\r\n### PoC\r\n```js\r\nvar _ = require('lodash');\r\n\r\n_.template('', { variable: '){console.log(process.env)}; with(obj' })()\r\n```\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c)\n- [Vulnerable Code](https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js#L14851)\n",
      "disclosureTime": "2020-11-17T13:02:10Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.17.21"
      ],
      "id": "SNYK-JS-LODASH-1040724",
      "identifiers": {
        "CWE": [
          "CWE-78"
        ],
        "GHSA": [
          "GHSA-35jh-r3h4-6jhm"
        ],
        "CVE": [
          "CVE-2021-23337"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:28:18.096614Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:50Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js%23L14851"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Command Injection",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/publisher@4.0.0",
        "swagger-client@3.12.0",
        "lodash@4.17.20"
      ],
      "upgradePath": [
        false,
        "swagger-client@3.12.0",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.20"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2019-02-27T08:49:26.109000Z",
      "credit": [
        "asgerf"
      ],
      "cvssScore": 7.3,
      "description": "## Overview\n[lodash.merge](https://www.npmjs.com/package/lodash.merge) is a Lodash method _.merge exported as a Node.js module.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The functions `merge`, `mergeWith`, and `defaultsDeep` could be tricked into adding or modifying properties of `Object.prototype`. This is due to an incomplete fix to `CVE-2018-3721`.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash.merge` to version 4.6.2 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/90e6199a161b6445b01454517b40ef65ebecd2ad)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4337)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/1066)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/1068)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/1071)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/782)\n- [POC: HackerOne Report](https://hackerone.com/reports/380873)\n",
      "disclosureTime": "2018-08-31T18:21:00Z",
      "exploit": "Proof of Concept",
      "functions": [
        {
          "functionId": {
            "filePath": "index.js",
            "className": null,
            "functionName": "merge"
          },
          "version": [
            ">=2.0.0 <3.0.0"
          ]
        },
        {
          "functionId": {
            "filePath": "index.js",
            "className": null,
            "functionName": "baseMerge"
          },
          "version": [
            ">=3.0.0 <4.6.1"
          ]
        },
        {
          "functionId": {
            "filePath": "index.js",
            "className": null,
            "functionName": "baseMergeDeep"
          },
          "version": [
            ">=3.0.0 <4.6.1"
          ]
        },
        {
          "functionId": {
            "filePath": "index.js",
            "className": null,
            "functionName": "safeGet"
          },
          "version": [
            ">4.6.0 <=4.6.1"
          ]
        }
      ],
      "fixedIn": [
        "4.6.2"
      ],
      "id": "SNYK-JS-LODASHMERGE-173732",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "NSP": [
          "782",
          "1066",
          "1068",
          "1071"
        ],
        "CVE": [
          "CVE-2018-16487"
        ],
        "GHSA": [
          "GHSA-4xc9-xhrj-v574"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:27:17.510305Z",
      "moduleName": "lodash.merge",
      "packageManager": "npm",
      "packageName": "lodash.merge",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2019-02-01T18:21:00Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/90e6199a161b6445b01454517b40ef65ebecd2ad"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/lodash/lodash/pull/4337"
        },
        {
          "title": "NPM Security Advisory",
          "url": "https://www.npmjs.com/advisories/1066"
        },
        {
          "title": "NPM Security Advisory",
          "url": "https://www.npmjs.com/advisories/1068"
        },
        {
          "title": "NPM Security Advisory",
          "url": "https://www.npmjs.com/advisories/1071"
        },
        {
          "title": "NPM Security Advisory",
          "url": "https://www.npmjs.com/advisories/782"
        },
        {
          "title": "POC: HackerOne Report",
          "url": "https://hackerone.com/reports/380873"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "merge"
          },
          "version": [
            ">=2.0.0 <3.0.0"
          ]
        },
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "baseMerge"
          },
          "version": [
            ">=3.0.0 <4.6.1"
          ]
        },
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "baseMergeDeep"
          },
          "version": [
            ">=3.0.0 <4.6.1"
          ]
        },
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "safeGet"
          },
          "version": [
            ">4.6.0 <=4.6.1"
          ]
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.6.2"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/publisher@4.0.0",
        "react-safe-html@0.6.1",
        "cheerio@0.22.0",
        "lodash.merge@4.6.1"
      ],
      "upgradePath": [
        false,
        "react-safe-html@0.6.1",
        "cheerio@0.22.0",
        "lodash.merge@4.6.2"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash.merge",
      "version": "4.6.1"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2019-02-27T12:37:39.476000Z",
      "credit": [
        "Olivier Arteau (HoLyVieR)"
      ],
      "cvssScore": 6.3,
      "description": "## Overview\n[lodash.merge](https://www.npmjs.com/package/lodash.merge) is a Lodash method _.merge exported as a Node.js module.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The utilities function allow modification of the `Object` prototype. If an attacker can control part of the structure passed to this function, they could add or modify an existing property.  \r\n\r\n## PoC by Olivier Arteau (HoLyVieR)\r\n```js\r\nvar _= require('lodash');\r\nvar malicious_payload = '{\"__proto__\":{\"oops\":\"It works !\"}}';\r\n\r\nvar a = {};\r\nconsole.log(\"Before : \" + a.oops);\r\n_.merge({}, JSON.parse(malicious_payload));\r\nconsole.log(\"After : \" + a.oops);\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash.merge` to version 4.6.2 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/d8e069cc3410082e44eb18fcf8e7f3d08ebe1d4a)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4337)\n- [HackerOne Report](https://hackerone.com/reports/310443)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/1067)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/1069)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/1070)\n",
      "disclosureTime": "2018-01-30T22:28:27Z",
      "exploit": "Proof of Concept",
      "functions": [
        {
          "functionId": {
            "filePath": "index.js",
            "className": null,
            "functionName": "merge"
          },
          "version": [
            ">=2.0.0 <3.0.0"
          ]
        },
        {
          "functionId": {
            "filePath": "index.js",
            "className": null,
            "functionName": "baseMerge"
          },
          "version": [
            ">=3.0.0 <4.6.1"
          ]
        },
        {
          "functionId": {
            "filePath": "index.js",
            "className": null,
            "functionName": "baseMergeDeep"
          },
          "version": [
            ">=3.0.0 <4.6.1"
          ]
        },
        {
          "functionId": {
            "filePath": "index.js",
            "className": null,
            "functionName": "safeGet"
          },
          "version": [
            ">4.6.0 <=4.6.1"
          ]
        }
      ],
      "fixedIn": [
        "4.6.2"
      ],
      "id": "SNYK-JS-LODASHMERGE-173733",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "NSP": [
          "577",
          "1067",
          "1069",
          "1070"
        ],
        "CVE": [
          "CVE-2018-3721"
        ],
        "GHSA": [
          "GHSA-fvqr-27wr-82fm",
          "GHSA-5947-m4fg-xhqg",
          "GHSA-46fh-8fc5-xcwx",
          "GHSA-2m96-9w4j-wgv7"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:26:34.848392Z",
      "moduleName": "lodash.merge",
      "packageManager": "npm",
      "packageName": "lodash.merge",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2018-02-14T13:22:50Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/d8e069cc3410082e44eb18fcf8e7f3d08ebe1d4a"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/lodash/lodash/pull/4337"
        },
        {
          "title": "HackerOne Report",
          "url": "https://hackerone.com/reports/310443"
        },
        {
          "title": "NPM Security Advisory",
          "url": "https://www.npmjs.com/advisories/1067"
        },
        {
          "title": "NPM Security Advisory",
          "url": "https://www.npmjs.com/advisories/1069"
        },
        {
          "title": "NPM Security Advisory",
          "url": "https://www.npmjs.com/advisories/1070"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "merge"
          },
          "version": [
            ">=2.0.0 <3.0.0"
          ]
        },
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "baseMerge"
          },
          "version": [
            ">=3.0.0 <4.6.1"
          ]
        },
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "baseMergeDeep"
          },
          "version": [
            ">=3.0.0 <4.6.1"
          ]
        },
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "safeGet"
          },
          "version": [
            ">4.6.0 <=4.6.1"
          ]
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.6.2"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/publisher@4.0.0",
        "react-safe-html@0.6.1",
        "cheerio@0.22.0",
        "lodash.merge@4.6.1"
      ],
      "upgradePath": [
        false,
        "react-safe-html@0.6.1",
        "cheerio@0.22.0",
        "lodash.merge@4.6.2"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash.merge",
      "version": "4.6.1"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [],
      "creationTime": "2022-01-09T12:32:53.638297Z",
      "credit": [
        "Fujinami Hiroya"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[markdown-it](https://www.npmjs.com/package/markdown-it) is a modern pluggable markdown parser.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `/s+$/` in line 23 of `lib/rules_inline/newline.js`. This expression is used to remove trailing whitespaces from a string, however, it also matches non-trailing whitespaces.\r\nIn the worst-case scenario, the matching process would take computation time proportional to the square of the length of the non-trailing whitespaces. It is possible that a string containing more than tens of thousands characters, as `markdown-it` handles `Markdown`, would be passed over the network, resulting in significant computational time.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `markdown-it` to version 12.3.2 or higher.\n## References\n- [GitHub Commit](https://github.com/markdown-it/markdown-it/commit/ffc49ab46b5b751cd2be0aabb146f2ef84986101)\n",
      "disclosureTime": "2022-01-09T12:22:24Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "12.3.2"
      ],
      "id": "SNYK-JS-MARKDOWNIT-2331914",
      "identifiers": {
        "CWE": [
          "CWE-1333"
        ],
        "CVE": [
          "CVE-2022-21670"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-01-11T11:44:58.462314Z",
      "moduleName": "markdown-it",
      "packageManager": "npm",
      "packageName": "markdown-it",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-01-09T15:54:45Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/markdown-it/markdown-it/commit/ffc49ab46b5b751cd2be0aabb146f2ef84986101"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<12.3.2"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/publisher@4.0.0",
        "@asyncapi/react-component@0.19.2",
        "markdown-it@11.0.1"
      ],
      "upgradePath": [
        false,
        "@asyncapi/react-component@0.24.20",
        "markdown-it@12.3.2"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "markdown-it",
      "version": "11.0.1"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2022-03-18T13:02:08.840039Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution due to a missing handler to `Function.prototype`.\r\n\r\n**Notes:** \r\n\r\n- This vulnerability is a bypass to [CVE-2020-7598](https://security.snyk.io/vuln/SNYK-JS-MINIMIST-559764)\r\n\r\n- The reason for the different CVSS between CVE-2021-44906 to CVE-2020-7598, is that CVE-2020-7598 can pollute objects, while CVE-2021-44906 can pollute only function.\r\n\r\n\r\n## PoC by Snyk\r\n```js\r\nrequire('minimist')('--_.constructor.constructor.prototype.foo bar'.split(' '));\r\nconsole.log((function(){}).foo); // bar\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 1.2.6 or higher.\n## References\n- [Fix Commit](https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d)\n- [GitHub Issue](https://github.com/substack/minimist/issues/164)\n- [Vulnerable Code](https://github.com/substack/minimist/blob/master/index.js#L69)\n",
      "disclosureTime": "2022-03-18T12:24:05Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "1.2.6"
      ],
      "id": "SNYK-JS-MINIMIST-2429795",
      "identifiers": {
        "CWE": [
          "CWE-1321"
        ],
        "SNYK": [
          "SNYK-JS-MINIMIST-559764"
        ],
        "CVE": [
          "CVE-2021-44906"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-06-06T12:01:22.204194Z",
      "moduleName": "minimist",
      "packageManager": "npm",
      "packageName": "minimist",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-03-21T12:09:35Z",
      "references": [
        {
          "title": "Fix Commit",
          "url": "https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/substack/minimist/issues/164"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/substack/minimist/blob/master/index.js%23L69"
        }
      ],
      "severity": "low",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<1.2.6"
        ]
      },
      "severityWithCritical": "low",
      "from": [
        "@wso2apim/publisher@4.0.0",
        "babel-plugin-formatjs@9.1.3",
        "@babel/core@7.13.0",
        "json5@2.2.0",
        "minimist@1.2.5"
      ],
      "upgradePath": [
        false,
        "babel-plugin-formatjs@9.1.3",
        "@babel/core@7.13.0",
        "json5@2.2.0",
        "minimist@1.2.6"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "minimist",
      "version": "1.2.5"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2022-03-18T13:02:08.840039Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution due to a missing handler to `Function.prototype`.\r\n\r\n**Notes:** \r\n\r\n- This vulnerability is a bypass to [CVE-2020-7598](https://security.snyk.io/vuln/SNYK-JS-MINIMIST-559764)\r\n\r\n- The reason for the different CVSS between CVE-2021-44906 to CVE-2020-7598, is that CVE-2020-7598 can pollute objects, while CVE-2021-44906 can pollute only function.\r\n\r\n\r\n## PoC by Snyk\r\n```js\r\nrequire('minimist')('--_.constructor.constructor.prototype.foo bar'.split(' '));\r\nconsole.log((function(){}).foo); // bar\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 1.2.6 or higher.\n## References\n- [Fix Commit](https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d)\n- [GitHub Issue](https://github.com/substack/minimist/issues/164)\n- [Vulnerable Code](https://github.com/substack/minimist/blob/master/index.js#L69)\n",
      "disclosureTime": "2022-03-18T12:24:05Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "1.2.6"
      ],
      "id": "SNYK-JS-MINIMIST-2429795",
      "identifiers": {
        "CWE": [
          "CWE-1321"
        ],
        "SNYK": [
          "SNYK-JS-MINIMIST-559764"
        ],
        "CVE": [
          "CVE-2021-44906"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-06-06T12:01:22.204194Z",
      "moduleName": "minimist",
      "packageManager": "npm",
      "packageName": "minimist",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-03-21T12:09:35Z",
      "references": [
        {
          "title": "Fix Commit",
          "url": "https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/substack/minimist/issues/164"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/substack/minimist/blob/master/index.js%23L69"
        }
      ],
      "severity": "low",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<1.2.6"
        ]
      },
      "severityWithCritical": "low",
      "from": [
        "@wso2apim/publisher@4.0.0",
        "file-loader@6.2.0",
        "loader-utils@2.0.0",
        "json5@2.2.0",
        "minimist@1.2.5"
      ],
      "upgradePath": [
        false,
        "file-loader@6.2.0",
        "loader-utils@2.0.0",
        "json5@2.2.0",
        "minimist@1.2.6"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "minimist",
      "version": "1.2.5"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2022-03-18T13:02:08.840039Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution due to a missing handler to `Function.prototype`.\r\n\r\n**Notes:** \r\n\r\n- This vulnerability is a bypass to [CVE-2020-7598](https://security.snyk.io/vuln/SNYK-JS-MINIMIST-559764)\r\n\r\n- The reason for the different CVSS between CVE-2021-44906 to CVE-2020-7598, is that CVE-2020-7598 can pollute objects, while CVE-2021-44906 can pollute only function.\r\n\r\n\r\n## PoC by Snyk\r\n```js\r\nrequire('minimist')('--_.constructor.constructor.prototype.foo bar'.split(' '));\r\nconsole.log((function(){}).foo); // bar\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 1.2.6 or higher.\n## References\n- [Fix Commit](https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d)\n- [GitHub Issue](https://github.com/substack/minimist/issues/164)\n- [Vulnerable Code](https://github.com/substack/minimist/blob/master/index.js#L69)\n",
      "disclosureTime": "2022-03-18T12:24:05Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "1.2.6"
      ],
      "id": "SNYK-JS-MINIMIST-2429795",
      "identifiers": {
        "CWE": [
          "CWE-1321"
        ],
        "SNYK": [
          "SNYK-JS-MINIMIST-559764"
        ],
        "CVE": [
          "CVE-2021-44906"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-06-06T12:01:22.204194Z",
      "moduleName": "minimist",
      "packageManager": "npm",
      "packageName": "minimist",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-03-21T12:09:35Z",
      "references": [
        {
          "title": "Fix Commit",
          "url": "https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/substack/minimist/issues/164"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/substack/minimist/blob/master/index.js%23L69"
        }
      ],
      "severity": "low",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<1.2.6"
        ]
      },
      "severityWithCritical": "low",
      "from": [
        "@wso2apim/publisher@4.0.0",
        "url-loader@0.5.9",
        "loader-utils@1.2.3",
        "json5@1.0.1",
        "minimist@1.2.0"
      ],
      "upgradePath": [
        false,
        "url-loader@0.5.9",
        "loader-utils@1.2.3",
        "json5@1.0.1",
        "minimist@1.2.6"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "minimist",
      "version": "1.2.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-03-11T08:25:47.093051Z",
      "credit": [
        "Snyk Security Team"
      ],
      "cvssScore": 5.6,
      "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The library could be tricked into adding or modifying properties of `Object.prototype` using a `constructor` or `__proto__` payload.\r\n\r\n## PoC by Snyk\r\n```\r\nrequire('minimist')('--__proto__.injected0 value0'.split(' '));\r\nconsole.log(({}).injected0 === 'value0'); // true\r\n\r\nrequire('minimist')('--constructor.prototype.injected1 value1'.split(' '));\r\nconsole.log(({}).injected1 === 'value1'); // true\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 0.2.1, 1.2.3 or higher.\n## References\n- [Command Injection PoC](https://gist.github.com/Kirill89/47feb345b09bf081317f08dd43403a8a)\n- [GitHub Fix Commit #1](https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94)\n- [GitHub Fix Commit #2](https://github.com/substack/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab)\n- [Snyk Research Blog](https://snyk.io/blog/prototype-pollution-minimist/)\n",
      "disclosureTime": "2020-03-10T08:22:24Z",
      "exploit": "Proof of Concept",
      "functions": [
        {
          "functionId": {
            "filePath": "index.js",
            "className": null,
            "functionName": "setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.0.0 <1.1.1"
          ]
        },
        {
          "functionId": {
            "filePath": "index.js",
            "className": null,
            "functionName": "module.exports.setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.1.1 <1.2.3"
          ]
        }
      ],
      "fixedIn": [
        "0.2.1",
        "1.2.3"
      ],
      "id": "SNYK-JS-MINIMIST-559764",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "NSP": [
          "1179"
        ],
        "CVE": [
          "CVE-2020-7598"
        ],
        "GHSA": [
          "GHSA-vh95-rmgr-6w4m"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-12-20T09:48:43.878574Z",
      "moduleName": "minimist",
      "packageManager": "npm",
      "packageName": "minimist",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2020-03-11T08:22:19Z",
      "references": [
        {
          "title": "Command Injection PoC",
          "url": "https://gist.github.com/Kirill89/47feb345b09bf081317f08dd43403a8a"
        },
        {
          "title": "GitHub Fix Commit #1",
          "url": "https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94"
        },
        {
          "title": "GitHub Fix Commit #2",
          "url": "https://github.com/substack/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab"
        },
        {
          "title": "Snyk Research Blog",
          "url": "https://snyk.io/blog/prototype-pollution-minimist/"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.0.0 <1.1.1"
          ]
        },
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "module.exports.setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.1.1 <1.2.3"
          ]
        }
      ],
      "semver": {
        "vulnerable": [
          "<0.2.1",
          ">=1.0.0 <1.2.3"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/publisher@4.0.0",
        "url-loader@0.5.9",
        "loader-utils@1.2.3",
        "json5@1.0.1",
        "minimist@1.2.0"
      ],
      "upgradePath": [
        false,
        "url-loader@0.5.9",
        "loader-utils@1.2.3",
        "json5@1.0.1",
        "minimist@1.2.3"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "minimist",
      "version": "1.2.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
      "alternativeIds": [],
      "creationTime": "2022-04-05T08:46:07.677588Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n[moment](https://www.npmjs.com/package/moment) is a lightweight JavaScript date library for parsing, validating, manipulating, and formatting dates.\n\nAffected versions of this package are vulnerable to Directory Traversal when a user provides a locale string which is directly used to switch moment locale.\n\n## Details\n\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\n\nDirectory Traversal vulnerabilities can be generally divided into two types:\n\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\n\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\n\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\n\n```\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\n```\n**Note** `%2e` is the URL encoded version of `.` (dot).\n\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`. \n\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n2018-04-15 22:04:29 .....           19           19  good.txt\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\n```\n\n## Remediation\nUpgrade `moment` to version 2.29.2 or higher.\n## References\n- [GitHub Commit](https://github.com/moment/moment/commit/4211bfc8f15746be4019bba557e29a7ba83d54c5)\n",
      "disclosureTime": "2022-04-05T08:39:23Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "2.29.2"
      ],
      "id": "SNYK-JS-MOMENT-2440688",
      "identifiers": {
        "CWE": [
          "CWE-22"
        ],
        "GHSA": [
          "GHSA-8hfj-j24r-96c4"
        ],
        "CVE": [
          "CVE-2022-24785"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:30:50.880408Z",
      "moduleName": "moment",
      "packageManager": "npm",
      "packageName": "moment",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-04-05T12:30:50.878091Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/moment/moment/commit/4211bfc8f15746be4019bba557e29a7ba83d54c5"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Directory Traversal",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<2.29.2"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/publisher@4.0.0",
        "moment@2.24.0"
      ],
      "upgradePath": [
        false,
        "moment@2.29.2"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "moment",
      "version": "2.24.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N",
      "alternativeIds": [],
      "creationTime": "2022-01-17T12:08:00.675849Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 6.5,
      "description": "## Overview\n[node-fetch](https://www.npmjs.com/package/node-fetch) is a light-weight module that brings window.fetch to node.js\n\nAffected versions of this package are vulnerable to Information Exposure when fetching a remote url with Cookie, if it get a `Location` response header, it will follow that url and try to fetch that url with provided cookie. This can lead to forwarding secure headers to 3th party.\n## Remediation\nUpgrade `node-fetch` to version 2.6.7, 3.1.1 or higher.\n## References\n- [Github Commit](https://github.com/node-fetch/node-fetch/commit/1ef4b560a17e644a02a3bfdea7631ffeee578b35)\n- [GitHub Commit](https://github.com/node-fetch/node-fetch/commit/36e47e8a6406185921e4985dcbeff140d73eaa10)\n- [GitHub Commit](https://github.com/node-fetch/node-fetch/pull/1449/commits/5c32f002fdd65b1c6a8f1e3620210813d45c7e60)\n- [GitHub PR](https://github.com/node-fetch/node-fetch/pull/1449)\n",
      "disclosureTime": "2022-01-17T12:00:01Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "2.6.7",
        "3.1.1"
      ],
      "id": "SNYK-JS-NODEFETCH-2342118",
      "identifiers": {
        "CWE": [
          "CWE-200"
        ],
        "CVE": [
          "CVE-2022-0235",
          "CVE-2022-1365"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-18T09:45:11.278222Z",
      "moduleName": "node-fetch",
      "packageManager": "npm",
      "packageName": "node-fetch",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-01-17T16:25:00Z",
      "references": [
        {
          "title": "Github Commit",
          "url": "https://github.com/node-fetch/node-fetch/commit/1ef4b560a17e644a02a3bfdea7631ffeee578b35"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/node-fetch/node-fetch/commit/36e47e8a6406185921e4985dcbeff140d73eaa10"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/node-fetch/node-fetch/pull/1449/commits/5c32f002fdd65b1c6a8f1e3620210813d45c7e60"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/node-fetch/node-fetch/pull/1449"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Information Exposure",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<2.6.7",
          ">=3.0.0 <3.1.1"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/publisher@4.0.0",
        "@asyncapi/parser@1.3.2",
        "node-fetch@2.6.1"
      ],
      "upgradePath": [
        false,
        "@asyncapi/parser@1.3.2",
        "node-fetch@2.6.7"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "node-fetch",
      "version": "2.6.1"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N",
      "alternativeIds": [],
      "creationTime": "2022-01-17T12:08:00.675849Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 6.5,
      "description": "## Overview\n[node-fetch](https://www.npmjs.com/package/node-fetch) is a light-weight module that brings window.fetch to node.js\n\nAffected versions of this package are vulnerable to Information Exposure when fetching a remote url with Cookie, if it get a `Location` response header, it will follow that url and try to fetch that url with provided cookie. This can lead to forwarding secure headers to 3th party.\n## Remediation\nUpgrade `node-fetch` to version 2.6.7, 3.1.1 or higher.\n## References\n- [Github Commit](https://github.com/node-fetch/node-fetch/commit/1ef4b560a17e644a02a3bfdea7631ffeee578b35)\n- [GitHub Commit](https://github.com/node-fetch/node-fetch/commit/36e47e8a6406185921e4985dcbeff140d73eaa10)\n- [GitHub Commit](https://github.com/node-fetch/node-fetch/pull/1449/commits/5c32f002fdd65b1c6a8f1e3620210813d45c7e60)\n- [GitHub PR](https://github.com/node-fetch/node-fetch/pull/1449)\n",
      "disclosureTime": "2022-01-17T12:00:01Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "2.6.7",
        "3.1.1"
      ],
      "id": "SNYK-JS-NODEFETCH-2342118",
      "identifiers": {
        "CWE": [
          "CWE-200"
        ],
        "CVE": [
          "CVE-2022-0235",
          "CVE-2022-1365"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-18T09:45:11.278222Z",
      "moduleName": "node-fetch",
      "packageManager": "npm",
      "packageName": "node-fetch",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-01-17T16:25:00Z",
      "references": [
        {
          "title": "Github Commit",
          "url": "https://github.com/node-fetch/node-fetch/commit/1ef4b560a17e644a02a3bfdea7631ffeee578b35"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/node-fetch/node-fetch/commit/36e47e8a6406185921e4985dcbeff140d73eaa10"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/node-fetch/node-fetch/pull/1449/commits/5c32f002fdd65b1c6a8f1e3620210813d45c7e60"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/node-fetch/node-fetch/pull/1449"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Information Exposure",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<2.6.7",
          ">=3.0.0 <3.1.1"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/publisher@4.0.0",
        "@asyncapi/react-component@0.19.2",
        "@asyncapi/parser@1.4.0",
        "node-fetch@2.6.1"
      ],
      "upgradePath": [
        false,
        "@asyncapi/react-component@0.19.2",
        "@asyncapi/parser@1.4.0",
        "node-fetch@2.6.7"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "node-fetch",
      "version": "2.6.1"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N",
      "alternativeIds": [],
      "creationTime": "2022-01-17T12:08:00.675849Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 6.5,
      "description": "## Overview\n[node-fetch](https://www.npmjs.com/package/node-fetch) is a light-weight module that brings window.fetch to node.js\n\nAffected versions of this package are vulnerable to Information Exposure when fetching a remote url with Cookie, if it get a `Location` response header, it will follow that url and try to fetch that url with provided cookie. This can lead to forwarding secure headers to 3th party.\n## Remediation\nUpgrade `node-fetch` to version 2.6.7, 3.1.1 or higher.\n## References\n- [Github Commit](https://github.com/node-fetch/node-fetch/commit/1ef4b560a17e644a02a3bfdea7631ffeee578b35)\n- [GitHub Commit](https://github.com/node-fetch/node-fetch/commit/36e47e8a6406185921e4985dcbeff140d73eaa10)\n- [GitHub Commit](https://github.com/node-fetch/node-fetch/pull/1449/commits/5c32f002fdd65b1c6a8f1e3620210813d45c7e60)\n- [GitHub PR](https://github.com/node-fetch/node-fetch/pull/1449)\n",
      "disclosureTime": "2022-01-17T12:00:01Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "2.6.7",
        "3.1.1"
      ],
      "id": "SNYK-JS-NODEFETCH-2342118",
      "identifiers": {
        "CWE": [
          "CWE-200"
        ],
        "CVE": [
          "CVE-2022-0235",
          "CVE-2022-1365"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-18T09:45:11.278222Z",
      "moduleName": "node-fetch",
      "packageManager": "npm",
      "packageName": "node-fetch",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-01-17T16:25:00Z",
      "references": [
        {
          "title": "Github Commit",
          "url": "https://github.com/node-fetch/node-fetch/commit/1ef4b560a17e644a02a3bfdea7631ffeee578b35"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/node-fetch/node-fetch/commit/36e47e8a6406185921e4985dcbeff140d73eaa10"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/node-fetch/node-fetch/pull/1449/commits/5c32f002fdd65b1c6a8f1e3620210813d45c7e60"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/node-fetch/node-fetch/pull/1449"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Information Exposure",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<2.6.7",
          ">=3.0.0 <3.1.1"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/publisher@4.0.0",
        "swagger-client@3.12.0",
        "cross-fetch@3.0.6",
        "node-fetch@2.6.1"
      ],
      "upgradePath": [
        false,
        "swagger-client@3.12.0",
        "cross-fetch@3.1.5",
        "node-fetch@2.6.7"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "node-fetch",
      "version": "2.6.1"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N",
      "alternativeIds": [],
      "creationTime": "2022-01-17T12:08:00.675849Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 6.5,
      "description": "## Overview\n[node-fetch](https://www.npmjs.com/package/node-fetch) is a light-weight module that brings window.fetch to node.js\n\nAffected versions of this package are vulnerable to Information Exposure when fetching a remote url with Cookie, if it get a `Location` response header, it will follow that url and try to fetch that url with provided cookie. This can lead to forwarding secure headers to 3th party.\n## Remediation\nUpgrade `node-fetch` to version 2.6.7, 3.1.1 or higher.\n## References\n- [Github Commit](https://github.com/node-fetch/node-fetch/commit/1ef4b560a17e644a02a3bfdea7631ffeee578b35)\n- [GitHub Commit](https://github.com/node-fetch/node-fetch/commit/36e47e8a6406185921e4985dcbeff140d73eaa10)\n- [GitHub Commit](https://github.com/node-fetch/node-fetch/pull/1449/commits/5c32f002fdd65b1c6a8f1e3620210813d45c7e60)\n- [GitHub PR](https://github.com/node-fetch/node-fetch/pull/1449)\n",
      "disclosureTime": "2022-01-17T12:00:01Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "2.6.7",
        "3.1.1"
      ],
      "id": "SNYK-JS-NODEFETCH-2342118",
      "identifiers": {
        "CWE": [
          "CWE-200"
        ],
        "CVE": [
          "CVE-2022-0235",
          "CVE-2022-1365"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-18T09:45:11.278222Z",
      "moduleName": "node-fetch",
      "packageManager": "npm",
      "packageName": "node-fetch",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-01-17T16:25:00Z",
      "references": [
        {
          "title": "Github Commit",
          "url": "https://github.com/node-fetch/node-fetch/commit/1ef4b560a17e644a02a3bfdea7631ffeee578b35"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/node-fetch/node-fetch/commit/36e47e8a6406185921e4985dcbeff140d73eaa10"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/node-fetch/node-fetch/pull/1449/commits/5c32f002fdd65b1c6a8f1e3620210813d45c7e60"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/node-fetch/node-fetch/pull/1449"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Information Exposure",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<2.6.7",
          ">=3.0.0 <3.1.1"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/publisher@4.0.0",
        "swagger-ui-react@3.45.0",
        "swagger-client@3.13.1",
        "cross-fetch@3.0.6",
        "node-fetch@2.6.1"
      ],
      "upgradePath": [
        false,
        "swagger-ui-react@3.45.0",
        "swagger-client@3.13.1",
        "cross-fetch@3.1.5",
        "node-fetch@2.6.7"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "node-fetch",
      "version": "2.6.1"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N",
      "alternativeIds": [],
      "creationTime": "2022-01-17T12:08:00.675849Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 6.5,
      "description": "## Overview\n[node-fetch](https://www.npmjs.com/package/node-fetch) is a light-weight module that brings window.fetch to node.js\n\nAffected versions of this package are vulnerable to Information Exposure when fetching a remote url with Cookie, if it get a `Location` response header, it will follow that url and try to fetch that url with provided cookie. This can lead to forwarding secure headers to 3th party.\n## Remediation\nUpgrade `node-fetch` to version 2.6.7, 3.1.1 or higher.\n## References\n- [Github Commit](https://github.com/node-fetch/node-fetch/commit/1ef4b560a17e644a02a3bfdea7631ffeee578b35)\n- [GitHub Commit](https://github.com/node-fetch/node-fetch/commit/36e47e8a6406185921e4985dcbeff140d73eaa10)\n- [GitHub Commit](https://github.com/node-fetch/node-fetch/pull/1449/commits/5c32f002fdd65b1c6a8f1e3620210813d45c7e60)\n- [GitHub PR](https://github.com/node-fetch/node-fetch/pull/1449)\n",
      "disclosureTime": "2022-01-17T12:00:01Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "2.6.7",
        "3.1.1"
      ],
      "id": "SNYK-JS-NODEFETCH-2342118",
      "identifiers": {
        "CWE": [
          "CWE-200"
        ],
        "CVE": [
          "CVE-2022-0235",
          "CVE-2022-1365"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-18T09:45:11.278222Z",
      "moduleName": "node-fetch",
      "packageManager": "npm",
      "packageName": "node-fetch",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-01-17T16:25:00Z",
      "references": [
        {
          "title": "Github Commit",
          "url": "https://github.com/node-fetch/node-fetch/commit/1ef4b560a17e644a02a3bfdea7631ffeee578b35"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/node-fetch/node-fetch/commit/36e47e8a6406185921e4985dcbeff140d73eaa10"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/node-fetch/node-fetch/pull/1449/commits/5c32f002fdd65b1c6a8f1e3620210813d45c7e60"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/node-fetch/node-fetch/pull/1449"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Information Exposure",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<2.6.7",
          ">=3.0.0 <3.1.1"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/publisher@4.0.0",
        "draft-js@0.10.5",
        "fbjs@0.8.17",
        "isomorphic-fetch@2.2.1",
        "node-fetch@1.7.3"
      ],
      "upgradePath": [
        false,
        "draft-js@0.11.7",
        "fbjs@2.0.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "node-fetch",
      "version": "1.7.3"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H/E:U/RL:O/RC:R",
      "alternativeIds": [],
      "creationTime": "2020-09-11T10:50:56.354201Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 5.9,
      "description": "## Overview\n[node-fetch](https://www.npmjs.com/package/node-fetch) is a light-weight module that brings window.fetch to node.js\n\nAffected versions of this package are vulnerable to Denial of Service. Node Fetch did not honor the `size` option after following a redirect, which means that when a content size was over the limit, a FetchError would never get thrown and the process would end without failure.\n## Remediation\nUpgrade `node-fetch` to version 2.6.1, 3.0.0-beta.9 or higher.\n## References\n- [GitHub Advisory](https://github.com/node-fetch/node-fetch/security/advisories/GHSA-w7rc-rwvf-8q5r)\n- [GitHub Commit](https://github.com/node-fetch/node-fetch/commit/2358a6c2563d1730a0cdaccc197c611949f6a334)\n",
      "disclosureTime": "2020-09-10T17:55:53Z",
      "exploit": "Unproven",
      "functions": [
        {
          "functionId": {
            "filePath": "lib/index.js",
            "className": null,
            "functionName": "fetch"
          },
          "version": [
            ">1.7.1 <1.7.4",
            ">2.0.0-alpha.7 <2.6.1"
          ]
        }
      ],
      "fixedIn": [
        "2.6.1",
        "3.0.0-beta.9"
      ],
      "id": "SNYK-JS-NODEFETCH-674311",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w7rc-rwvf-8q5r"
        ],
        "CVE": [
          "CVE-2020-15168"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-01-26T16:47:31.069025Z",
      "moduleName": "node-fetch",
      "packageManager": "npm",
      "packageName": "node-fetch",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-09-11T14:12:46Z",
      "references": [
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/node-fetch/node-fetch/security/advisories/GHSA-w7rc-rwvf-8q5r"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/node-fetch/node-fetch/commit/2358a6c2563d1730a0cdaccc197c611949f6a334"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Denial of Service",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [
        {
          "functionId": {
            "filePath": "lib/index.js",
            "functionName": "fetch"
          },
          "version": [
            ">1.7.1 <1.7.4",
            ">2.0.0-alpha.7 <2.6.1"
          ]
        }
      ],
      "semver": {
        "vulnerable": [
          "<2.6.1",
          ">=3.0.0-beta.1 <3.0.0-beta.9"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/publisher@4.0.0",
        "draft-js@0.10.5",
        "fbjs@0.8.17",
        "isomorphic-fetch@2.2.1",
        "node-fetch@1.7.3"
      ],
      "upgradePath": [
        false,
        "draft-js@0.11.7",
        "fbjs@2.0.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "node-fetch",
      "version": "1.7.3"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N",
      "alternativeIds": [],
      "creationTime": "2022-01-17T12:08:00.675849Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 6.5,
      "description": "## Overview\n[node-fetch](https://www.npmjs.com/package/node-fetch) is a light-weight module that brings window.fetch to node.js\n\nAffected versions of this package are vulnerable to Information Exposure when fetching a remote url with Cookie, if it get a `Location` response header, it will follow that url and try to fetch that url with provided cookie. This can lead to forwarding secure headers to 3th party.\n## Remediation\nUpgrade `node-fetch` to version 2.6.7, 3.1.1 or higher.\n## References\n- [Github Commit](https://github.com/node-fetch/node-fetch/commit/1ef4b560a17e644a02a3bfdea7631ffeee578b35)\n- [GitHub Commit](https://github.com/node-fetch/node-fetch/commit/36e47e8a6406185921e4985dcbeff140d73eaa10)\n- [GitHub Commit](https://github.com/node-fetch/node-fetch/pull/1449/commits/5c32f002fdd65b1c6a8f1e3620210813d45c7e60)\n- [GitHub PR](https://github.com/node-fetch/node-fetch/pull/1449)\n",
      "disclosureTime": "2022-01-17T12:00:01Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "2.6.7",
        "3.1.1"
      ],
      "id": "SNYK-JS-NODEFETCH-2342118",
      "identifiers": {
        "CWE": [
          "CWE-200"
        ],
        "CVE": [
          "CVE-2022-0235",
          "CVE-2022-1365"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-18T09:45:11.278222Z",
      "moduleName": "node-fetch",
      "packageManager": "npm",
      "packageName": "node-fetch",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-01-17T16:25:00Z",
      "references": [
        {
          "title": "Github Commit",
          "url": "https://github.com/node-fetch/node-fetch/commit/1ef4b560a17e644a02a3bfdea7631ffeee578b35"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/node-fetch/node-fetch/commit/36e47e8a6406185921e4985dcbeff140d73eaa10"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/node-fetch/node-fetch/pull/1449/commits/5c32f002fdd65b1c6a8f1e3620210813d45c7e60"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/node-fetch/node-fetch/pull/1449"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Information Exposure",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<2.6.7",
          ">=3.0.0 <3.1.1"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/publisher@4.0.0",
        "react-tap-event-plugin@2.0.1",
        "fbjs@0.8.17",
        "isomorphic-fetch@2.2.1",
        "node-fetch@1.7.3"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "node-fetch",
      "version": "1.7.3"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H/E:U/RL:O/RC:R",
      "alternativeIds": [],
      "creationTime": "2020-09-11T10:50:56.354201Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 5.9,
      "description": "## Overview\n[node-fetch](https://www.npmjs.com/package/node-fetch) is a light-weight module that brings window.fetch to node.js\n\nAffected versions of this package are vulnerable to Denial of Service. Node Fetch did not honor the `size` option after following a redirect, which means that when a content size was over the limit, a FetchError would never get thrown and the process would end without failure.\n## Remediation\nUpgrade `node-fetch` to version 2.6.1, 3.0.0-beta.9 or higher.\n## References\n- [GitHub Advisory](https://github.com/node-fetch/node-fetch/security/advisories/GHSA-w7rc-rwvf-8q5r)\n- [GitHub Commit](https://github.com/node-fetch/node-fetch/commit/2358a6c2563d1730a0cdaccc197c611949f6a334)\n",
      "disclosureTime": "2020-09-10T17:55:53Z",
      "exploit": "Unproven",
      "functions": [
        {
          "functionId": {
            "filePath": "lib/index.js",
            "className": null,
            "functionName": "fetch"
          },
          "version": [
            ">1.7.1 <1.7.4",
            ">2.0.0-alpha.7 <2.6.1"
          ]
        }
      ],
      "fixedIn": [
        "2.6.1",
        "3.0.0-beta.9"
      ],
      "id": "SNYK-JS-NODEFETCH-674311",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w7rc-rwvf-8q5r"
        ],
        "CVE": [
          "CVE-2020-15168"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-01-26T16:47:31.069025Z",
      "moduleName": "node-fetch",
      "packageManager": "npm",
      "packageName": "node-fetch",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-09-11T14:12:46Z",
      "references": [
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/node-fetch/node-fetch/security/advisories/GHSA-w7rc-rwvf-8q5r"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/node-fetch/node-fetch/commit/2358a6c2563d1730a0cdaccc197c611949f6a334"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Denial of Service",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [
        {
          "functionId": {
            "filePath": "lib/index.js",
            "functionName": "fetch"
          },
          "version": [
            ">1.7.1 <1.7.4",
            ">2.0.0-alpha.7 <2.6.1"
          ]
        }
      ],
      "semver": {
        "vulnerable": [
          "<2.6.1",
          ">=3.0.0-beta.1 <3.0.0-beta.9"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/publisher@4.0.0",
        "react-tap-event-plugin@2.0.1",
        "fbjs@0.8.17",
        "isomorphic-fetch@2.2.1",
        "node-fetch@1.7.3"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "node-fetch",
      "version": "1.7.3"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "alternativeIds": [],
      "creationTime": "2021-09-17T14:35:00.993728Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) when parsing crafted invalid CSS nth-checks, due to the sub-pattern `\\s*(?:([+-]?)\\s*(\\d+))?` in `RE_NTH_ELEMENT` with quantified overlapping adjacency.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `nth-check` to version 2.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/fb55/nth-check/commit/9894c1d2010870c351f66c6f6efcf656e26bb726)\n",
      "disclosureTime": "2021-09-17T14:32:39Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "2.0.1"
      ],
      "id": "SNYK-JS-NTHCHECK-1586032",
      "identifiers": {
        "CWE": [
          "CWE-1333"
        ],
        "CVE": [
          "CVE-2021-3803"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-13T10:42:22.281450Z",
      "moduleName": "nth-check",
      "packageManager": "npm",
      "packageName": "nth-check",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-09-17T15:20:51Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/fb55/nth-check/commit/9894c1d2010870c351f66c6f6efcf656e26bb726"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<2.0.1"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/publisher@4.0.0",
        "react-safe-html@0.6.1",
        "cheerio@0.22.0",
        "css-select@1.2.0",
        "nth-check@1.0.2"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "nth-check",
      "version": "1.0.2"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-02-19T16:00:22.449519Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[path-parse](https://www.npmjs.org/package/path-parse) is a Node.js path.parse() ponyfill\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `splitDeviceRe`, `splitTailRe`, and `splitPathRe` regular expressions. ReDoS exhibits polynomial worst-case time complexity.\r\n\r\n### PoC\r\n```\r\nvar pathParse = require('path-parse');\r\nfunction build_attack(n) {\r\n    var ret = \"\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/\"\r\n    }\r\n    return ret + \"◎\";\r\n}\r\n\r\nfor(var i = 1; i <= 5000000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        pathParse(attack_str);\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `path-parse` to version 1.0.7 or higher.\n## References\n- [GitHub Issue 1](https://github.com/jbgutierrez/path-parse/issues/8)\n- [GitHub PR](https://github.com/jbgutierrez/path-parse/pull/10)\n",
      "disclosureTime": "2021-02-19T15:54:01Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "1.0.7"
      ],
      "id": "SNYK-JS-PATHPARSE-1077067",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-23343"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.024375Z",
      "moduleName": "path-parse",
      "packageManager": "npm",
      "packageName": "path-parse",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-05-04T08:38:49Z",
      "references": [
        {
          "title": "GitHub Issue 1",
          "url": "https://github.com/jbgutierrez/path-parse/issues/8"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/jbgutierrez/path-parse/pull/10"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<1.0.7"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/publisher@4.0.0",
        "react-diff-viewer@3.1.1",
        "emotion@10.0.27",
        "babel-plugin-emotion@10.2.2",
        "babel-plugin-macros@2.8.0",
        "resolve@1.20.0",
        "path-parse@1.0.6"
      ],
      "upgradePath": [
        false,
        "react-diff-viewer@3.1.1",
        "emotion@10.0.27",
        "babel-plugin-emotion@10.2.2",
        "babel-plugin-macros@2.8.0",
        "resolve@1.20.0",
        "path-parse@1.0.7"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "path-parse",
      "version": "1.0.6"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:N/I:N/A:H",
      "alternativeIds": [],
      "creationTime": "2021-06-29T08:27:41.954085Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 7.4,
      "description": "## Overview\n[prismjs](http://prismjs.com/) is a lightweight, robust, elegant syntax highlighting library.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `prism-asciidoc` and `prism-erb` components. When `Prism` is used to highlight untrusted (user-given) text, an attacker can craft a string that will take a very very long time to highlight.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `prismjs` to version 1.24.0 or higher.\n## References\n- [GitHub Commit](https://github.com/PrismJS/prism/commit/d85e30da6755fdbe7f8559f8e75d122297167018)\n- [GitHub PR](https://github.com/PrismJS/prism/pull/2688)\n- [GitHub PR](https://github.com/PrismJS/prism/pull/2774)\n",
      "disclosureTime": "2021-06-29T08:23:20Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "1.24.0"
      ],
      "id": "SNYK-JS-PRISMJS-1314893",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-gj77-59wh-66hg"
        ],
        "CVE": [
          "CVE-2021-32723"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-09-15T14:59:56.932644Z",
      "moduleName": "prismjs",
      "packageManager": "npm",
      "packageName": "prismjs",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-06-29T15:26:03Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/PrismJS/prism/commit/d85e30da6755fdbe7f8559f8e75d122297167018"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/PrismJS/prism/pull/2688"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/PrismJS/prism/pull/2774"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<1.24.0"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/publisher@4.0.0",
        "swagger-ui-react@3.45.0",
        "react-syntax-highlighter@15.4.3",
        "prismjs@1.23.0"
      ],
      "upgradePath": [
        false,
        "swagger-ui-react@3.45.0",
        "react-syntax-highlighter@15.4.3",
        "prismjs@1.24.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "prismjs",
      "version": "1.23.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "alternativeIds": [],
      "creationTime": "2021-09-15T15:04:24.595227Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n[prismjs](http://prismjs.com/) is a lightweight, robust, elegant syntax highlighting library.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `Prism.languages.markup.comment` regex.\r\n\r\n### PoC\r\n```\r\nvar comment = /<!--[\\s\\S]*?-->/\r\nfor(var i = 1; i <= 50000; i++) {\r\n  var time = Date.now();\r\n  var attack_str = \"\"+\"<!--\".repeat(i*10000)+\"-\"\r\n  comment.test(attack_str)\r\n  var time_taken = Date.now() - time;\r\n  console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_taken+\" ms\")\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `prismjs` to version 1.25.0 or higher.\n## References\n- [GitHub Commit](https://github.com/PrismJS/prism/commit/0ff371bb4775a131634f47d0fe85794c547232f9)\n",
      "disclosureTime": "2021-09-15T14:54:02Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "1.25.0"
      ],
      "id": "SNYK-JS-PRISMJS-1585202",
      "identifiers": {
        "CWE": [
          "CWE-1333"
        ],
        "CVE": [
          "CVE-2021-3801"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-09-28T07:13:11.827920Z",
      "moduleName": "prismjs",
      "packageManager": "npm",
      "packageName": "prismjs",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-09-15T18:40:52Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/PrismJS/prism/commit/0ff371bb4775a131634f47d0fe85794c547232f9"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<1.25.0"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/publisher@4.0.0",
        "swagger-ui-react@3.45.0",
        "react-syntax-highlighter@15.4.3",
        "prismjs@1.23.0"
      ],
      "upgradePath": [
        false,
        "swagger-ui-react@3.45.0",
        "react-syntax-highlighter@15.4.3",
        "prismjs@1.25.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "prismjs",
      "version": "1.23.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N",
      "alternativeIds": [],
      "creationTime": "2022-02-17T15:13:52.772032Z",
      "credit": [
        "at055612"
      ],
      "cvssScore": 5.4,
      "description": "## Overview\n[prismjs](http://prismjs.com/) is a lightweight, robust, elegant syntax highlighting library.\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS) via the command line plugin which does not properly escape its output, leading to the input text being inserted into the `DOM` as `HTML` code.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `prismjs` to version 1.27.0 or higher.\n## References\n- [GitHub Commit](https://github.com/PrismJS/prism/commit/e002e78c343154e1c0ddf9d6a0bb85689e1a5c7c)\n- [GitHub Issue](https://github.com/PrismJS/prism/issues/3340)\n- [GitHub PR](https://github.com/PrismJS/prism/pull/3341)\n",
      "disclosureTime": "2022-02-17T15:04:56Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "1.27.0"
      ],
      "id": "SNYK-JS-PRISMJS-2404333",
      "identifiers": {
        "CWE": [
          "CWE-79"
        ],
        "CVE": [
          "CVE-2022-23647"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-02-20T16:08:17.989934Z",
      "moduleName": "prismjs",
      "packageManager": "npm",
      "packageName": "prismjs",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-02-20T16:08:17.988027Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/PrismJS/prism/commit/e002e78c343154e1c0ddf9d6a0bb85689e1a5c7c"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/PrismJS/prism/issues/3340"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/PrismJS/prism/pull/3341"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Cross-site Scripting (XSS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=1.14.0 <1.27.0"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/publisher@4.0.0",
        "swagger-ui-react@3.45.0",
        "react-syntax-highlighter@15.4.3",
        "prismjs@1.23.0"
      ],
      "upgradePath": [
        false,
        "swagger-ui-react@3.45.0",
        "react-syntax-highlighter@15.4.3",
        "prismjs@1.27.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "prismjs",
      "version": "1.23.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:N/I:N/A:H",
      "alternativeIds": [],
      "creationTime": "2021-06-29T08:27:41.954085Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 7.4,
      "description": "## Overview\n[prismjs](http://prismjs.com/) is a lightweight, robust, elegant syntax highlighting library.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `prism-asciidoc` and `prism-erb` components. When `Prism` is used to highlight untrusted (user-given) text, an attacker can craft a string that will take a very very long time to highlight.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `prismjs` to version 1.24.0 or higher.\n## References\n- [GitHub Commit](https://github.com/PrismJS/prism/commit/d85e30da6755fdbe7f8559f8e75d122297167018)\n- [GitHub PR](https://github.com/PrismJS/prism/pull/2688)\n- [GitHub PR](https://github.com/PrismJS/prism/pull/2774)\n",
      "disclosureTime": "2021-06-29T08:23:20Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "1.24.0"
      ],
      "id": "SNYK-JS-PRISMJS-1314893",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-gj77-59wh-66hg"
        ],
        "CVE": [
          "CVE-2021-32723"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-09-15T14:59:56.932644Z",
      "moduleName": "prismjs",
      "packageManager": "npm",
      "packageName": "prismjs",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-06-29T15:26:03Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/PrismJS/prism/commit/d85e30da6755fdbe7f8559f8e75d122297167018"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/PrismJS/prism/pull/2688"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/PrismJS/prism/pull/2774"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<1.24.0"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/publisher@4.0.0",
        "swagger-ui-react@3.45.0",
        "react-syntax-highlighter@15.4.3",
        "refractor@3.3.1",
        "prismjs@1.23.0"
      ],
      "upgradePath": [
        false,
        "swagger-ui-react@3.45.0",
        "react-syntax-highlighter@15.4.3",
        "refractor@3.4.0",
        "prismjs@1.24.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "prismjs",
      "version": "1.23.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "alternativeIds": [],
      "creationTime": "2021-09-15T15:04:24.595227Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n[prismjs](http://prismjs.com/) is a lightweight, robust, elegant syntax highlighting library.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `Prism.languages.markup.comment` regex.\r\n\r\n### PoC\r\n```\r\nvar comment = /<!--[\\s\\S]*?-->/\r\nfor(var i = 1; i <= 50000; i++) {\r\n  var time = Date.now();\r\n  var attack_str = \"\"+\"<!--\".repeat(i*10000)+\"-\"\r\n  comment.test(attack_str)\r\n  var time_taken = Date.now() - time;\r\n  console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_taken+\" ms\")\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `prismjs` to version 1.25.0 or higher.\n## References\n- [GitHub Commit](https://github.com/PrismJS/prism/commit/0ff371bb4775a131634f47d0fe85794c547232f9)\n",
      "disclosureTime": "2021-09-15T14:54:02Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "1.25.0"
      ],
      "id": "SNYK-JS-PRISMJS-1585202",
      "identifiers": {
        "CWE": [
          "CWE-1333"
        ],
        "CVE": [
          "CVE-2021-3801"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-09-28T07:13:11.827920Z",
      "moduleName": "prismjs",
      "packageManager": "npm",
      "packageName": "prismjs",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-09-15T18:40:52Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/PrismJS/prism/commit/0ff371bb4775a131634f47d0fe85794c547232f9"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<1.25.0"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/publisher@4.0.0",
        "swagger-ui-react@3.45.0",
        "react-syntax-highlighter@15.4.3",
        "refractor@3.3.1",
        "prismjs@1.23.0"
      ],
      "upgradePath": [
        false,
        "swagger-ui-react@3.45.0",
        "react-syntax-highlighter@15.4.3",
        "refractor@3.5.0",
        "prismjs@1.25.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "prismjs",
      "version": "1.23.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N",
      "alternativeIds": [],
      "creationTime": "2022-02-17T15:13:52.772032Z",
      "credit": [
        "at055612"
      ],
      "cvssScore": 5.4,
      "description": "## Overview\n[prismjs](http://prismjs.com/) is a lightweight, robust, elegant syntax highlighting library.\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS) via the command line plugin which does not properly escape its output, leading to the input text being inserted into the `DOM` as `HTML` code.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `prismjs` to version 1.27.0 or higher.\n## References\n- [GitHub Commit](https://github.com/PrismJS/prism/commit/e002e78c343154e1c0ddf9d6a0bb85689e1a5c7c)\n- [GitHub Issue](https://github.com/PrismJS/prism/issues/3340)\n- [GitHub PR](https://github.com/PrismJS/prism/pull/3341)\n",
      "disclosureTime": "2022-02-17T15:04:56Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "1.27.0"
      ],
      "id": "SNYK-JS-PRISMJS-2404333",
      "identifiers": {
        "CWE": [
          "CWE-79"
        ],
        "CVE": [
          "CVE-2022-23647"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-02-20T16:08:17.989934Z",
      "moduleName": "prismjs",
      "packageManager": "npm",
      "packageName": "prismjs",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-02-20T16:08:17.988027Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/PrismJS/prism/commit/e002e78c343154e1c0ddf9d6a0bb85689e1a5c7c"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/PrismJS/prism/issues/3340"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/PrismJS/prism/pull/3341"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Cross-site Scripting (XSS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=1.14.0 <1.27.0"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/publisher@4.0.0",
        "swagger-ui-react@3.45.0",
        "react-syntax-highlighter@15.4.3",
        "refractor@3.3.1",
        "prismjs@1.23.0"
      ],
      "upgradePath": [
        false,
        "swagger-ui-react@3.45.0",
        "react-syntax-highlighter@15.4.3",
        "refractor@3.6.0",
        "prismjs@1.27.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "prismjs",
      "version": "1.23.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:N/A:N",
      "alternativeIds": [],
      "creationTime": "2019-07-08T13:18:42.280904Z",
      "credit": [
        "danielw93"
      ],
      "cvssScore": 4.3,
      "description": "## Overview\n\n[quill](https://www.npmjs.com/package/quill) is a modern rich text editor built for compatibility and extensibility.\n\n\nAffected versions of this package are vulnerable to Reverse Tabnabbing via the snow theme. The link has the target attribute set to `_blank` but has no `rel` property. This means that documents containing untrusted links make the page they are embedded in susceptible to tabnabbing.\n\n## Remediation\n\nUpgrade `quill` to version 1.3.7 or higher.\n\n\n## References\n\n- [GitHub Issue](https://github.com/quilljs/quill/issues/2438)\n\n- [GitHub PR](https://github.com/quilljs/quill/pull/2674)\n\n- [GitHub PR](https://github.com/quilljs/quill/pull/2674/files/b2f7b586e1564e43062483eff9fa8111bbc80e32)\n",
      "disclosureTime": "2019-07-06T19:26:01Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "1.3.7"
      ],
      "id": "SNYK-JS-QUILL-451551",
      "identifiers": {
        "CWE": [
          "CWE-1022"
        ],
        "CVE": []
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-12-14T14:41:05.559731Z",
      "moduleName": "quill",
      "packageManager": "npm",
      "packageName": "quill",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2019-07-08T13:22:06Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/quilljs/quill/issues/2438"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/quilljs/quill/pull/2674"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/quilljs/quill/pull/2674/files/b2f7b586e1564e43062483eff9fa8111bbc80e32"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Reverse Tabnabbing",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<1.3.7"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/publisher@4.0.0",
        "react-quill@1.0.0",
        "quill@1.3.6"
      ],
      "upgradePath": [
        false,
        "react-quill@1.0.0",
        "quill@1.3.7"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "quill",
      "version": "1.3.6"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N",
      "alternativeIds": [],
      "creationTime": "2019-08-27T07:43:44.195017Z",
      "credit": [
        "Jonathan Lloyd"
      ],
      "cvssScore": 6.5,
      "description": "## Overview\n[quill](https://www.npmjs.com/package/quill) is a modern rich text editor built for compatibility and extensibility.\n\nAffected versions of this package are vulnerable to Reverse Tabnabbing due to use of `target='_blank'` in anchor tags, allowing attackers to access `window.opener` for the original page when opening links. This is commonly used for phishing attacks.\n## Remediation\nUpgrade `quill` to version 1.3.7 or higher.\n## References\n- [GitHub Issue](https://github.com/quilljs/quill/issues/2438)\n- [GitHub PR](https://github.com/quilljs/quill/pull/2439)\n- [Node Security Advisory](https://www.npmjs.com/advisories/1039)\n",
      "disclosureTime": "2019-07-05T19:03:27Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "1.3.7"
      ],
      "id": "SNYK-JS-QUILL-460312",
      "identifiers": {
        "CWE": [
          "CWE-1022"
        ],
        "NSP": [
          "1039"
        ],
        "CVE": []
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-12-14T14:41:10.903349Z",
      "moduleName": "quill",
      "packageManager": "npm",
      "packageName": "quill",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2019-08-27T07:44:19Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/quilljs/quill/issues/2438"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/quilljs/quill/pull/2439"
        },
        {
          "title": "Node Security Advisory",
          "url": "https://www.npmjs.com/advisories/1039"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Reverse Tabnabbing",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<1.3.7"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/publisher@4.0.0",
        "react-quill@1.0.0",
        "quill@1.3.6"
      ],
      "upgradePath": [
        false,
        "react-quill@1.0.0",
        "quill@1.3.7"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "quill",
      "version": "1.3.6"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:U/RL:O/RC:R",
      "alternativeIds": [],
      "creationTime": "2021-09-03T13:28:34.208880Z",
      "credit": [
        "ready-research"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in `source/trim.js` within variable `ws`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `ramda` to version 0.27.2 or higher.\n## References\n- [Github Commit](https://github.com/ramda/ramda/pull/3212/commits/94d057032c9b3ecf26d9842fbb12c981bda29f4b)\n- [GitHub Commit](https://github.com/ramda/ramda/commit/37af6ae2ca8b94656996dd27fb0a1f208d69134e)\n- [GitHub PR](https://github.com/ramda/ramda/pull/3177)\n",
      "disclosureTime": "2021-09-03T13:26:28Z",
      "exploit": "Unproven",
      "functions": [],
      "fixedIn": [
        "0.27.2"
      ],
      "id": "SNYK-JS-RAMDA-1582370",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": []
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-01-19T14:54:18.169246Z",
      "moduleName": "ramda",
      "packageManager": "npm",
      "packageName": "ramda",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-10-28T15:08:22Z",
      "references": [
        {
          "title": "Github Commit",
          "url": "https://github.com/ramda/ramda/pull/3212/commits/94d057032c9b3ecf26d9842fbb12c981bda29f4b"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/ramda/ramda/commit/37af6ae2ca8b94656996dd27fb0a1f208d69134e"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/ramda/ramda/pull/3177"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<0.27.2"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/publisher@4.0.0",
        "react-markdown@4.1.0",
        "html-to-react@1.3.4",
        "ramda@0.26.1"
      ],
      "upgradePath": [
        false,
        "react-markdown@4.1.0",
        "html-to-react@1.4.3",
        "ramda@0.27.2"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "ramda",
      "version": "0.26.1"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N",
      "alternativeIds": [],
      "creationTime": "2021-04-18T15:16:22.519179Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 5.4,
      "description": "## Overview\n[react-draft-wysiwyg](https://www.npmjs.org/package/react-draft-wysiwyg) is an A wysiwyg on top of DraftJS.\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS) via the use of a javascript URI in a Link Target of the link decorator in `decorators/Link/index.js` when a draft is shared across users.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `react-draft-wysiwyg` to version 1.14.6 or higher.\n## References\n- [GitHub Commit](https://github.com/jpuri/react-draft-wysiwyg/commit/d2faeb612b53f10dff048de7dc57e1f4044b5380)\n- [Github Issue](https://github.com/jpuri/react-draft-wysiwyg/issues/1102)\n- [GitHub PR](https://github.com/jpuri/react-draft-wysiwyg/pull/1104)\n",
      "disclosureTime": "2021-04-18T15:12:32Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "1.14.6"
      ],
      "id": "SNYK-JS-REACTDRAFTWYSIWYG-1251504",
      "identifiers": {
        "CWE": [
          "CWE-79"
        ],
        "GHSA": [
          "GHSA-qcg2-h349-vwm3"
        ],
        "CVE": [
          "CVE-2021-31712"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-07-06T14:08:09.552969Z",
      "moduleName": "react-draft-wysiwyg",
      "packageManager": "npm",
      "packageName": "react-draft-wysiwyg",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-04-26T16:18:46.283578Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/jpuri/react-draft-wysiwyg/commit/d2faeb612b53f10dff048de7dc57e1f4044b5380"
        },
        {
          "title": "Github Issue",
          "url": "https://github.com/jpuri/react-draft-wysiwyg/issues/1102"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/jpuri/react-draft-wysiwyg/pull/1104"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Cross-site Scripting (XSS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<1.14.6"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/publisher@4.0.0",
        "react-draft-wysiwyg@1.13.2"
      ],
      "upgradePath": [
        false,
        "react-draft-wysiwyg@1.14.6"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "react-draft-wysiwyg",
      "version": "1.13.2"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "alternativeIds": [],
      "creationTime": "2020-10-11T10:28:41.769555Z",
      "credit": [
        "Liyuan Chen"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n[trim](https://www.npmjs.com/package/trim) is a Trim string whitespace\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim()` method. \r\n\r\n## PoC by Liyuan Chen: \r\n```js\r\nvar trim = require(\"trim\")\r\n\r\nfunction build_attack (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\nvar time = Date.now();\r\ntrim(build_attack(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `trim` to version 0.0.3 or higher.\n## References\n- [GitHub PR](https://github.com/component/trim/pull/8)\n- [Vulnerable Code](https://github.com/component/trim/blob/master/index.js#L6)\n",
      "disclosureTime": "2020-10-11T10:24:13Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "0.0.3"
      ],
      "id": "SNYK-JS-TRIM-1017038",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w5p7-h5w8-2hfq"
        ],
        "CVE": [
          "CVE-2020-7753"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-01-23T08:50:02.694114Z",
      "moduleName": "trim",
      "packageManager": "npm",
      "packageName": "trim",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2020-10-27T15:51:30Z",
      "references": [
        {
          "title": "GitHub PR",
          "url": "https://github.com/component/trim/pull/8"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/component/trim/blob/master/index.js%23L6"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<0.0.3"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/publisher@4.0.0",
        "react-markdown@4.1.0",
        "remark-parse@5.0.0",
        "trim@0.0.1"
      ],
      "upgradePath": [
        false,
        "react-markdown@5.0.0",
        "remark-parse@9.0.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "trim",
      "version": "0.0.1"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-10-29T10:53:41.363786Z",
      "credit": [
        "Yeting Li",
        "Miguel de Moura"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n[ua-parser-js](https://github.com/faisalman/ua-parser-js) is a lightweight JavaScript-based user-agent string parser.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in multiple regexes (see linked commit for more info).\r\n\r\n## Proof of Concept by Miguel de Moura\r\n``` jsconst ua_parser = require('ua-parser-js');const N_SIZE = 5000;const MALICIOUS_UA = `android;;Trio${' '.repeat(N_SIZE)}buil`;// Trigger ReDoSua_parser(MALICIOUS_UA);```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `ua-parser-js` to version 0.7.23 or higher.\n## References\n- [GitHub Commit](https://github.com/faisalman/ua-parser-js/commit/6d1f26df051ba681463ef109d36c9cf0f7e32b18)\n",
      "disclosureTime": "2020-10-29T10:53:18Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "0.7.23"
      ],
      "id": "SNYK-JS-UAPARSERJS-1023599",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2020-7793"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-06-21T19:28:47.413445Z",
      "moduleName": "ua-parser-js",
      "packageManager": "npm",
      "packageName": "ua-parser-js",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2020-12-13T15:57:49Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/faisalman/ua-parser-js/commit/6d1f26df051ba681463ef109d36c9cf0f7e32b18"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<0.7.23"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/publisher@4.0.0",
        "draft-js@0.10.5",
        "fbjs@0.8.17",
        "ua-parser-js@0.7.20"
      ],
      "upgradePath": [
        false,
        "draft-js@0.10.5",
        "fbjs@0.8.17",
        "ua-parser-js@0.7.23"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "ua-parser-js",
      "version": "0.7.20"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:R",
      "alternativeIds": [],
      "creationTime": "2021-02-12T14:40:27.714038Z",
      "credit": [
        "Doyensec"
      ],
      "cvssScore": 5.9,
      "description": "## Overview\n[ua-parser-js](https://github.com/faisalman/ua-parser-js) is a lightweight JavaScript-based user-agent string parser.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). Within `src/ua-parser.js`, the browser regex is vulnerable to exponential backtracking.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `ua-parser-js` to version 0.7.24 or higher.\n## References\n- [GitHub Commit](https://github.com/faisalman/ua-parser-js/commit/809439e20e273ce0d25c1d04e111dcf6011eb566)\n- [POC: Potential Exploit](https://gist.github.com/b-c-ds/6941d80d6b4e694df4bc269493b7be76)\n",
      "disclosureTime": "2021-02-12T14:37:57Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "0.7.24"
      ],
      "id": "SNYK-JS-UAPARSERJS-1072471",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-78cj-fxph-m83p"
        ],
        "CVE": [
          "CVE-2021-27292"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-09-24T13:25:49.071846Z",
      "moduleName": "ua-parser-js",
      "packageManager": "npm",
      "packageName": "ua-parser-js",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-02-12T16:09:40Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/faisalman/ua-parser-js/commit/809439e20e273ce0d25c1d04e111dcf6011eb566"
        },
        {
          "title": "POC: Potential Exploit",
          "url": "https://gist.github.com/b-c-ds/6941d80d6b4e694df4bc269493b7be76"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<0.7.24"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/publisher@4.0.0",
        "draft-js@0.10.5",
        "fbjs@0.8.17",
        "ua-parser-js@0.7.20"
      ],
      "upgradePath": [
        false,
        "draft-js@0.10.5",
        "fbjs@0.8.17",
        "ua-parser-js@0.7.24"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "ua-parser-js",
      "version": "0.7.20"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-09-09T15:30:19.590314Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n[ua-parser-js](https://github.com/faisalman/ua-parser-js) is a lightweight JavaScript-based user-agent string parser.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the regex for Redmi Phones and Mi Pad Tablets UA.\r\n\r\n### POC by Yeting Li\r\n```\r\nvar blank = \" \";\r\nfor (let i = 1; i < 5000; i++) {\r\nblank = blank + \" \";\r\n}\r\n\r\nstr_mi = \"android1mipad\" + blank + \"!\";\r\nstr_mi = str_mi + +blank + \"!\";\r\nmi = /android.+(mi[s-_]*(?:pad)(?:[s_]*[ws]+))s+build/i;\r\n\r\nvar count_mi = 0;\r\nfor (let i = 0; i < 10; i++) {\r\nvar time = Date.now();\r\nmi.test(str_mi);\r\nvar len = Date.now() - time;\r\ncount_mi = count_mi + len;\r\nconsole.log(\"mi:\" + blank.length + \": \" + len)\r\n}\r\nconsole.log(count_mi / 10);\r\n\r\nstr_redmi = \"android1redminote\" + blank + \"!\";\r\nredmi = /android.+(redmi[s-_]*(?:note)?(?:[s_]*[ws]+))s+build/i;\r\nvar count_redmi = 0;\r\nfor (let i = 0; i < 10; i++) {\r\nvar time = Date.now();\r\nredmi.test(str_redmi);\r\nvar len = Date.now() - time;\r\ncount_redmi = count_redmi + len;\r\nconsole.log(\"redmi:\" + blank.length + \": \" + len)\r\n}\r\nconsole.log(count_redmi / 10);\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `ua-parser-js` to version 0.7.22 or higher.\n## References\n- [GitHub Commit](https://github.com/faisalman/ua-parser-js/commit/233d3bae22a795153a7e6638887ce159c63e557d)\n",
      "disclosureTime": "2020-09-09T15:28:29Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "0.7.22"
      ],
      "id": "SNYK-JS-UAPARSERJS-610226",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-662x-fhqg-9p8v"
        ],
        "CVE": [
          "CVE-2020-7733"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-07-06T14:08:20.507448Z",
      "moduleName": "ua-parser-js",
      "packageManager": "npm",
      "packageName": "ua-parser-js",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2020-09-16T14:54:55Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/faisalman/ua-parser-js/commit/233d3bae22a795153a7e6638887ce159c63e557d"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<0.7.22"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/publisher@4.0.0",
        "draft-js@0.10.5",
        "fbjs@0.8.17",
        "ua-parser-js@0.7.20"
      ],
      "upgradePath": [
        false,
        "draft-js@0.10.5",
        "fbjs@0.8.17",
        "ua-parser-js@0.7.22"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "ua-parser-js",
      "version": "0.7.20"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-10-29T10:53:41.363786Z",
      "credit": [
        "Yeting Li",
        "Miguel de Moura"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n[ua-parser-js](https://github.com/faisalman/ua-parser-js) is a lightweight JavaScript-based user-agent string parser.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in multiple regexes (see linked commit for more info).\r\n\r\n## Proof of Concept by Miguel de Moura\r\n``` jsconst ua_parser = require('ua-parser-js');const N_SIZE = 5000;const MALICIOUS_UA = `android;;Trio${' '.repeat(N_SIZE)}buil`;// Trigger ReDoSua_parser(MALICIOUS_UA);```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `ua-parser-js` to version 0.7.23 or higher.\n## References\n- [GitHub Commit](https://github.com/faisalman/ua-parser-js/commit/6d1f26df051ba681463ef109d36c9cf0f7e32b18)\n",
      "disclosureTime": "2020-10-29T10:53:18Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "0.7.23"
      ],
      "id": "SNYK-JS-UAPARSERJS-1023599",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2020-7793"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-06-21T19:28:47.413445Z",
      "moduleName": "ua-parser-js",
      "packageManager": "npm",
      "packageName": "ua-parser-js",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2020-12-13T15:57:49Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/faisalman/ua-parser-js/commit/6d1f26df051ba681463ef109d36c9cf0f7e32b18"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<0.7.23"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/publisher@4.0.0",
        "react-tap-event-plugin@2.0.1",
        "fbjs@0.8.17",
        "ua-parser-js@0.7.20"
      ],
      "upgradePath": [
        false,
        "react-tap-event-plugin@2.0.1",
        "fbjs@0.8.17",
        "ua-parser-js@0.7.23"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "ua-parser-js",
      "version": "0.7.20"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:R",
      "alternativeIds": [],
      "creationTime": "2021-02-12T14:40:27.714038Z",
      "credit": [
        "Doyensec"
      ],
      "cvssScore": 5.9,
      "description": "## Overview\n[ua-parser-js](https://github.com/faisalman/ua-parser-js) is a lightweight JavaScript-based user-agent string parser.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). Within `src/ua-parser.js`, the browser regex is vulnerable to exponential backtracking.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `ua-parser-js` to version 0.7.24 or higher.\n## References\n- [GitHub Commit](https://github.com/faisalman/ua-parser-js/commit/809439e20e273ce0d25c1d04e111dcf6011eb566)\n- [POC: Potential Exploit](https://gist.github.com/b-c-ds/6941d80d6b4e694df4bc269493b7be76)\n",
      "disclosureTime": "2021-02-12T14:37:57Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "0.7.24"
      ],
      "id": "SNYK-JS-UAPARSERJS-1072471",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-78cj-fxph-m83p"
        ],
        "CVE": [
          "CVE-2021-27292"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-09-24T13:25:49.071846Z",
      "moduleName": "ua-parser-js",
      "packageManager": "npm",
      "packageName": "ua-parser-js",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-02-12T16:09:40Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/faisalman/ua-parser-js/commit/809439e20e273ce0d25c1d04e111dcf6011eb566"
        },
        {
          "title": "POC: Potential Exploit",
          "url": "https://gist.github.com/b-c-ds/6941d80d6b4e694df4bc269493b7be76"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<0.7.24"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/publisher@4.0.0",
        "react-tap-event-plugin@2.0.1",
        "fbjs@0.8.17",
        "ua-parser-js@0.7.20"
      ],
      "upgradePath": [
        false,
        "react-tap-event-plugin@2.0.1",
        "fbjs@0.8.17",
        "ua-parser-js@0.7.24"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "ua-parser-js",
      "version": "0.7.20"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-09-09T15:30:19.590314Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n[ua-parser-js](https://github.com/faisalman/ua-parser-js) is a lightweight JavaScript-based user-agent string parser.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the regex for Redmi Phones and Mi Pad Tablets UA.\r\n\r\n### POC by Yeting Li\r\n```\r\nvar blank = \" \";\r\nfor (let i = 1; i < 5000; i++) {\r\nblank = blank + \" \";\r\n}\r\n\r\nstr_mi = \"android1mipad\" + blank + \"!\";\r\nstr_mi = str_mi + +blank + \"!\";\r\nmi = /android.+(mi[s-_]*(?:pad)(?:[s_]*[ws]+))s+build/i;\r\n\r\nvar count_mi = 0;\r\nfor (let i = 0; i < 10; i++) {\r\nvar time = Date.now();\r\nmi.test(str_mi);\r\nvar len = Date.now() - time;\r\ncount_mi = count_mi + len;\r\nconsole.log(\"mi:\" + blank.length + \": \" + len)\r\n}\r\nconsole.log(count_mi / 10);\r\n\r\nstr_redmi = \"android1redminote\" + blank + \"!\";\r\nredmi = /android.+(redmi[s-_]*(?:note)?(?:[s_]*[ws]+))s+build/i;\r\nvar count_redmi = 0;\r\nfor (let i = 0; i < 10; i++) {\r\nvar time = Date.now();\r\nredmi.test(str_redmi);\r\nvar len = Date.now() - time;\r\ncount_redmi = count_redmi + len;\r\nconsole.log(\"redmi:\" + blank.length + \": \" + len)\r\n}\r\nconsole.log(count_redmi / 10);\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `ua-parser-js` to version 0.7.22 or higher.\n## References\n- [GitHub Commit](https://github.com/faisalman/ua-parser-js/commit/233d3bae22a795153a7e6638887ce159c63e557d)\n",
      "disclosureTime": "2020-09-09T15:28:29Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "0.7.22"
      ],
      "id": "SNYK-JS-UAPARSERJS-610226",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-662x-fhqg-9p8v"
        ],
        "CVE": [
          "CVE-2020-7733"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-07-06T14:08:20.507448Z",
      "moduleName": "ua-parser-js",
      "packageManager": "npm",
      "packageName": "ua-parser-js",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2020-09-16T14:54:55Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/faisalman/ua-parser-js/commit/233d3bae22a795153a7e6638887ce159c63e557d"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<0.7.22"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/publisher@4.0.0",
        "react-tap-event-plugin@2.0.1",
        "fbjs@0.8.17",
        "ua-parser-js@0.7.20"
      ],
      "upgradePath": [
        false,
        "react-tap-event-plugin@2.0.1",
        "fbjs@0.8.17",
        "ua-parser-js@0.7.22"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "ua-parser-js",
      "version": "0.7.20"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N/E:P",
      "alternativeIds": [],
      "creationTime": "2021-07-26T12:59:09.903181Z",
      "credit": [
        "ready-research"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[url-parse](https://www.npmjs.com/package/url-parse) is a Small footprint URL parser that works seamlessly across Node.js and browser environments.\n\nAffected versions of this package are vulnerable to Open Redirect due to improper escaping of slash characters.\n## Remediation\nUpgrade `url-parse` to version 1.5.2 or higher.\n## References\n- [GitHub Commit](https://github.com/unshiftio/url-parse/commit/81ab967889b08112d3356e451bf03e6aa0cbb7e0)\n- [GitHub Issue](https://github.com/unshiftio/url-parse/issues/206)\n- [GitHub PR](https://github.com/unshiftio/url-parse/pull/208)\n",
      "disclosureTime": "2021-07-26T12:57:37Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "1.5.2"
      ],
      "id": "SNYK-JS-URLPARSE-1533425",
      "identifiers": {
        "CWE": [
          "CWE-601"
        ],
        "CVE": [
          "CVE-2021-3664"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-07-26T15:23:41.208720Z",
      "moduleName": "url-parse",
      "packageManager": "npm",
      "packageName": "url-parse",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-07-26T15:23:41.206700Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/unshiftio/url-parse/commit/81ab967889b08112d3356e451bf03e6aa0cbb7e0"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/unshiftio/url-parse/issues/206"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/unshiftio/url-parse/pull/208"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Open Redirect",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<1.5.2"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/publisher@4.0.0",
        "swagger-ui-react@3.45.0",
        "url-parse@1.5.1"
      ],
      "upgradePath": [
        false,
        "swagger-ui-react@3.45.0",
        "url-parse@1.5.2"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "url-parse",
      "version": "1.5.1"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:L/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2022-02-15T10:01:29.002928Z",
      "credit": [
        "ranjit-git"
      ],
      "cvssScore": 6.4,
      "description": "## Overview\n[url-parse](https://www.npmjs.com/package/url-parse) is a Small footprint URL parser that works seamlessly across Node.js and browser environments.\n\nAffected versions of this package are vulnerable to Access Restriction Bypass due to improper parsing process, that may lead to incorrect handling of authentication credentials and hostname, which allows bypass of hostname validation.\r\n\r\n## PoC:\r\n\r\n```js\r\n// PoC.js\r\n var parse = require('url-parse')\r\nvar cc=parse(\"http://admin:password123@@127.0.0.1\")\r\n\r\n//Output:\r\n{ slashes: true,\r\n  protocol: 'http:',\r\n  hash: '',\r\n  query: '',\r\n  pathname: '/',\r\n  auth: 'admin:password123',\r\n  host: '@127.0.0.1',\r\n  port: '',\r\n  hostname: '@127.0.0.1',\r\n  password: 'password123',\r\n  username: 'admin',\r\n  origin: 'http://@127.0.0.1',\r\n  href: 'http://admin:password123@@127.0.0.1/' }\r\n```\n## Remediation\nUpgrade `url-parse` to version 1.5.6 or higher.\n## References\n- [GitHub Commit](https://github.com/unshiftio/url-parse/commit/9be7ee88afd2bb04e4d5a1a8da9a389ac13f8c40)\n- [GitHub PR](https://github.com/unshiftio/url-parse/pull/223)\n",
      "disclosureTime": "2022-02-15T09:53:25Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "1.5.6"
      ],
      "id": "SNYK-JS-URLPARSE-2401205",
      "identifiers": {
        "CWE": [
          "CWE-639"
        ],
        "CVE": [
          "CVE-2022-0512"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-02-15T15:27:36.795014Z",
      "moduleName": "url-parse",
      "packageManager": "npm",
      "packageName": "url-parse",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-02-15T13:06:08Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/unshiftio/url-parse/commit/9be7ee88afd2bb04e4d5a1a8da9a389ac13f8c40"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/unshiftio/url-parse/pull/223"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Access Restriction Bypass",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<1.5.6"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/publisher@4.0.0",
        "swagger-ui-react@3.45.0",
        "url-parse@1.5.1"
      ],
      "upgradePath": [
        false,
        "swagger-ui-react@3.45.0",
        "url-parse@1.5.6"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "url-parse",
      "version": "1.5.1"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:C/C:L/I:L/A:N/E:P",
      "alternativeIds": [],
      "creationTime": "2022-02-21T10:47:02.113879Z",
      "credit": [
        "Rohan Sharma"
      ],
      "cvssScore": 6.4,
      "description": "## Overview\n[url-parse](https://www.npmjs.com/package/url-parse) is a Small footprint URL parser that works seamlessly across Node.js and browser environments.\n\nAffected versions of this package are vulnerable to Authorization Bypass via the `hostname` field of a parsed URL, because \"url-parse\" is unable to find the correct hostname when no port number is provided in the URL.\r\n\r\n## PoC:\r\n```js\r\nvar Url = require('url-parse');\r\nvar PAYLOAD = \"http://example.com:\";\r\n\r\nconsole.log(Url(PAYLOAD));\r\n\r\n// Expected hostname: example.com\r\n// Actual hostname by url-parse: example.com:\r\n```\r\n\r\nOutput:\r\n\r\n```\r\n{\r\n  slashes: true,\r\n  protocol: 'http:',\r\n  hash: '',\r\n  query: '',\r\n  pathname: '/',\r\n  auth: '',\r\n  host: 'example.com:',\r\n  port: '',\r\n  hostname: 'example.com:',\r\n  password: '',\r\n  username: '',\r\n  origin: 'http://example.com:',\r\n  href: 'http://example.com:/'\r\n}\r\n```\n## Remediation\nUpgrade `url-parse` to version 1.5.8 or higher.\n## References\n- [GitHub Commit](https://github.com/unshiftio/url-parse/commit/d5c64791ef496ca5459ae7f2176a31ea53b127e5)\n",
      "disclosureTime": "2022-02-21T10:36:50Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "1.5.8"
      ],
      "id": "SNYK-JS-URLPARSE-2407759",
      "identifiers": {
        "CWE": [
          "CWE-285"
        ],
        "CVE": [
          "CVE-2022-0686"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-02-21T16:02:45.057937Z",
      "moduleName": "url-parse",
      "packageManager": "npm",
      "packageName": "url-parse",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-02-21T16:02:45.055472Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/unshiftio/url-parse/commit/d5c64791ef496ca5459ae7f2176a31ea53b127e5"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Authorization Bypass",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<1.5.8"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/publisher@4.0.0",
        "swagger-ui-react@3.45.0",
        "url-parse@1.5.1"
      ],
      "upgradePath": [
        false,
        "swagger-ui-react@3.45.0",
        "url-parse@1.5.8"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "url-parse",
      "version": "1.5.1"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:N/E:P",
      "alternativeIds": [],
      "creationTime": "2022-02-21T12:56:54.006952Z",
      "credit": [
        "haxatron"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n[url-parse](https://www.npmjs.com/package/url-parse) is a Small footprint URL parser that works seamlessly across Node.js and browser environments.\n\nAffected versions of this package are vulnerable to Improper Input Validation due to improper fix of [CVE-2020-8124](https://security.snyk.io/vuln/SNYK-JS-URLPARSE-543307) , it is possible to be exploited via the `\\b` (backspace) character.\r\n\r\n## PoC:\r\n```js\r\nconst parse = require('./index.js')\r\n\r\nurl = parse('\\bhttp://google.com')\r\n\r\nconsole.log(url)\r\n```\r\nOutput:\r\n\r\n```\r\n{\r\n  slashes: false,\r\n  protocol: '',\r\n  hash: '',\r\n  query: '',\r\n  pathname: '\\bhttp://google.com',\r\n  auth: '',\r\n  host: '',\r\n  port: '',\r\n  hostname: '',\r\n  password: '',\r\n  username: '',\r\n  origin: 'null',\r\n  href: '\\bhttp://google.com'\r\n}\r\n```\n## Remediation\nUpgrade `url-parse` to version 1.5.9 or higher.\n## References\n- [GitHub Commit](https://github.com/unshiftio/url-parse/commit/0e3fb542d60ddbf6933f22eb9b1e06e25eaa5b63)\n",
      "disclosureTime": "2022-02-21T12:49:06Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "1.5.9"
      ],
      "id": "SNYK-JS-URLPARSE-2407770",
      "identifiers": {
        "CWE": [
          "CWE-20"
        ],
        "CVE": [
          "CVE-2022-0691"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-06-09T15:13:29.620707Z",
      "moduleName": "url-parse",
      "packageManager": "npm",
      "packageName": "url-parse",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-02-21T16:02:45Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/unshiftio/url-parse/commit/0e3fb542d60ddbf6933f22eb9b1e06e25eaa5b63"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Improper Input Validation",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<1.5.9"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "@wso2apim/publisher@4.0.0",
        "swagger-ui-react@3.45.0",
        "url-parse@1.5.1"
      ],
      "upgradePath": [
        false,
        "swagger-ui-react@3.45.0",
        "url-parse@1.5.9"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "url-parse",
      "version": "1.5.1"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N/E:P",
      "alternativeIds": [],
      "creationTime": "2022-02-24T09:02:19.641584Z",
      "credit": [
        "haxatron"
      ],
      "cvssScore": 6.2,
      "description": "## Overview\n[url-parse](https://www.npmjs.com/package/url-parse) is a Small footprint URL parser that works seamlessly across Node.js and browser environments.\n\nAffected versions of this package are vulnerable to Authorization Bypass Through User-Controlled Key due to incorrect conversion of `@` in the protocol field of the HREF.\r\n\r\n## PoC:\r\n```\r\nparse = require('url-parse')\r\n\r\nconsole.log(parse(\"http:@/127.0.0.1\"))\r\n```\r\nOutput:\r\n\r\n```\r\n{\r\n  slashes: true,\r\n  protocol: 'http:',\r\n  hash: '',\r\n  query: '',\r\n  pathname: '/127.0.0.1',\r\n  auth: '',\r\n  host: '',\r\n  port: '',\r\n  hostname: '',\r\n  password: '',\r\n  username: '',\r\n  origin: 'null',\r\n  href: 'http:///127.0.0.1'\r\n}\r\n```\n## Remediation\nUpgrade `url-parse` to version 1.5.7 or higher.\n## References\n- [GitHub Commit](https://github.com/unshiftio/url-parse/commit/ef45a1355375a8244063793a19059b4f62fc8788)\n- [GitHub PR](https://github.com/unshiftio/url-parse/pull/226)\n",
      "disclosureTime": "2022-02-17T00:00:00Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "1.5.7"
      ],
      "id": "SNYK-JS-URLPARSE-2412697",
      "identifiers": {
        "CWE": [
          "CWE-639"
        ],
        "CVE": [
          "CVE-2022-0639"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-02-24T16:08:31.527221Z",
      "moduleName": "url-parse",
      "packageManager": "npm",
      "packageName": "url-parse",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-02-24T16:08:31.525302Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/unshiftio/url-parse/commit/ef45a1355375a8244063793a19059b4f62fc8788"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/unshiftio/url-parse/pull/226"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Authorization Bypass Through User-Controlled Key",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<1.5.7"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/publisher@4.0.0",
        "swagger-ui-react@3.45.0",
        "url-parse@1.5.1"
      ],
      "upgradePath": [
        false,
        "swagger-ui-react@3.45.0",
        "url-parse@1.5.7"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "url-parse",
      "version": "1.5.1"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-05T12:57:03.048070Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[validator](https://www.npmjs.com/package/validator) is a library of string validators and sanitizers.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `isSlug` function\r\n\r\n### PoC\r\n```\r\nvar validator = require(\"validator\")\r\nfunction build_attack(n) {\r\n\tvar ret = \"111\"\r\n\tfor (var i = 0; i < n; i++) {\r\n\t\tret += \"a\"\r\n\t}\r\n\r\n\treturn ret+\"_\";\r\n}\r\nfor(var i = 1; i <= 50000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n       validator.isSlug(attack_str)\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n   }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `validator` to version 13.6.0 or higher.\n## References\n- [GitHub Commit](https://github.com/tux-tn/validator.js/commit/b21879cf45c05ee11b2d79e612b651bf7b2d93b7#diff-f41087599986e29c3c0dc15b62f1bf96d8aba16fe41f3730e315c84c2c4cb311)\n- [GitHub Issue](https://github.com/validatorjs/validator.js/issues/1596)\n- [GitHubPR - Actual fix](https://github.com/validatorjs/validator.js/pull/1738)\n- [GitHub PR - Initial fix](https://github.com/validatorjs/validator.js/pull/1603)\n",
      "disclosureTime": "2021-04-05T12:54:38Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "13.6.0"
      ],
      "id": "SNYK-JS-VALIDATOR-1090599",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": []
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-11-02T09:54:37.437536Z",
      "moduleName": "validator",
      "packageManager": "npm",
      "packageName": "validator",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-26T16:18:45Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/tux-tn/validator.js/commit/b21879cf45c05ee11b2d79e612b651bf7b2d93b7%23diff-f41087599986e29c3c0dc15b62f1bf96d8aba16fe41f3730e315c84c2c4cb311"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/validatorjs/validator.js/issues/1596"
        },
        {
          "title": "GitHubPR - Actual fix",
          "url": "https://github.com/validatorjs/validator.js/pull/1738"
        },
        {
          "title": "GitHub PR - Initial fix",
          "url": "https://github.com/validatorjs/validator.js/pull/1603"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<13.6.0"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/publisher@4.0.0",
        "@apidevtools/swagger-parser@10.0.2",
        "z-schema@4.2.3",
        "validator@12.2.0"
      ],
      "upgradePath": [
        false,
        "@apidevtools/swagger-parser@10.0.2",
        "z-schema@4.2.4",
        "validator@13.6.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "validator",
      "version": "12.2.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-05T12:59:35.520598Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[validator](https://www.npmjs.com/package/validator) is a library of string validators and sanitizers.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `rtrim` function.\r\n\r\n### PoC\r\n```\r\nvar validator = require(\"validator\")\r\nfunction build_attack(n) {\r\n\tvar ret = \"\"\r\n\tfor (var i = 0; i < n; i++) {\r\n\t\tret += \" \"\r\n\t}\r\n\r\n\treturn ret+\"◎\";\r\n}\r\nfor(var i = 1; i <= 50000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n       validator.rtrim(attack_str)\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n   }\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `validator` to version 13.7.0 or higher.\n## References\n- [GitHub Issue](https://github.com/validatorjs/validator.js/issues/1599)\n- [GitHub PR](https://github.com/validatorjs/validator.js/pull/1603)\n- [GitHub PR #2](https://github.com/validatorjs/validator.js/pull/1738)\n",
      "disclosureTime": "2021-04-05T12:43:44Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "13.7.0"
      ],
      "id": "SNYK-JS-VALIDATOR-1090600",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-3765"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-11-04T16:13:50.818043Z",
      "moduleName": "validator",
      "packageManager": "npm",
      "packageName": "validator",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-26T16:18:44Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/validatorjs/validator.js/issues/1599"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/validatorjs/validator.js/pull/1603"
        },
        {
          "title": "GitHub PR #2",
          "url": "https://github.com/validatorjs/validator.js/pull/1738"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<13.7.0"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/publisher@4.0.0",
        "@apidevtools/swagger-parser@10.0.2",
        "z-schema@4.2.3",
        "validator@12.2.0"
      ],
      "upgradePath": [
        false,
        "@apidevtools/swagger-parser@10.0.2",
        "z-schema@4.2.4",
        "validator@13.7.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "validator",
      "version": "12.2.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-05T13:13:17.588279Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[validator](https://www.npmjs.com/package/validator) is a library of string validators and sanitizers.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `isHSL` function.\r\n\r\n### PoC\r\n```\r\nvar validator = require(\"validator\")\r\nfunction build_attack(n) {\r\n\tvar ret = \"hsla(0\"\r\n\tfor (var i = 0; i < n; i++) {\r\n\t\tret += \" \"\r\n\t}\r\n\r\n\treturn ret+\"◎\";\r\n}\r\nfor(var i = 1; i <= 50000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n       validator.isHSL(attack_str)\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n   }\r\n}\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `validator` to version 13.6.0 or higher.\n## References\n- [GitHub Issue](https://github.com/validatorjs/validator.js/issues/1598)\n- [GitHub PR](https://github.com/validatorjs/validator.js/pull/1651)\n",
      "disclosureTime": "2021-04-05T13:11:19Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "13.6.0"
      ],
      "id": "SNYK-JS-VALIDATOR-1090601",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": []
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.041865Z",
      "moduleName": "validator",
      "packageManager": "npm",
      "packageName": "validator",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-26T16:18:43.450928Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/validatorjs/validator.js/issues/1598"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/validatorjs/validator.js/pull/1651"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<13.6.0"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/publisher@4.0.0",
        "@apidevtools/swagger-parser@10.0.2",
        "z-schema@4.2.3",
        "validator@12.2.0"
      ],
      "upgradePath": [
        false,
        "@apidevtools/swagger-parser@10.0.2",
        "z-schema@4.2.4",
        "validator@13.6.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "validator",
      "version": "12.2.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-05T13:15:56.238780Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[validator](https://www.npmjs.com/package/validator) is a library of string validators and sanitizers.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `isEmail` function.\r\n\r\n### PoC\r\n```\r\nvar validator = require(\"validator\")\r\nfunction build_attack(n) {\r\n\tvar ret = \"\"\r\n\tfor (var i = 0; i < n; i++) {\r\n\t\tret += \"<\"\r\n\t}\r\n\r\n\treturn ret+\"\";\r\n}\r\nfor(var i = 1; i <= 50000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        validator.isEmail(attack_str,{ allow_display_name: true })\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n   }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `validator` to version 13.6.0 or higher.\n## References\n- [GitHub Issue](https://github.com/validatorjs/validator.js/issues/1597)\n- [GitHub PR](https://github.com/validatorjs/validator.js/pull/1651)\n",
      "disclosureTime": "2021-04-05T13:14:43Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "13.6.0"
      ],
      "id": "SNYK-JS-VALIDATOR-1090602",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": []
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.044794Z",
      "moduleName": "validator",
      "packageManager": "npm",
      "packageName": "validator",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-26T16:18:42.989822Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/validatorjs/validator.js/issues/1597"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/validatorjs/validator.js/pull/1651"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<13.6.0"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "@wso2apim/publisher@4.0.0",
        "@apidevtools/swagger-parser@10.0.2",
        "z-schema@4.2.3",
        "validator@12.2.0"
      ],
      "upgradePath": [
        false,
        "@apidevtools/swagger-parser@10.0.2",
        "z-schema@4.2.4",
        "validator@13.6.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "validator",
      "version": "12.2.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [
        "SNYK-JS-MIME-10788"
      ],
      "creationTime": "2017-09-26T05:48:40.307000Z",
      "credit": [
        "Cristian-Alexandru Staicu"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\n[mime](https://www.npmjs.com/package/mime) is a comprehensive, compact MIME type module.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). It uses regex the following regex `/.*[\\.\\/\\\\]/` in its lookup, which can cause a slowdown of 2 seconds for 50k characters.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `mime` to version 1.4.1, 2.0.3 or higher.\n## References\n- [GitHub Commit](https://github.com/broofa/node-mime/commit/1df903fdeb9ae7eaa048795b8d580ce2c98f40b0)\n- [GitHub Commit](https://github.com/broofa/node-mime/commit/855d0c4b8b22e4a80b9401a81f2872058eae274d)\n- [GitHub Issue](https://github.com/broofa/node-mime/issues/167)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/535)\n",
      "disclosureTime": "2017-09-07T21:00:00Z",
      "exploit": "Not Defined",
      "functions": [
        {
          "functionId": {
            "filePath": "Mime.js",
            "className": null,
            "functionName": "Mime.prototype.getType"
          },
          "version": [
            ">=2.0.0 <2.0.3"
          ]
        },
        {
          "functionId": {
            "filePath": "mime.js",
            "className": null,
            "functionName": "Mime.prototype.lookup"
          },
          "version": [
            ">=1.2.6 <1.4.1"
          ]
        },
        {
          "functionId": {
            "filePath": "mime.js",
            "className": null,
            "functionName": "mime.module.exports.lookup"
          },
          "version": [
            "<1.2.6"
          ]
        }
      ],
      "fixedIn": [
        "1.4.1",
        "2.0.3"
      ],
      "id": "npm:mime:20170907",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "NSP": [
          "535"
        ],
        "CVE": [
          "CVE-2017-16138"
        ],
        "ALTERNATIVE": [
          "SNYK-JS-MIME-10788"
        ],
        "GHSA": [
          "GHSA-wrvr-8mpx-r7pp"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-12-22T17:02:11.685484Z",
      "moduleName": "mime",
      "packageManager": "npm",
      "packageName": "mime",
      "patches": [
        {
          "comments": [],
          "id": "patch:npm:mime:20170907:0",
          "modificationTime": "2019-12-03T11:40:45.877450Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/mime/20170907/mime_20170907_0_0_855d0c4b8b22e4a80b9401a81f2872058eae274d.patch"
          ],
          "version": "=1.2.11 || =1.3.4"
        }
      ],
      "proprietary": false,
      "publicationTime": "2017-09-27T05:48:40Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/broofa/node-mime/commit/1df903fdeb9ae7eaa048795b8d580ce2c98f40b0"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/broofa/node-mime/commit/855d0c4b8b22e4a80b9401a81f2872058eae274d"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/broofa/node-mime/issues/167"
        },
        {
          "title": "NPM Security Advisory",
          "url": "https://www.npmjs.com/advisories/535"
        }
      ],
      "severity": "low",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [
        {
          "functionId": {
            "filePath": "Mime.js",
            "functionName": "Mime.prototype.getType"
          },
          "version": [
            ">=2.0.0 <2.0.3"
          ]
        },
        {
          "functionId": {
            "filePath": "mime.js",
            "functionName": "Mime.prototype.lookup"
          },
          "version": [
            ">=1.2.6 <1.4.1"
          ]
        },
        {
          "functionId": {
            "filePath": "mime.js",
            "functionName": "mime.module.exports.lookup"
          },
          "version": [
            "<1.2.6"
          ]
        }
      ],
      "semver": {
        "vulnerable": [
          "<1.4.1",
          ">=2.0.0 <2.0.3"
        ]
      },
      "severityWithCritical": "low",
      "from": [
        "@wso2apim/publisher@4.0.0",
        "url-loader@0.5.9",
        "mime@1.3.6"
      ],
      "upgradePath": [
        false,
        "url-loader@0.6.0",
        "mime@1.4.1"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "mime",
      "version": "1.3.6"
    }
  ],
  "ok": false,
  "dependencyCount": 628,
  "org": "thayaruban",
  "policy": "# Snyk (https://snyk.io) policy file, patches or ignores known vulnerabilities.\nversion: v1.25.0\n# ignores vulnerabilities until expiry date; change duration by modifying expiry date\nignore:\n  SNYK-JS-FOLLOWREDIRECTS-2332181:\n    - '*':\n        reason: dev dependency check 2\n        created: '2022-01-23T15:51:59.746Z'\n        expires: '2022-02-06T15:51:59.135Z'\n        ignoredBy:\n          id: fd29e464-3a28-474a-87cf-025f8e41e13e\n          name: Thayaruban Thayalan\n          email: 180638l@uom.lk\n        reasonType: temporary-ignore\n        disregardIfFixable: false\n        source: api\npatch: {}\n",
  "isPrivate": true,
  "licensesPolicy": {
    "severities": {},
    "orgLicenseRules": {
      "AGPL-1.0": {
        "licenseType": "AGPL-1.0",
        "severity": "high",
        "instructions": ""
      },
      "AGPL-3.0": {
        "licenseType": "AGPL-3.0",
        "severity": "high",
        "instructions": ""
      },
      "Artistic-1.0": {
        "licenseType": "Artistic-1.0",
        "severity": "medium",
        "instructions": ""
      },
      "Artistic-2.0": {
        "licenseType": "Artistic-2.0",
        "severity": "medium",
        "instructions": ""
      },
      "CDDL-1.0": {
        "licenseType": "CDDL-1.0",
        "severity": "medium",
        "instructions": ""
      },
      "CPOL-1.02": {
        "licenseType": "CPOL-1.02",
        "severity": "high",
        "instructions": ""
      },
      "EPL-1.0": {
        "licenseType": "EPL-1.0",
        "severity": "medium",
        "instructions": ""
      },
      "GPL-2.0": {
        "licenseType": "GPL-2.0",
        "severity": "high",
        "instructions": ""
      },
      "GPL-3.0": {
        "licenseType": "GPL-3.0",
        "severity": "high",
        "instructions": ""
      },
      "LGPL-2.0": {
        "licenseType": "LGPL-2.0",
        "severity": "medium",
        "instructions": ""
      },
      "LGPL-2.1": {
        "licenseType": "LGPL-2.1",
        "severity": "medium",
        "instructions": ""
      },
      "LGPL-3.0": {
        "licenseType": "LGPL-3.0",
        "severity": "medium",
        "instructions": ""
      },
      "MPL-1.1": {
        "licenseType": "MPL-1.1",
        "severity": "medium",
        "instructions": ""
      },
      "MPL-2.0": {
        "licenseType": "MPL-2.0",
        "severity": "medium",
        "instructions": ""
      },
      "MS-RL": {
        "licenseType": "MS-RL",
        "severity": "medium",
        "instructions": ""
      },
      "SimPL-2.0": {
        "licenseType": "SimPL-2.0",
        "severity": "high",
        "instructions": ""
      }
    }
  },
  "packageManager": "npm",
  "projectId": "3a06008b-8221-48ab-9a5a-954e933f4438",
  "ignoreSettings": {
    "adminOnly": false,
    "reasonRequired": true,
    "disregardFilesystemIgnores": false
  },
  "summary": "85 vulnerable dependency paths",
  "remediation": {
    "unresolved": [
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2020-07-16T08:19:48.462528Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 8.1,
        "description": "## Overview\n[ajv](https://www.npmjs.com/package/ajv) is an Another JSON Schema Validator\n\nAffected versions of this package are vulnerable to Prototype Pollution. A carefully crafted JSON schema could be provided that allows execution of other code by prototype pollution. (While untrusted schemas are recommended against, the worst case of an untrusted schema should be a denial of service, not execution of code.)\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `ajv` to version 6.12.3 or higher.\n## References\n- [HackerOne Report](https://hackerone.com/bugs?subject=user&report_id=894259)\n",
        "disclosureTime": "2020-07-16T08:14:41Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "6.12.3"
        ],
        "id": "SNYK-JS-AJV-584908",
        "identifiers": {
          "CWE": [
            "CWE-400"
          ],
          "CVE": [
            "CVE-2020-15366"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2020-07-20T12:40:09.463832Z",
        "moduleName": "ajv",
        "packageManager": "npm",
        "packageName": "ajv",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2020-07-16T13:58:04Z",
        "references": [
          {
            "title": "HackerOne Report",
            "url": "https://hackerone.com/bugs?subject=user&report_id=894259"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Prototype Pollution",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "<6.12.3"
          ]
        },
        "from": [
          "@wso2apim/publisher@4.0.0",
          "babel-plugin-formatjs@9.1.3",
          "@types/schema-utils@2.4.0",
          "schema-utils@0.3.0",
          "ajv@5.5.2"
        ],
        "upgradePath": [
          false,
          "babel-plugin-formatjs@9.1.3",
          "@types/schema-utils@2.4.0",
          "schema-utils@0.4.4",
          "ajv@6.12.3"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "ajv",
        "version": "5.5.2",
        "severityWithCritical": "high"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
        "alternativeIds": [],
        "creationTime": "2021-04-01T13:30:25.617926Z",
        "credit": [
          "Yeting Li"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\n[browserslist](https://www.npmjs.org/package/browserslist) is a Share target browsers between different front-end tools, like Autoprefixer, Stylelint and babel-env-preset\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) during parsing of queries.\r\n\r\n### PoC by Yeting Li\r\n```\r\nvar browserslist = require(\"browserslist\")\r\nfunction build_attack(n) {\r\n    var ret = \"> \"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"1\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// browserslist('> 1%')\r\n\r\n//browserslist(build_attack(500000))\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            browserslist(attack_str);\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `browserslist` to version 4.16.5 or higher.\n## References\n- [GitHub Commit](https://github.com/browserslist/browserslist/commit/c091916910dfe0b5fd61caad96083c6709b02d98)\n- [GitHub PR](https://github.com/browserslist/browserslist/pull/593)\n- [Vulnerable Regular Expression](https://github.com/browserslist/browserslist/blob/e82f32d1d4100d6bc79ea0b6b6a2d281a561e33c/index.js#L472-L474)\n",
        "disclosureTime": "2021-04-01T13:19:27Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [
          "4.16.5"
        ],
        "id": "SNYK-JS-BROWSERSLIST-1090194",
        "identifiers": {
          "CWE": [
            "CWE-400"
          ],
          "GHSA": [
            "GHSA-w8qv-6jwh-64r5"
          ],
          "CVE": [
            "CVE-2021-23364"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2022-05-16T13:18:31.649076Z",
        "moduleName": "browserslist",
        "packageManager": "npm",
        "packageName": "browserslist",
        "patches": [],
        "proprietary": true,
        "publicationTime": "2021-04-28T15:14:31Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/browserslist/browserslist/commit/c091916910dfe0b5fd61caad96083c6709b02d98"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/browserslist/browserslist/pull/593"
          },
          {
            "title": "Vulnerable Regular Expression",
            "url": "https://github.com/browserslist/browserslist/blob/e82f32d1d4100d6bc79ea0b6b6a2d281a561e33c/index.js%23L472-L474"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Regular Expression Denial of Service (ReDoS)",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "<4.16.5"
          ]
        },
        "from": [
          "@wso2apim/publisher@4.0.0",
          "caniuse-api@3.0.0",
          "browserslist@4.12.0"
        ],
        "upgradePath": [
          false,
          "caniuse-api@3.0.0",
          "browserslist@4.16.5"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "browserslist",
        "version": "4.12.0",
        "severityWithCritical": "medium"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "alternativeIds": [],
        "creationTime": "2021-05-30T09:26:40.480408Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\n[css-what](https://www.npmjs.org/package/css-what) is an a CSS selector parser\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via attribute parsing.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `css-what` to version 5.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/fb55/css-what/commit/4cdaacfd0d4b6fd00614be030da0dea6c2994655)\n- [GitHub PR](https://github.com/fb55/css-what/pull/503)\n- [GitHub Release](https://github.com/fb55/css-what/releases/tag/v5.0.1)\n",
        "disclosureTime": "2021-05-30T09:19:01Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "5.0.1"
        ],
        "id": "SNYK-JS-CSSWHAT-1298035",
        "identifiers": {
          "CWE": [
            "CWE-400"
          ],
          "GHSA": [
            "GHSA-q8pj-2vqx-8ggc"
          ],
          "CVE": [
            "CVE-2021-33587"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2021-07-06T14:08:59.787603Z",
        "moduleName": "css-what",
        "packageManager": "npm",
        "packageName": "css-what",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2021-05-30T13:11:01.486283Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/fb55/css-what/commit/4cdaacfd0d4b6fd00614be030da0dea6c2994655"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/fb55/css-what/pull/503"
          },
          {
            "title": "GitHub Release",
            "url": "https://github.com/fb55/css-what/releases/tag/v5.0.1"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Regular Expression Denial of Service (ReDoS)",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "<5.0.1"
          ]
        },
        "from": [
          "@wso2apim/publisher@4.0.0",
          "react-safe-html@0.6.1",
          "cheerio@0.22.0",
          "css-select@1.2.0",
          "css-what@2.1.3"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "css-what",
        "version": "2.1.3",
        "severityWithCritical": "medium"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P",
        "alternativeIds": [],
        "creationTime": "2021-08-31T15:49:30.361142Z",
        "credit": [
          "Alessio Della Libera of Snyk Research Team"
        ],
        "cvssScore": 5.6,
        "description": "## Overview\n[json-pointer](https://www.npmjs.com/package/json-pointer) is a set of utilities for JSON pointers described by RFC 6901\n\nAffected versions of this package are vulnerable to Prototype Pollution. A type confusion vulnerability can lead to a bypass of CVE-2020-7709 when the pointer components are arrays.\r\n\r\n### PoC\r\n\r\n```\r\nconst pointer = require('json-pointer');\r\n\r\n// pointer.set({}, ['__proto__', 'polluted'], 'yes')\r\n// console.log(polluted) // ReferenceError: polluted is not defined\r\n\r\npointer.set({}, [['__proto__'], 'polluted'], 'yes')\r\nconsole.log(polluted)\"\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nA fix was pushed into the `master` branch but not yet published.\n## References\n- [GitHub Commit](https://github.com/manuelstofer/json-pointer/commit/47dae1d369a25bd9bdcdbc963b8699b89a882c81)\n- [Snyk Blog](https://snyk.io/blog/remediate-javascript-type-confusion-bypassed-input-validation/)\n- [Vulnerable Code](https://github.com/manuelstofer/json-pointer/blob/master/index.js#L78)\n",
        "disclosureTime": "2021-08-31T15:48:25Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [],
        "id": "SNYK-JS-JSONPOINTER-1577287",
        "identifiers": {
          "CWE": [
            "CWE-1321"
          ],
          "CVE": [
            "CVE-2021-23820"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2022-06-09T15:18:12.256527Z",
        "moduleName": "json-pointer",
        "packageManager": "npm",
        "packageName": "json-pointer",
        "patches": [],
        "proprietary": true,
        "publicationTime": "2021-11-03T16:34:28Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/manuelstofer/json-pointer/commit/47dae1d369a25bd9bdcdbc963b8699b89a882c81"
          },
          {
            "title": "Snyk Blog",
            "url": "https://snyk.io/blog/remediate-javascript-type-confusion-bypassed-input-validation/"
          },
          {
            "title": "Vulnerable Code",
            "url": "https://github.com/manuelstofer/json-pointer/blob/master/index.js%23L78"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Prototype Pollution",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "*"
          ]
        },
        "from": [
          "@wso2apim/publisher@4.0.0",
          "@asyncapi/react-component@0.19.2",
          "openapi-sampler@1.0.0-beta.15",
          "json-pointer@0.6.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "json-pointer",
        "version": "0.6.0",
        "severityWithCritical": "medium"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:L/I:L/A:H/E:P/RL:O/RC:C",
        "alternativeIds": [],
        "creationTime": "2020-07-30T14:36:34.722773Z",
        "credit": [
          "posix"
        ],
        "cvssScore": 6,
        "description": "## Overview\n[json-pointer](https://www.npmjs.com/package/json-pointer) is a set of utilities for JSON pointers described by RFC 6901\n\nAffected versions of this package are vulnerable to Prototype Pollution. Multiple reference of object using slash is supported.\r\n\r\n### PoC\r\n```js\r\nvar pointer = require('json-pointer');\r\n\r\nvar obj = {};\r\npointer.set(obj, '/__proto__/polluted', true);\r\n\r\nconsole.log(polluted); // true\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `json-pointer` to version 0.6.1 or higher.\n## References\n- [GitHub PR](https://github.com/manuelstofer/json-pointer/pull/34/files)\n",
        "disclosureTime": "2020-07-30T14:03:12Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [
          "0.6.1"
        ],
        "id": "SNYK-JS-JSONPOINTER-596925",
        "identifiers": {
          "CWE": [
            "CWE-400"
          ],
          "GHSA": [
            "GHSA-7mg4-w3w5-x5pc"
          ],
          "CVE": [
            "CVE-2020-7709"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2021-07-06T14:08:28.760779Z",
        "moduleName": "json-pointer",
        "packageManager": "npm",
        "packageName": "json-pointer",
        "patches": [],
        "proprietary": true,
        "publicationTime": "2020-10-05T16:18:46.808225Z",
        "references": [
          {
            "title": "GitHub PR",
            "url": "https://github.com/manuelstofer/json-pointer/pull/34/files"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Prototype Pollution",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "<0.6.1"
          ]
        },
        "from": [
          "@wso2apim/publisher@4.0.0",
          "@asyncapi/react-component@0.19.2",
          "openapi-sampler@1.0.0-beta.15",
          "json-pointer@0.6.0"
        ],
        "upgradePath": [
          false,
          "@asyncapi/react-component@0.19.2",
          "openapi-sampler@1.0.0",
          "json-pointer@0.6.1"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "json-pointer",
        "version": "0.6.0",
        "severityWithCritical": "medium"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
        "alternativeIds": [],
        "creationTime": "2020-10-16T16:48:40.985673Z",
        "credit": [
          "Liyuan Chen"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `toNumber`, `trim` and `trimEnd` functions.\r\n\r\n### POC\r\n```\r\nvar lo = require('lodash');\r\n\r\nfunction build_blank (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\n\r\nvar s = build_blank(50000)\r\nvar time0 = Date.now();\r\nlo.trim(s)\r\nvar time_cost0 = Date.now() - time0;\r\nconsole.log(\"time_cost0: \" + time_cost0)\r\n\r\nvar time1 = Date.now();\r\nlo.toNumber(s)\r\nvar time_cost1 = Date.now() - time1;\r\nconsole.log(\"time_cost1: \" + time_cost1)\r\n\r\nvar time2 = Date.now();\r\nlo.trimEnd(s)\r\nvar time_cost2 = Date.now() - time2;\r\nconsole.log(\"time_cost2: \" + time_cost2)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a)\n- [GitHub Fix PR](https://github.com/lodash/lodash/pull/5065)\n",
        "disclosureTime": "2020-10-16T16:47:34Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [
          "4.17.21"
        ],
        "id": "SNYK-JS-LODASH-1018905",
        "identifiers": {
          "CWE": [
            "CWE-400"
          ],
          "CVE": [
            "CVE-2020-28500"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2022-04-05T12:26:11.286253Z",
        "moduleName": "lodash",
        "packageManager": "npm",
        "packageName": "lodash",
        "patches": [],
        "proprietary": true,
        "publicationTime": "2021-02-15T11:50:49Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a"
          },
          {
            "title": "GitHub Fix PR",
            "url": "https://github.com/lodash/lodash/pull/5065"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Regular Expression Denial of Service (ReDoS)",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "<4.17.21"
          ]
        },
        "from": [
          "@wso2apim/publisher@4.0.0",
          "swagger-client@3.12.0",
          "lodash@4.17.20"
        ],
        "upgradePath": [
          false,
          "swagger-client@3.12.0",
          "lodash@4.17.21"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "lodash",
        "version": "4.17.20",
        "severityWithCritical": "medium"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C",
        "alternativeIds": [],
        "creationTime": "2020-11-17T14:07:17.048472Z",
        "credit": [
          "Marc Hassan"
        ],
        "cvssScore": 7.2,
        "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Command Injection via `template`.\r\n\r\n### PoC\r\n```js\r\nvar _ = require('lodash');\r\n\r\n_.template('', { variable: '){console.log(process.env)}; with(obj' })()\r\n```\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c)\n- [Vulnerable Code](https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js#L14851)\n",
        "disclosureTime": "2020-11-17T13:02:10Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [
          "4.17.21"
        ],
        "id": "SNYK-JS-LODASH-1040724",
        "identifiers": {
          "CWE": [
            "CWE-78"
          ],
          "GHSA": [
            "GHSA-35jh-r3h4-6jhm"
          ],
          "CVE": [
            "CVE-2021-23337"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2022-04-05T12:28:18.096614Z",
        "moduleName": "lodash",
        "packageManager": "npm",
        "packageName": "lodash",
        "patches": [],
        "proprietary": true,
        "publicationTime": "2021-02-15T11:50:50Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c"
          },
          {
            "title": "Vulnerable Code",
            "url": "https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js%23L14851"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Command Injection",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "<4.17.21"
          ]
        },
        "from": [
          "@wso2apim/publisher@4.0.0",
          "swagger-client@3.12.0",
          "lodash@4.17.20"
        ],
        "upgradePath": [
          false,
          "swagger-client@3.12.0",
          "lodash@4.17.21"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "lodash",
        "version": "4.17.20",
        "severityWithCritical": "high"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
        "alternativeIds": [],
        "creationTime": "2019-06-19T12:04:21.040000Z",
        "credit": [
          "Snyk Security Team"
        ],
        "cvssScore": 7.3,
        "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The function `defaultsDeep` could be tricked into adding or modifying properties of `Object.prototype` using a `constructor` payload.\r\n\r\n## PoC by Snyk\r\n```\r\nconst mergeFn = require('lodash').defaultsDeep;\r\nconst payload = '{\"constructor\": {\"prototype\": {\"a0\": true}}}'\r\n\r\nfunction check() {\r\n    mergeFn({}, JSON.parse(payload));\r\n    if (({})[`a0`] === true) {\r\n        console.log(`Vulnerable to Prototype Pollution via ${payload}`);\r\n    }\r\n  }\r\n\r\ncheck();\r\n```\r\n\r\nFor more information, check out our [blog post](https://snyk.io/blog/snyk-research-team-discovers-severe-prototype-pollution-security-vulnerabilities-affecting-all-versions-of-lodash/)\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.12 or higher.\n## References\n- [GitHub Issue](https://github.com/lodash/lodash/issues/4348)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4336)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4355)\n- [GitHub PR](https://github.com/sailshq/lodash/pull/1)\n- [Node Security Advisory](https://www.npmjs.com/advisories/1065)\n- [Snyk Blog](https://snyk.io/blog/snyk-research-team-discovers-severe-prototype-pollution-security-vulnerabilities-affecting-all-versions-of-lodash/)\n",
        "disclosureTime": "2019-06-19T11:45:02Z",
        "exploit": "Proof of Concept",
        "functions": [
          {
            "functionId": {
              "filePath": "lodash.js",
              "className": null,
              "functionName": "runInContext.customDefaultsMerge"
            },
            "version": [
              ">=4.17.3 <4.17.12"
            ]
          }
        ],
        "fixedIn": [
          "4.17.12"
        ],
        "id": "SNYK-JS-LODASH-450202",
        "identifiers": {
          "CWE": [
            "CWE-400"
          ],
          "NSP": [
            "1065"
          ],
          "CVE": [
            "CVE-2019-10744"
          ],
          "GHSA": [
            "GHSA-jf85-cpcp-j695"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2022-04-05T12:25:20.940478Z",
        "moduleName": "lodash",
        "packageManager": "npm",
        "packageName": "lodash",
        "patches": [
          {
            "comments": [],
            "id": "patch:SNYK-JS-LODASH-450202:0",
            "modificationTime": "2019-12-03T11:40:45.719849Z",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/lodash/20190702/lodash_20190702_0_0_1f8ea07746963a535385a5befc19fa687a627d2b.patch"
            ],
            "version": "=4.17.11"
          }
        ],
        "proprietary": true,
        "publicationTime": "2019-07-02T11:45:01Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/lodash/lodash/issues/4348"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/lodash/lodash/pull/4336"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/lodash/lodash/pull/4355"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/sailshq/lodash/pull/1"
          },
          {
            "title": "Node Security Advisory",
            "url": "https://www.npmjs.com/advisories/1065"
          },
          {
            "title": "Snyk Blog",
            "url": "https://snyk.io/blog/snyk-research-team-discovers-severe-prototype-pollution-security-vulnerabilities-affecting-all-versions-of-lodash/"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Prototype Pollution",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [
          {
            "functionId": {
              "filePath": "lodash.js",
              "functionName": "runInContext.customDefaultsMerge"
            },
            "version": [
              ">=4.17.3 <4.17.12"
            ]
          }
        ],
        "semver": {
          "vulnerable": [
            "<4.17.12"
          ]
        },
        "from": [
          "@wso2apim/publisher@4.0.0",
          "babel-plugin-formatjs@9.1.3",
          "@types/babel__core@7.1.12",
          "@types/babel__traverse@7.0.7",
          "@babel/types@7.4.4",
          "lodash@4.17.11"
        ],
        "upgradePath": [
          false,
          "babel-plugin-formatjs@9.1.3",
          "@types/babel__core@7.1.12",
          "@types/babel__traverse@7.0.7",
          "@babel/types@7.4.4",
          "lodash@4.17.12"
        ],
        "isUpgradable": true,
        "isPatchable": true,
        "isPinnable": false,
        "isRuntime": false,
        "name": "lodash",
        "version": "4.17.11",
        "severityWithCritical": "high"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
        "alternativeIds": [],
        "creationTime": "2020-08-21T12:52:58.443440Z",
        "credit": [
          "awarau"
        ],
        "cvssScore": 7.3,
        "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `setWith` and `set` functions.\r\n\r\n## PoC by awarau\r\n* Create a JS file with this contents:\r\n```\r\nlod = require('lodash')\r\nlod.setWith({}, \"__proto__[test]\", \"123\")\r\nlod.set({}, \"__proto__[test2]\", \"456\")\r\nconsole.log(Object.prototype)\r\n```\r\n* Execute it with `node`\r\n* Observe that `test` and `test2` is now in the `Object.prototype`.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.17 or higher.\n## References\n- [HackerOne Report](https://hackerone.com/reports/864701)\n",
        "disclosureTime": "2020-08-21T10:34:29Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [
          "4.17.17"
        ],
        "id": "SNYK-JS-LODASH-608086",
        "identifiers": {
          "CWE": [
            "CWE-400"
          ],
          "CVE": []
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2022-05-25T11:18:25.335427Z",
        "moduleName": "lodash",
        "packageManager": "npm",
        "packageName": "lodash",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2020-08-21T12:53:03Z",
        "references": [
          {
            "title": "HackerOne Report",
            "url": "https://hackerone.com/reports/864701"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Prototype Pollution",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "<4.17.17"
          ]
        },
        "from": [
          "@wso2apim/publisher@4.0.0",
          "babel-plugin-formatjs@9.1.3",
          "@types/babel__core@7.1.12",
          "@types/babel__traverse@7.0.7",
          "@babel/types@7.4.4",
          "lodash@4.17.11"
        ],
        "upgradePath": [
          false,
          "babel-plugin-formatjs@9.1.3",
          "@types/babel__core@7.1.12",
          "@types/babel__traverse@7.0.7",
          "@babel/types@7.4.4",
          "lodash@4.17.17"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "lodash",
        "version": "4.17.11",
        "severityWithCritical": "high"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P",
        "alternativeIds": [],
        "creationTime": "2019-02-27T08:49:26.109000Z",
        "credit": [
          "asgerf"
        ],
        "cvssScore": 7.3,
        "description": "## Overview\n[lodash.merge](https://www.npmjs.com/package/lodash.merge) is a Lodash method _.merge exported as a Node.js module.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The functions `merge`, `mergeWith`, and `defaultsDeep` could be tricked into adding or modifying properties of `Object.prototype`. This is due to an incomplete fix to `CVE-2018-3721`.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash.merge` to version 4.6.2 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/90e6199a161b6445b01454517b40ef65ebecd2ad)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4337)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/1066)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/1068)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/1071)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/782)\n- [POC: HackerOne Report](https://hackerone.com/reports/380873)\n",
        "disclosureTime": "2018-08-31T18:21:00Z",
        "exploit": "Proof of Concept",
        "functions": [
          {
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "merge"
            },
            "version": [
              ">=2.0.0 <3.0.0"
            ]
          },
          {
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "baseMerge"
            },
            "version": [
              ">=3.0.0 <4.6.1"
            ]
          },
          {
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "baseMergeDeep"
            },
            "version": [
              ">=3.0.0 <4.6.1"
            ]
          },
          {
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "safeGet"
            },
            "version": [
              ">4.6.0 <=4.6.1"
            ]
          }
        ],
        "fixedIn": [
          "4.6.2"
        ],
        "id": "SNYK-JS-LODASHMERGE-173732",
        "identifiers": {
          "CWE": [
            "CWE-400"
          ],
          "NSP": [
            "782",
            "1066",
            "1068",
            "1071"
          ],
          "CVE": [
            "CVE-2018-16487"
          ],
          "GHSA": [
            "GHSA-4xc9-xhrj-v574"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2022-04-05T12:27:17.510305Z",
        "moduleName": "lodash.merge",
        "packageManager": "npm",
        "packageName": "lodash.merge",
        "patches": [],
        "proprietary": true,
        "publicationTime": "2019-02-01T18:21:00Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/lodash/lodash/commit/90e6199a161b6445b01454517b40ef65ebecd2ad"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/lodash/lodash/pull/4337"
          },
          {
            "title": "NPM Security Advisory",
            "url": "https://www.npmjs.com/advisories/1066"
          },
          {
            "title": "NPM Security Advisory",
            "url": "https://www.npmjs.com/advisories/1068"
          },
          {
            "title": "NPM Security Advisory",
            "url": "https://www.npmjs.com/advisories/1071"
          },
          {
            "title": "NPM Security Advisory",
            "url": "https://www.npmjs.com/advisories/782"
          },
          {
            "title": "POC: HackerOne Report",
            "url": "https://hackerone.com/reports/380873"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Prototype Pollution",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [
          {
            "functionId": {
              "filePath": "index.js",
              "functionName": "merge"
            },
            "version": [
              ">=2.0.0 <3.0.0"
            ]
          },
          {
            "functionId": {
              "filePath": "index.js",
              "functionName": "baseMerge"
            },
            "version": [
              ">=3.0.0 <4.6.1"
            ]
          },
          {
            "functionId": {
              "filePath": "index.js",
              "functionName": "baseMergeDeep"
            },
            "version": [
              ">=3.0.0 <4.6.1"
            ]
          },
          {
            "functionId": {
              "filePath": "index.js",
              "functionName": "safeGet"
            },
            "version": [
              ">4.6.0 <=4.6.1"
            ]
          }
        ],
        "semver": {
          "vulnerable": [
            "<4.6.2"
          ]
        },
        "from": [
          "@wso2apim/publisher@4.0.0",
          "react-safe-html@0.6.1",
          "cheerio@0.22.0",
          "lodash.merge@4.6.1"
        ],
        "upgradePath": [
          false,
          "react-safe-html@0.6.1",
          "cheerio@0.22.0",
          "lodash.merge@4.6.2"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "lodash.merge",
        "version": "4.6.1",
        "severityWithCritical": "high"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L/E:P",
        "alternativeIds": [],
        "creationTime": "2019-02-27T12:37:39.476000Z",
        "credit": [
          "Olivier Arteau (HoLyVieR)"
        ],
        "cvssScore": 6.3,
        "description": "## Overview\n[lodash.merge](https://www.npmjs.com/package/lodash.merge) is a Lodash method _.merge exported as a Node.js module.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The utilities function allow modification of the `Object` prototype. If an attacker can control part of the structure passed to this function, they could add or modify an existing property.  \r\n\r\n## PoC by Olivier Arteau (HoLyVieR)\r\n```js\r\nvar _= require('lodash');\r\nvar malicious_payload = '{\"__proto__\":{\"oops\":\"It works !\"}}';\r\n\r\nvar a = {};\r\nconsole.log(\"Before : \" + a.oops);\r\n_.merge({}, JSON.parse(malicious_payload));\r\nconsole.log(\"After : \" + a.oops);\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash.merge` to version 4.6.2 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/d8e069cc3410082e44eb18fcf8e7f3d08ebe1d4a)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4337)\n- [HackerOne Report](https://hackerone.com/reports/310443)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/1067)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/1069)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/1070)\n",
        "disclosureTime": "2018-01-30T22:28:27Z",
        "exploit": "Proof of Concept",
        "functions": [
          {
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "merge"
            },
            "version": [
              ">=2.0.0 <3.0.0"
            ]
          },
          {
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "baseMerge"
            },
            "version": [
              ">=3.0.0 <4.6.1"
            ]
          },
          {
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "baseMergeDeep"
            },
            "version": [
              ">=3.0.0 <4.6.1"
            ]
          },
          {
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "safeGet"
            },
            "version": [
              ">4.6.0 <=4.6.1"
            ]
          }
        ],
        "fixedIn": [
          "4.6.2"
        ],
        "id": "SNYK-JS-LODASHMERGE-173733",
        "identifiers": {
          "CWE": [
            "CWE-400"
          ],
          "NSP": [
            "577",
            "1067",
            "1069",
            "1070"
          ],
          "CVE": [
            "CVE-2018-3721"
          ],
          "GHSA": [
            "GHSA-fvqr-27wr-82fm",
            "GHSA-5947-m4fg-xhqg",
            "GHSA-46fh-8fc5-xcwx",
            "GHSA-2m96-9w4j-wgv7"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2022-04-05T12:26:34.848392Z",
        "moduleName": "lodash.merge",
        "packageManager": "npm",
        "packageName": "lodash.merge",
        "patches": [],
        "proprietary": true,
        "publicationTime": "2018-02-14T13:22:50Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/lodash/lodash/commit/d8e069cc3410082e44eb18fcf8e7f3d08ebe1d4a"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/lodash/lodash/pull/4337"
          },
          {
            "title": "HackerOne Report",
            "url": "https://hackerone.com/reports/310443"
          },
          {
            "title": "NPM Security Advisory",
            "url": "https://www.npmjs.com/advisories/1067"
          },
          {
            "title": "NPM Security Advisory",
            "url": "https://www.npmjs.com/advisories/1069"
          },
          {
            "title": "NPM Security Advisory",
            "url": "https://www.npmjs.com/advisories/1070"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Prototype Pollution",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [
          {
            "functionId": {
              "filePath": "index.js",
              "functionName": "merge"
            },
            "version": [
              ">=2.0.0 <3.0.0"
            ]
          },
          {
            "functionId": {
              "filePath": "index.js",
              "functionName": "baseMerge"
            },
            "version": [
              ">=3.0.0 <4.6.1"
            ]
          },
          {
            "functionId": {
              "filePath": "index.js",
              "functionName": "baseMergeDeep"
            },
            "version": [
              ">=3.0.0 <4.6.1"
            ]
          },
          {
            "functionId": {
              "filePath": "index.js",
              "functionName": "safeGet"
            },
            "version": [
              ">4.6.0 <=4.6.1"
            ]
          }
        ],
        "semver": {
          "vulnerable": [
            "<4.6.2"
          ]
        },
        "from": [
          "@wso2apim/publisher@4.0.0",
          "react-safe-html@0.6.1",
          "cheerio@0.22.0",
          "lodash.merge@4.6.1"
        ],
        "upgradePath": [
          false,
          "react-safe-html@0.6.1",
          "cheerio@0.22.0",
          "lodash.merge@4.6.2"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "lodash.merge",
        "version": "4.6.1",
        "severityWithCritical": "medium"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
        "alternativeIds": [],
        "creationTime": "2022-03-18T13:02:08.840039Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 3.7,
        "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution due to a missing handler to `Function.prototype`.\r\n\r\n**Notes:** \r\n\r\n- This vulnerability is a bypass to [CVE-2020-7598](https://security.snyk.io/vuln/SNYK-JS-MINIMIST-559764)\r\n\r\n- The reason for the different CVSS between CVE-2021-44906 to CVE-2020-7598, is that CVE-2020-7598 can pollute objects, while CVE-2021-44906 can pollute only function.\r\n\r\n\r\n## PoC by Snyk\r\n```js\r\nrequire('minimist')('--_.constructor.constructor.prototype.foo bar'.split(' '));\r\nconsole.log((function(){}).foo); // bar\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 1.2.6 or higher.\n## References\n- [Fix Commit](https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d)\n- [GitHub Issue](https://github.com/substack/minimist/issues/164)\n- [Vulnerable Code](https://github.com/substack/minimist/blob/master/index.js#L69)\n",
        "disclosureTime": "2022-03-18T12:24:05Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [
          "1.2.6"
        ],
        "id": "SNYK-JS-MINIMIST-2429795",
        "identifiers": {
          "CWE": [
            "CWE-1321"
          ],
          "SNYK": [
            "SNYK-JS-MINIMIST-559764"
          ],
          "CVE": [
            "CVE-2021-44906"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2022-06-06T12:01:22.204194Z",
        "moduleName": "minimist",
        "packageManager": "npm",
        "packageName": "minimist",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2022-03-21T12:09:35Z",
        "references": [
          {
            "title": "Fix Commit",
            "url": "https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/substack/minimist/issues/164"
          },
          {
            "title": "Vulnerable Code",
            "url": "https://github.com/substack/minimist/blob/master/index.js%23L69"
          }
        ],
        "severity": "low",
        "socialTrendAlert": false,
        "title": "Prototype Pollution",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "<1.2.6"
          ]
        },
        "from": [
          "@wso2apim/publisher@4.0.0",
          "url-loader@0.5.9",
          "loader-utils@1.2.3",
          "json5@1.0.1",
          "minimist@1.2.0"
        ],
        "upgradePath": [
          false,
          "url-loader@0.5.9",
          "loader-utils@1.2.3",
          "json5@1.0.1",
          "minimist@1.2.6"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "minimist",
        "version": "1.2.0",
        "severityWithCritical": "low"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
        "alternativeIds": [],
        "creationTime": "2020-03-11T08:25:47.093051Z",
        "credit": [
          "Snyk Security Team"
        ],
        "cvssScore": 5.6,
        "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The library could be tricked into adding or modifying properties of `Object.prototype` using a `constructor` or `__proto__` payload.\r\n\r\n## PoC by Snyk\r\n```\r\nrequire('minimist')('--__proto__.injected0 value0'.split(' '));\r\nconsole.log(({}).injected0 === 'value0'); // true\r\n\r\nrequire('minimist')('--constructor.prototype.injected1 value1'.split(' '));\r\nconsole.log(({}).injected1 === 'value1'); // true\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 0.2.1, 1.2.3 or higher.\n## References\n- [Command Injection PoC](https://gist.github.com/Kirill89/47feb345b09bf081317f08dd43403a8a)\n- [GitHub Fix Commit #1](https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94)\n- [GitHub Fix Commit #2](https://github.com/substack/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab)\n- [Snyk Research Blog](https://snyk.io/blog/prototype-pollution-minimist/)\n",
        "disclosureTime": "2020-03-10T08:22:24Z",
        "exploit": "Proof of Concept",
        "functions": [
          {
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "setKey"
            },
            "version": [
              "<0.2.1",
              ">=1.0.0 <1.1.1"
            ]
          },
          {
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "module.exports.setKey"
            },
            "version": [
              "<0.2.1",
              ">=1.1.1 <1.2.3"
            ]
          }
        ],
        "fixedIn": [
          "0.2.1",
          "1.2.3"
        ],
        "id": "SNYK-JS-MINIMIST-559764",
        "identifiers": {
          "CWE": [
            "CWE-400"
          ],
          "NSP": [
            "1179"
          ],
          "CVE": [
            "CVE-2020-7598"
          ],
          "GHSA": [
            "GHSA-vh95-rmgr-6w4m"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2020-12-20T09:48:43.878574Z",
        "moduleName": "minimist",
        "packageManager": "npm",
        "packageName": "minimist",
        "patches": [],
        "proprietary": true,
        "publicationTime": "2020-03-11T08:22:19Z",
        "references": [
          {
            "title": "Command Injection PoC",
            "url": "https://gist.github.com/Kirill89/47feb345b09bf081317f08dd43403a8a"
          },
          {
            "title": "GitHub Fix Commit #1",
            "url": "https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94"
          },
          {
            "title": "GitHub Fix Commit #2",
            "url": "https://github.com/substack/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab"
          },
          {
            "title": "Snyk Research Blog",
            "url": "https://snyk.io/blog/prototype-pollution-minimist/"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Prototype Pollution",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [
          {
            "functionId": {
              "filePath": "index.js",
              "functionName": "setKey"
            },
            "version": [
              "<0.2.1",
              ">=1.0.0 <1.1.1"
            ]
          },
          {
            "functionId": {
              "filePath": "index.js",
              "functionName": "module.exports.setKey"
            },
            "version": [
              "<0.2.1",
              ">=1.1.1 <1.2.3"
            ]
          }
        ],
        "semver": {
          "vulnerable": [
            "<0.2.1",
            ">=1.0.0 <1.2.3"
          ]
        },
        "from": [
          "@wso2apim/publisher@4.0.0",
          "url-loader@0.5.9",
          "loader-utils@1.2.3",
          "json5@1.0.1",
          "minimist@1.2.0"
        ],
        "upgradePath": [
          false,
          "url-loader@0.5.9",
          "loader-utils@1.2.3",
          "json5@1.0.1",
          "minimist@1.2.3"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "minimist",
        "version": "1.2.0",
        "severityWithCritical": "medium"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "alternativeIds": [],
        "creationTime": "2021-09-17T14:35:00.993728Z",
        "credit": [
          "Yeting Li"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) when parsing crafted invalid CSS nth-checks, due to the sub-pattern `\\s*(?:([+-]?)\\s*(\\d+))?` in `RE_NTH_ELEMENT` with quantified overlapping adjacency.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `nth-check` to version 2.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/fb55/nth-check/commit/9894c1d2010870c351f66c6f6efcf656e26bb726)\n",
        "disclosureTime": "2021-09-17T14:32:39Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [
          "2.0.1"
        ],
        "id": "SNYK-JS-NTHCHECK-1586032",
        "identifiers": {
          "CWE": [
            "CWE-1333"
          ],
          "CVE": [
            "CVE-2021-3803"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2022-04-13T10:42:22.281450Z",
        "moduleName": "nth-check",
        "packageManager": "npm",
        "packageName": "nth-check",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2021-09-17T15:20:51Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/fb55/nth-check/commit/9894c1d2010870c351f66c6f6efcf656e26bb726"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Regular Expression Denial of Service (ReDoS)",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "<2.0.1"
          ]
        },
        "from": [
          "@wso2apim/publisher@4.0.0",
          "react-safe-html@0.6.1",
          "cheerio@0.22.0",
          "css-select@1.2.0",
          "nth-check@1.0.2"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "nth-check",
        "version": "1.0.2",
        "severityWithCritical": "high"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
        "alternativeIds": [],
        "creationTime": "2021-02-19T16:00:22.449519Z",
        "credit": [
          "Yeting Li"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\n[path-parse](https://www.npmjs.org/package/path-parse) is a Node.js path.parse() ponyfill\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `splitDeviceRe`, `splitTailRe`, and `splitPathRe` regular expressions. ReDoS exhibits polynomial worst-case time complexity.\r\n\r\n### PoC\r\n```\r\nvar pathParse = require('path-parse');\r\nfunction build_attack(n) {\r\n    var ret = \"\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/\"\r\n    }\r\n    return ret + \"◎\";\r\n}\r\n\r\nfor(var i = 1; i <= 5000000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        pathParse(attack_str);\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `path-parse` to version 1.0.7 or higher.\n## References\n- [GitHub Issue 1](https://github.com/jbgutierrez/path-parse/issues/8)\n- [GitHub PR](https://github.com/jbgutierrez/path-parse/pull/10)\n",
        "disclosureTime": "2021-02-19T15:54:01Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [
          "1.0.7"
        ],
        "id": "SNYK-JS-PATHPARSE-1077067",
        "identifiers": {
          "CWE": [
            "CWE-400"
          ],
          "CVE": [
            "CVE-2021-23343"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2021-08-08T13:56:55.024375Z",
        "moduleName": "path-parse",
        "packageManager": "npm",
        "packageName": "path-parse",
        "patches": [],
        "proprietary": true,
        "publicationTime": "2021-05-04T08:38:49Z",
        "references": [
          {
            "title": "GitHub Issue 1",
            "url": "https://github.com/jbgutierrez/path-parse/issues/8"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/jbgutierrez/path-parse/pull/10"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Regular Expression Denial of Service (ReDoS)",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "<1.0.7"
          ]
        },
        "from": [
          "@wso2apim/publisher@4.0.0",
          "react-diff-viewer@3.1.1",
          "emotion@10.0.27",
          "babel-plugin-emotion@10.2.2",
          "babel-plugin-macros@2.8.0",
          "resolve@1.20.0",
          "path-parse@1.0.6"
        ],
        "upgradePath": [
          false,
          "react-diff-viewer@3.1.1",
          "emotion@10.0.27",
          "babel-plugin-emotion@10.2.2",
          "babel-plugin-macros@2.8.0",
          "resolve@1.20.0",
          "path-parse@1.0.7"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "path-parse",
        "version": "1.0.6",
        "severityWithCritical": "medium"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:N/I:N/A:H",
        "alternativeIds": [],
        "creationTime": "2021-06-29T08:27:41.954085Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 7.4,
        "description": "## Overview\n[prismjs](http://prismjs.com/) is a lightweight, robust, elegant syntax highlighting library.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `prism-asciidoc` and `prism-erb` components. When `Prism` is used to highlight untrusted (user-given) text, an attacker can craft a string that will take a very very long time to highlight.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `prismjs` to version 1.24.0 or higher.\n## References\n- [GitHub Commit](https://github.com/PrismJS/prism/commit/d85e30da6755fdbe7f8559f8e75d122297167018)\n- [GitHub PR](https://github.com/PrismJS/prism/pull/2688)\n- [GitHub PR](https://github.com/PrismJS/prism/pull/2774)\n",
        "disclosureTime": "2021-06-29T08:23:20Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "1.24.0"
        ],
        "id": "SNYK-JS-PRISMJS-1314893",
        "identifiers": {
          "CWE": [
            "CWE-400"
          ],
          "GHSA": [
            "GHSA-gj77-59wh-66hg"
          ],
          "CVE": [
            "CVE-2021-32723"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2021-09-15T14:59:56.932644Z",
        "moduleName": "prismjs",
        "packageManager": "npm",
        "packageName": "prismjs",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2021-06-29T15:26:03Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/PrismJS/prism/commit/d85e30da6755fdbe7f8559f8e75d122297167018"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/PrismJS/prism/pull/2688"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/PrismJS/prism/pull/2774"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Regular Expression Denial of Service (ReDoS)",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "<1.24.0"
          ]
        },
        "from": [
          "@wso2apim/publisher@4.0.0",
          "swagger-ui-react@3.45.0",
          "react-syntax-highlighter@15.4.3",
          "refractor@3.3.1",
          "prismjs@1.23.0"
        ],
        "upgradePath": [
          false,
          "swagger-ui-react@3.45.0",
          "react-syntax-highlighter@15.4.3",
          "refractor@3.4.0",
          "prismjs@1.24.0"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "prismjs",
        "version": "1.23.0",
        "severityWithCritical": "high"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "alternativeIds": [],
        "creationTime": "2021-09-15T15:04:24.595227Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n[prismjs](http://prismjs.com/) is a lightweight, robust, elegant syntax highlighting library.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `Prism.languages.markup.comment` regex.\r\n\r\n### PoC\r\n```\r\nvar comment = /<!--[\\s\\S]*?-->/\r\nfor(var i = 1; i <= 50000; i++) {\r\n  var time = Date.now();\r\n  var attack_str = \"\"+\"<!--\".repeat(i*10000)+\"-\"\r\n  comment.test(attack_str)\r\n  var time_taken = Date.now() - time;\r\n  console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_taken+\" ms\")\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `prismjs` to version 1.25.0 or higher.\n## References\n- [GitHub Commit](https://github.com/PrismJS/prism/commit/0ff371bb4775a131634f47d0fe85794c547232f9)\n",
        "disclosureTime": "2021-09-15T14:54:02Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [
          "1.25.0"
        ],
        "id": "SNYK-JS-PRISMJS-1585202",
        "identifiers": {
          "CWE": [
            "CWE-1333"
          ],
          "CVE": [
            "CVE-2021-3801"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2021-09-28T07:13:11.827920Z",
        "moduleName": "prismjs",
        "packageManager": "npm",
        "packageName": "prismjs",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2021-09-15T18:40:52Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/PrismJS/prism/commit/0ff371bb4775a131634f47d0fe85794c547232f9"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Regular Expression Denial of Service (ReDoS)",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "<1.25.0"
          ]
        },
        "from": [
          "@wso2apim/publisher@4.0.0",
          "swagger-ui-react@3.45.0",
          "react-syntax-highlighter@15.4.3",
          "refractor@3.3.1",
          "prismjs@1.23.0"
        ],
        "upgradePath": [
          false,
          "swagger-ui-react@3.45.0",
          "react-syntax-highlighter@15.4.3",
          "refractor@3.5.0",
          "prismjs@1.25.0"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "prismjs",
        "version": "1.23.0",
        "severityWithCritical": "high"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N",
        "alternativeIds": [],
        "creationTime": "2022-02-17T15:13:52.772032Z",
        "credit": [
          "at055612"
        ],
        "cvssScore": 5.4,
        "description": "## Overview\n[prismjs](http://prismjs.com/) is a lightweight, robust, elegant syntax highlighting library.\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS) via the command line plugin which does not properly escape its output, leading to the input text being inserted into the `DOM` as `HTML` code.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `prismjs` to version 1.27.0 or higher.\n## References\n- [GitHub Commit](https://github.com/PrismJS/prism/commit/e002e78c343154e1c0ddf9d6a0bb85689e1a5c7c)\n- [GitHub Issue](https://github.com/PrismJS/prism/issues/3340)\n- [GitHub PR](https://github.com/PrismJS/prism/pull/3341)\n",
        "disclosureTime": "2022-02-17T15:04:56Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "1.27.0"
        ],
        "id": "SNYK-JS-PRISMJS-2404333",
        "identifiers": {
          "CWE": [
            "CWE-79"
          ],
          "CVE": [
            "CVE-2022-23647"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2022-02-20T16:08:17.989934Z",
        "moduleName": "prismjs",
        "packageManager": "npm",
        "packageName": "prismjs",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2022-02-20T16:08:17.988027Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/PrismJS/prism/commit/e002e78c343154e1c0ddf9d6a0bb85689e1a5c7c"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/PrismJS/prism/issues/3340"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/PrismJS/prism/pull/3341"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Cross-site Scripting (XSS)",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            ">=1.14.0 <1.27.0"
          ]
        },
        "from": [
          "@wso2apim/publisher@4.0.0",
          "swagger-ui-react@3.45.0",
          "react-syntax-highlighter@15.4.3",
          "refractor@3.3.1",
          "prismjs@1.23.0"
        ],
        "upgradePath": [
          false,
          "swagger-ui-react@3.45.0",
          "react-syntax-highlighter@15.4.3",
          "refractor@3.6.0",
          "prismjs@1.27.0"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "prismjs",
        "version": "1.23.0",
        "severityWithCritical": "medium"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:N/A:N",
        "alternativeIds": [],
        "creationTime": "2019-07-08T13:18:42.280904Z",
        "credit": [
          "danielw93"
        ],
        "cvssScore": 4.3,
        "description": "## Overview\n\n[quill](https://www.npmjs.com/package/quill) is a modern rich text editor built for compatibility and extensibility.\n\n\nAffected versions of this package are vulnerable to Reverse Tabnabbing via the snow theme. The link has the target attribute set to `_blank` but has no `rel` property. This means that documents containing untrusted links make the page they are embedded in susceptible to tabnabbing.\n\n## Remediation\n\nUpgrade `quill` to version 1.3.7 or higher.\n\n\n## References\n\n- [GitHub Issue](https://github.com/quilljs/quill/issues/2438)\n\n- [GitHub PR](https://github.com/quilljs/quill/pull/2674)\n\n- [GitHub PR](https://github.com/quilljs/quill/pull/2674/files/b2f7b586e1564e43062483eff9fa8111bbc80e32)\n",
        "disclosureTime": "2019-07-06T19:26:01Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "1.3.7"
        ],
        "id": "SNYK-JS-QUILL-451551",
        "identifiers": {
          "CWE": [
            "CWE-1022"
          ],
          "CVE": []
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2020-12-14T14:41:05.559731Z",
        "moduleName": "quill",
        "packageManager": "npm",
        "packageName": "quill",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2019-07-08T13:22:06Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/quilljs/quill/issues/2438"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/quilljs/quill/pull/2674"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/quilljs/quill/pull/2674/files/b2f7b586e1564e43062483eff9fa8111bbc80e32"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Reverse Tabnabbing",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "<1.3.7"
          ]
        },
        "from": [
          "@wso2apim/publisher@4.0.0",
          "react-quill@1.0.0",
          "quill@1.3.6"
        ],
        "upgradePath": [
          false,
          "react-quill@1.0.0",
          "quill@1.3.7"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "quill",
        "version": "1.3.6",
        "severityWithCritical": "medium"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N",
        "alternativeIds": [],
        "creationTime": "2019-08-27T07:43:44.195017Z",
        "credit": [
          "Jonathan Lloyd"
        ],
        "cvssScore": 6.5,
        "description": "## Overview\n[quill](https://www.npmjs.com/package/quill) is a modern rich text editor built for compatibility and extensibility.\n\nAffected versions of this package are vulnerable to Reverse Tabnabbing due to use of `target='_blank'` in anchor tags, allowing attackers to access `window.opener` for the original page when opening links. This is commonly used for phishing attacks.\n## Remediation\nUpgrade `quill` to version 1.3.7 or higher.\n## References\n- [GitHub Issue](https://github.com/quilljs/quill/issues/2438)\n- [GitHub PR](https://github.com/quilljs/quill/pull/2439)\n- [Node Security Advisory](https://www.npmjs.com/advisories/1039)\n",
        "disclosureTime": "2019-07-05T19:03:27Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "1.3.7"
        ],
        "id": "SNYK-JS-QUILL-460312",
        "identifiers": {
          "CWE": [
            "CWE-1022"
          ],
          "NSP": [
            "1039"
          ],
          "CVE": []
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2020-12-14T14:41:10.903349Z",
        "moduleName": "quill",
        "packageManager": "npm",
        "packageName": "quill",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2019-08-27T07:44:19Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/quilljs/quill/issues/2438"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/quilljs/quill/pull/2439"
          },
          {
            "title": "Node Security Advisory",
            "url": "https://www.npmjs.com/advisories/1039"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Reverse Tabnabbing",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "<1.3.7"
          ]
        },
        "from": [
          "@wso2apim/publisher@4.0.0",
          "react-quill@1.0.0",
          "quill@1.3.6"
        ],
        "upgradePath": [
          false,
          "react-quill@1.0.0",
          "quill@1.3.7"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "quill",
        "version": "1.3.6",
        "severityWithCritical": "medium"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:U/RL:O/RC:R",
        "alternativeIds": [],
        "creationTime": "2021-09-03T13:28:34.208880Z",
        "credit": [
          "ready-research"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in `source/trim.js` within variable `ws`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `ramda` to version 0.27.2 or higher.\n## References\n- [Github Commit](https://github.com/ramda/ramda/pull/3212/commits/94d057032c9b3ecf26d9842fbb12c981bda29f4b)\n- [GitHub Commit](https://github.com/ramda/ramda/commit/37af6ae2ca8b94656996dd27fb0a1f208d69134e)\n- [GitHub PR](https://github.com/ramda/ramda/pull/3177)\n",
        "disclosureTime": "2021-09-03T13:26:28Z",
        "exploit": "Unproven",
        "functions": [],
        "fixedIn": [
          "0.27.2"
        ],
        "id": "SNYK-JS-RAMDA-1582370",
        "identifiers": {
          "CWE": [
            "CWE-400"
          ],
          "CVE": []
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2022-01-19T14:54:18.169246Z",
        "moduleName": "ramda",
        "packageManager": "npm",
        "packageName": "ramda",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2021-10-28T15:08:22Z",
        "references": [
          {
            "title": "Github Commit",
            "url": "https://github.com/ramda/ramda/pull/3212/commits/94d057032c9b3ecf26d9842fbb12c981bda29f4b"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/ramda/ramda/commit/37af6ae2ca8b94656996dd27fb0a1f208d69134e"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/ramda/ramda/pull/3177"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Regular Expression Denial of Service (ReDoS)",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "<0.27.2"
          ]
        },
        "from": [
          "@wso2apim/publisher@4.0.0",
          "react-markdown@4.1.0",
          "html-to-react@1.3.4",
          "ramda@0.26.1"
        ],
        "upgradePath": [
          false,
          "react-markdown@4.1.0",
          "html-to-react@1.4.3",
          "ramda@0.27.2"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "ramda",
        "version": "0.26.1",
        "severityWithCritical": "medium"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:C",
        "alternativeIds": [],
        "creationTime": "2020-10-29T10:53:41.363786Z",
        "credit": [
          "Yeting Li",
          "Miguel de Moura"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n[ua-parser-js](https://github.com/faisalman/ua-parser-js) is a lightweight JavaScript-based user-agent string parser.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in multiple regexes (see linked commit for more info).\r\n\r\n## Proof of Concept by Miguel de Moura\r\n``` jsconst ua_parser = require('ua-parser-js');const N_SIZE = 5000;const MALICIOUS_UA = `android;;Trio${' '.repeat(N_SIZE)}buil`;// Trigger ReDoSua_parser(MALICIOUS_UA);```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `ua-parser-js` to version 0.7.23 or higher.\n## References\n- [GitHub Commit](https://github.com/faisalman/ua-parser-js/commit/6d1f26df051ba681463ef109d36c9cf0f7e32b18)\n",
        "disclosureTime": "2020-10-29T10:53:18Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [
          "0.7.23"
        ],
        "id": "SNYK-JS-UAPARSERJS-1023599",
        "identifiers": {
          "CWE": [
            "CWE-400"
          ],
          "CVE": [
            "CVE-2020-7793"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2021-06-21T19:28:47.413445Z",
        "moduleName": "ua-parser-js",
        "packageManager": "npm",
        "packageName": "ua-parser-js",
        "patches": [],
        "proprietary": true,
        "publicationTime": "2020-12-13T15:57:49Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/faisalman/ua-parser-js/commit/6d1f26df051ba681463ef109d36c9cf0f7e32b18"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Regular Expression Denial of Service (ReDoS)",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "<0.7.23"
          ]
        },
        "from": [
          "@wso2apim/publisher@4.0.0",
          "react-tap-event-plugin@2.0.1",
          "fbjs@0.8.17",
          "ua-parser-js@0.7.20"
        ],
        "upgradePath": [
          false,
          "react-tap-event-plugin@2.0.1",
          "fbjs@0.8.17",
          "ua-parser-js@0.7.23"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "ua-parser-js",
        "version": "0.7.20",
        "severityWithCritical": "high"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:R",
        "alternativeIds": [],
        "creationTime": "2021-02-12T14:40:27.714038Z",
        "credit": [
          "Doyensec"
        ],
        "cvssScore": 5.9,
        "description": "## Overview\n[ua-parser-js](https://github.com/faisalman/ua-parser-js) is a lightweight JavaScript-based user-agent string parser.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). Within `src/ua-parser.js`, the browser regex is vulnerable to exponential backtracking.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `ua-parser-js` to version 0.7.24 or higher.\n## References\n- [GitHub Commit](https://github.com/faisalman/ua-parser-js/commit/809439e20e273ce0d25c1d04e111dcf6011eb566)\n- [POC: Potential Exploit](https://gist.github.com/b-c-ds/6941d80d6b4e694df4bc269493b7be76)\n",
        "disclosureTime": "2021-02-12T14:37:57Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [
          "0.7.24"
        ],
        "id": "SNYK-JS-UAPARSERJS-1072471",
        "identifiers": {
          "CWE": [
            "CWE-400"
          ],
          "GHSA": [
            "GHSA-78cj-fxph-m83p"
          ],
          "CVE": [
            "CVE-2021-27292"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2021-09-24T13:25:49.071846Z",
        "moduleName": "ua-parser-js",
        "packageManager": "npm",
        "packageName": "ua-parser-js",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2021-02-12T16:09:40Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/faisalman/ua-parser-js/commit/809439e20e273ce0d25c1d04e111dcf6011eb566"
          },
          {
            "title": "POC: Potential Exploit",
            "url": "https://gist.github.com/b-c-ds/6941d80d6b4e694df4bc269493b7be76"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Regular Expression Denial of Service (ReDoS)",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "<0.7.24"
          ]
        },
        "from": [
          "@wso2apim/publisher@4.0.0",
          "react-tap-event-plugin@2.0.1",
          "fbjs@0.8.17",
          "ua-parser-js@0.7.20"
        ],
        "upgradePath": [
          false,
          "react-tap-event-plugin@2.0.1",
          "fbjs@0.8.17",
          "ua-parser-js@0.7.24"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "ua-parser-js",
        "version": "0.7.20",
        "severityWithCritical": "medium"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:C",
        "alternativeIds": [],
        "creationTime": "2020-09-09T15:30:19.590314Z",
        "credit": [
          "Yeting Li"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n[ua-parser-js](https://github.com/faisalman/ua-parser-js) is a lightweight JavaScript-based user-agent string parser.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the regex for Redmi Phones and Mi Pad Tablets UA.\r\n\r\n### POC by Yeting Li\r\n```\r\nvar blank = \" \";\r\nfor (let i = 1; i < 5000; i++) {\r\nblank = blank + \" \";\r\n}\r\n\r\nstr_mi = \"android1mipad\" + blank + \"!\";\r\nstr_mi = str_mi + +blank + \"!\";\r\nmi = /android.+(mi[s-_]*(?:pad)(?:[s_]*[ws]+))s+build/i;\r\n\r\nvar count_mi = 0;\r\nfor (let i = 0; i < 10; i++) {\r\nvar time = Date.now();\r\nmi.test(str_mi);\r\nvar len = Date.now() - time;\r\ncount_mi = count_mi + len;\r\nconsole.log(\"mi:\" + blank.length + \": \" + len)\r\n}\r\nconsole.log(count_mi / 10);\r\n\r\nstr_redmi = \"android1redminote\" + blank + \"!\";\r\nredmi = /android.+(redmi[s-_]*(?:note)?(?:[s_]*[ws]+))s+build/i;\r\nvar count_redmi = 0;\r\nfor (let i = 0; i < 10; i++) {\r\nvar time = Date.now();\r\nredmi.test(str_redmi);\r\nvar len = Date.now() - time;\r\ncount_redmi = count_redmi + len;\r\nconsole.log(\"redmi:\" + blank.length + \": \" + len)\r\n}\r\nconsole.log(count_redmi / 10);\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `ua-parser-js` to version 0.7.22 or higher.\n## References\n- [GitHub Commit](https://github.com/faisalman/ua-parser-js/commit/233d3bae22a795153a7e6638887ce159c63e557d)\n",
        "disclosureTime": "2020-09-09T15:28:29Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [
          "0.7.22"
        ],
        "id": "SNYK-JS-UAPARSERJS-610226",
        "identifiers": {
          "CWE": [
            "CWE-400"
          ],
          "GHSA": [
            "GHSA-662x-fhqg-9p8v"
          ],
          "CVE": [
            "CVE-2020-7733"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2021-07-06T14:08:20.507448Z",
        "moduleName": "ua-parser-js",
        "packageManager": "npm",
        "packageName": "ua-parser-js",
        "patches": [],
        "proprietary": true,
        "publicationTime": "2020-09-16T14:54:55Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/faisalman/ua-parser-js/commit/233d3bae22a795153a7e6638887ce159c63e557d"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Regular Expression Denial of Service (ReDoS)",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "<0.7.22"
          ]
        },
        "from": [
          "@wso2apim/publisher@4.0.0",
          "react-tap-event-plugin@2.0.1",
          "fbjs@0.8.17",
          "ua-parser-js@0.7.20"
        ],
        "upgradePath": [
          false,
          "react-tap-event-plugin@2.0.1",
          "fbjs@0.8.17",
          "ua-parser-js@0.7.22"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "ua-parser-js",
        "version": "0.7.20",
        "severityWithCritical": "high"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N/E:P",
        "alternativeIds": [],
        "creationTime": "2021-07-26T12:59:09.903181Z",
        "credit": [
          "ready-research"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\n[url-parse](https://www.npmjs.com/package/url-parse) is a Small footprint URL parser that works seamlessly across Node.js and browser environments.\n\nAffected versions of this package are vulnerable to Open Redirect due to improper escaping of slash characters.\n## Remediation\nUpgrade `url-parse` to version 1.5.2 or higher.\n## References\n- [GitHub Commit](https://github.com/unshiftio/url-parse/commit/81ab967889b08112d3356e451bf03e6aa0cbb7e0)\n- [GitHub Issue](https://github.com/unshiftio/url-parse/issues/206)\n- [GitHub PR](https://github.com/unshiftio/url-parse/pull/208)\n",
        "disclosureTime": "2021-07-26T12:57:37Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [
          "1.5.2"
        ],
        "id": "SNYK-JS-URLPARSE-1533425",
        "identifiers": {
          "CWE": [
            "CWE-601"
          ],
          "CVE": [
            "CVE-2021-3664"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2021-07-26T15:23:41.208720Z",
        "moduleName": "url-parse",
        "packageManager": "npm",
        "packageName": "url-parse",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2021-07-26T15:23:41.206700Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/unshiftio/url-parse/commit/81ab967889b08112d3356e451bf03e6aa0cbb7e0"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/unshiftio/url-parse/issues/206"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/unshiftio/url-parse/pull/208"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Open Redirect",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "<1.5.2"
          ]
        },
        "from": [
          "@wso2apim/publisher@4.0.0",
          "swagger-ui-react@3.45.0",
          "url-parse@1.5.1"
        ],
        "upgradePath": [
          false,
          "swagger-ui-react@3.45.0",
          "url-parse@1.5.2"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "url-parse",
        "version": "1.5.1",
        "severityWithCritical": "medium"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:L/A:L/E:P",
        "alternativeIds": [],
        "creationTime": "2022-02-15T10:01:29.002928Z",
        "credit": [
          "ranjit-git"
        ],
        "cvssScore": 6.4,
        "description": "## Overview\n[url-parse](https://www.npmjs.com/package/url-parse) is a Small footprint URL parser that works seamlessly across Node.js and browser environments.\n\nAffected versions of this package are vulnerable to Access Restriction Bypass due to improper parsing process, that may lead to incorrect handling of authentication credentials and hostname, which allows bypass of hostname validation.\r\n\r\n## PoC:\r\n\r\n```js\r\n// PoC.js\r\n var parse = require('url-parse')\r\nvar cc=parse(\"http://admin:password123@@127.0.0.1\")\r\n\r\n//Output:\r\n{ slashes: true,\r\n  protocol: 'http:',\r\n  hash: '',\r\n  query: '',\r\n  pathname: '/',\r\n  auth: 'admin:password123',\r\n  host: '@127.0.0.1',\r\n  port: '',\r\n  hostname: '@127.0.0.1',\r\n  password: 'password123',\r\n  username: 'admin',\r\n  origin: 'http://@127.0.0.1',\r\n  href: 'http://admin:password123@@127.0.0.1/' }\r\n```\n## Remediation\nUpgrade `url-parse` to version 1.5.6 or higher.\n## References\n- [GitHub Commit](https://github.com/unshiftio/url-parse/commit/9be7ee88afd2bb04e4d5a1a8da9a389ac13f8c40)\n- [GitHub PR](https://github.com/unshiftio/url-parse/pull/223)\n",
        "disclosureTime": "2022-02-15T09:53:25Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [
          "1.5.6"
        ],
        "id": "SNYK-JS-URLPARSE-2401205",
        "identifiers": {
          "CWE": [
            "CWE-639"
          ],
          "CVE": [
            "CVE-2022-0512"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2022-02-15T15:27:36.795014Z",
        "moduleName": "url-parse",
        "packageManager": "npm",
        "packageName": "url-parse",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2022-02-15T13:06:08Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/unshiftio/url-parse/commit/9be7ee88afd2bb04e4d5a1a8da9a389ac13f8c40"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/unshiftio/url-parse/pull/223"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Access Restriction Bypass",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "<1.5.6"
          ]
        },
        "from": [
          "@wso2apim/publisher@4.0.0",
          "swagger-ui-react@3.45.0",
          "url-parse@1.5.1"
        ],
        "upgradePath": [
          false,
          "swagger-ui-react@3.45.0",
          "url-parse@1.5.6"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "url-parse",
        "version": "1.5.1",
        "severityWithCritical": "medium"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:C/C:L/I:L/A:N/E:P",
        "alternativeIds": [],
        "creationTime": "2022-02-21T10:47:02.113879Z",
        "credit": [
          "Rohan Sharma"
        ],
        "cvssScore": 6.4,
        "description": "## Overview\n[url-parse](https://www.npmjs.com/package/url-parse) is a Small footprint URL parser that works seamlessly across Node.js and browser environments.\n\nAffected versions of this package are vulnerable to Authorization Bypass via the `hostname` field of a parsed URL, because \"url-parse\" is unable to find the correct hostname when no port number is provided in the URL.\r\n\r\n## PoC:\r\n```js\r\nvar Url = require('url-parse');\r\nvar PAYLOAD = \"http://example.com:\";\r\n\r\nconsole.log(Url(PAYLOAD));\r\n\r\n// Expected hostname: example.com\r\n// Actual hostname by url-parse: example.com:\r\n```\r\n\r\nOutput:\r\n\r\n```\r\n{\r\n  slashes: true,\r\n  protocol: 'http:',\r\n  hash: '',\r\n  query: '',\r\n  pathname: '/',\r\n  auth: '',\r\n  host: 'example.com:',\r\n  port: '',\r\n  hostname: 'example.com:',\r\n  password: '',\r\n  username: '',\r\n  origin: 'http://example.com:',\r\n  href: 'http://example.com:/'\r\n}\r\n```\n## Remediation\nUpgrade `url-parse` to version 1.5.8 or higher.\n## References\n- [GitHub Commit](https://github.com/unshiftio/url-parse/commit/d5c64791ef496ca5459ae7f2176a31ea53b127e5)\n",
        "disclosureTime": "2022-02-21T10:36:50Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [
          "1.5.8"
        ],
        "id": "SNYK-JS-URLPARSE-2407759",
        "identifiers": {
          "CWE": [
            "CWE-285"
          ],
          "CVE": [
            "CVE-2022-0686"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2022-02-21T16:02:45.057937Z",
        "moduleName": "url-parse",
        "packageManager": "npm",
        "packageName": "url-parse",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2022-02-21T16:02:45.055472Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/unshiftio/url-parse/commit/d5c64791ef496ca5459ae7f2176a31ea53b127e5"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Authorization Bypass",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "<1.5.8"
          ]
        },
        "from": [
          "@wso2apim/publisher@4.0.0",
          "swagger-ui-react@3.45.0",
          "url-parse@1.5.1"
        ],
        "upgradePath": [
          false,
          "swagger-ui-react@3.45.0",
          "url-parse@1.5.8"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "url-parse",
        "version": "1.5.1",
        "severityWithCritical": "medium"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:N/E:P",
        "alternativeIds": [],
        "creationTime": "2022-02-21T12:56:54.006952Z",
        "credit": [
          "haxatron"
        ],
        "cvssScore": 8.1,
        "description": "## Overview\n[url-parse](https://www.npmjs.com/package/url-parse) is a Small footprint URL parser that works seamlessly across Node.js and browser environments.\n\nAffected versions of this package are vulnerable to Improper Input Validation due to improper fix of [CVE-2020-8124](https://security.snyk.io/vuln/SNYK-JS-URLPARSE-543307) , it is possible to be exploited via the `\\b` (backspace) character.\r\n\r\n## PoC:\r\n```js\r\nconst parse = require('./index.js')\r\n\r\nurl = parse('\\bhttp://google.com')\r\n\r\nconsole.log(url)\r\n```\r\nOutput:\r\n\r\n```\r\n{\r\n  slashes: false,\r\n  protocol: '',\r\n  hash: '',\r\n  query: '',\r\n  pathname: '\\bhttp://google.com',\r\n  auth: '',\r\n  host: '',\r\n  port: '',\r\n  hostname: '',\r\n  password: '',\r\n  username: '',\r\n  origin: 'null',\r\n  href: '\\bhttp://google.com'\r\n}\r\n```\n## Remediation\nUpgrade `url-parse` to version 1.5.9 or higher.\n## References\n- [GitHub Commit](https://github.com/unshiftio/url-parse/commit/0e3fb542d60ddbf6933f22eb9b1e06e25eaa5b63)\n",
        "disclosureTime": "2022-02-21T12:49:06Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [
          "1.5.9"
        ],
        "id": "SNYK-JS-URLPARSE-2407770",
        "identifiers": {
          "CWE": [
            "CWE-20"
          ],
          "CVE": [
            "CVE-2022-0691"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2022-06-09T15:13:29.620707Z",
        "moduleName": "url-parse",
        "packageManager": "npm",
        "packageName": "url-parse",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2022-02-21T16:02:45Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/unshiftio/url-parse/commit/0e3fb542d60ddbf6933f22eb9b1e06e25eaa5b63"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Improper Input Validation",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "<1.5.9"
          ]
        },
        "from": [
          "@wso2apim/publisher@4.0.0",
          "swagger-ui-react@3.45.0",
          "url-parse@1.5.1"
        ],
        "upgradePath": [
          false,
          "swagger-ui-react@3.45.0",
          "url-parse@1.5.9"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "url-parse",
        "version": "1.5.1",
        "severityWithCritical": "high"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N/E:P",
        "alternativeIds": [],
        "creationTime": "2022-02-24T09:02:19.641584Z",
        "credit": [
          "haxatron"
        ],
        "cvssScore": 6.2,
        "description": "## Overview\n[url-parse](https://www.npmjs.com/package/url-parse) is a Small footprint URL parser that works seamlessly across Node.js and browser environments.\n\nAffected versions of this package are vulnerable to Authorization Bypass Through User-Controlled Key due to incorrect conversion of `@` in the protocol field of the HREF.\r\n\r\n## PoC:\r\n```\r\nparse = require('url-parse')\r\n\r\nconsole.log(parse(\"http:@/127.0.0.1\"))\r\n```\r\nOutput:\r\n\r\n```\r\n{\r\n  slashes: true,\r\n  protocol: 'http:',\r\n  hash: '',\r\n  query: '',\r\n  pathname: '/127.0.0.1',\r\n  auth: '',\r\n  host: '',\r\n  port: '',\r\n  hostname: '',\r\n  password: '',\r\n  username: '',\r\n  origin: 'null',\r\n  href: 'http:///127.0.0.1'\r\n}\r\n```\n## Remediation\nUpgrade `url-parse` to version 1.5.7 or higher.\n## References\n- [GitHub Commit](https://github.com/unshiftio/url-parse/commit/ef45a1355375a8244063793a19059b4f62fc8788)\n- [GitHub PR](https://github.com/unshiftio/url-parse/pull/226)\n",
        "disclosureTime": "2022-02-17T00:00:00Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [
          "1.5.7"
        ],
        "id": "SNYK-JS-URLPARSE-2412697",
        "identifiers": {
          "CWE": [
            "CWE-639"
          ],
          "CVE": [
            "CVE-2022-0639"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2022-02-24T16:08:31.527221Z",
        "moduleName": "url-parse",
        "packageManager": "npm",
        "packageName": "url-parse",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2022-02-24T16:08:31.525302Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/unshiftio/url-parse/commit/ef45a1355375a8244063793a19059b4f62fc8788"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/unshiftio/url-parse/pull/226"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Authorization Bypass Through User-Controlled Key",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "<1.5.7"
          ]
        },
        "from": [
          "@wso2apim/publisher@4.0.0",
          "swagger-ui-react@3.45.0",
          "url-parse@1.5.1"
        ],
        "upgradePath": [
          false,
          "swagger-ui-react@3.45.0",
          "url-parse@1.5.7"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "url-parse",
        "version": "1.5.1",
        "severityWithCritical": "medium"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
        "alternativeIds": [],
        "creationTime": "2021-04-05T12:57:03.048070Z",
        "credit": [
          "Yeting Li"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\n[validator](https://www.npmjs.com/package/validator) is a library of string validators and sanitizers.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `isSlug` function\r\n\r\n### PoC\r\n```\r\nvar validator = require(\"validator\")\r\nfunction build_attack(n) {\r\n\tvar ret = \"111\"\r\n\tfor (var i = 0; i < n; i++) {\r\n\t\tret += \"a\"\r\n\t}\r\n\r\n\treturn ret+\"_\";\r\n}\r\nfor(var i = 1; i <= 50000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n       validator.isSlug(attack_str)\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n   }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `validator` to version 13.6.0 or higher.\n## References\n- [GitHub Commit](https://github.com/tux-tn/validator.js/commit/b21879cf45c05ee11b2d79e612b651bf7b2d93b7#diff-f41087599986e29c3c0dc15b62f1bf96d8aba16fe41f3730e315c84c2c4cb311)\n- [GitHub Issue](https://github.com/validatorjs/validator.js/issues/1596)\n- [GitHubPR - Actual fix](https://github.com/validatorjs/validator.js/pull/1738)\n- [GitHub PR - Initial fix](https://github.com/validatorjs/validator.js/pull/1603)\n",
        "disclosureTime": "2021-04-05T12:54:38Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [
          "13.6.0"
        ],
        "id": "SNYK-JS-VALIDATOR-1090599",
        "identifiers": {
          "CWE": [
            "CWE-400"
          ],
          "CVE": []
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2021-11-02T09:54:37.437536Z",
        "moduleName": "validator",
        "packageManager": "npm",
        "packageName": "validator",
        "patches": [],
        "proprietary": true,
        "publicationTime": "2021-04-26T16:18:45Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/tux-tn/validator.js/commit/b21879cf45c05ee11b2d79e612b651bf7b2d93b7%23diff-f41087599986e29c3c0dc15b62f1bf96d8aba16fe41f3730e315c84c2c4cb311"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/validatorjs/validator.js/issues/1596"
          },
          {
            "title": "GitHubPR - Actual fix",
            "url": "https://github.com/validatorjs/validator.js/pull/1738"
          },
          {
            "title": "GitHub PR - Initial fix",
            "url": "https://github.com/validatorjs/validator.js/pull/1603"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Regular Expression Denial of Service (ReDoS)",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "<13.6.0"
          ]
        },
        "from": [
          "@wso2apim/publisher@4.0.0",
          "@apidevtools/swagger-parser@10.0.2",
          "z-schema@4.2.3",
          "validator@12.2.0"
        ],
        "upgradePath": [
          false,
          "@apidevtools/swagger-parser@10.0.2",
          "z-schema@4.2.4",
          "validator@13.6.0"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "validator",
        "version": "12.2.0",
        "severityWithCritical": "medium"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
        "alternativeIds": [],
        "creationTime": "2021-04-05T12:59:35.520598Z",
        "credit": [
          "Yeting Li"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\n[validator](https://www.npmjs.com/package/validator) is a library of string validators and sanitizers.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `rtrim` function.\r\n\r\n### PoC\r\n```\r\nvar validator = require(\"validator\")\r\nfunction build_attack(n) {\r\n\tvar ret = \"\"\r\n\tfor (var i = 0; i < n; i++) {\r\n\t\tret += \" \"\r\n\t}\r\n\r\n\treturn ret+\"◎\";\r\n}\r\nfor(var i = 1; i <= 50000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n       validator.rtrim(attack_str)\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n   }\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `validator` to version 13.7.0 or higher.\n## References\n- [GitHub Issue](https://github.com/validatorjs/validator.js/issues/1599)\n- [GitHub PR](https://github.com/validatorjs/validator.js/pull/1603)\n- [GitHub PR #2](https://github.com/validatorjs/validator.js/pull/1738)\n",
        "disclosureTime": "2021-04-05T12:43:44Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [
          "13.7.0"
        ],
        "id": "SNYK-JS-VALIDATOR-1090600",
        "identifiers": {
          "CWE": [
            "CWE-400"
          ],
          "CVE": [
            "CVE-2021-3765"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2021-11-04T16:13:50.818043Z",
        "moduleName": "validator",
        "packageManager": "npm",
        "packageName": "validator",
        "patches": [],
        "proprietary": true,
        "publicationTime": "2021-04-26T16:18:44Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/validatorjs/validator.js/issues/1599"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/validatorjs/validator.js/pull/1603"
          },
          {
            "title": "GitHub PR #2",
            "url": "https://github.com/validatorjs/validator.js/pull/1738"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Regular Expression Denial of Service (ReDoS)",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "<13.7.0"
          ]
        },
        "from": [
          "@wso2apim/publisher@4.0.0",
          "@apidevtools/swagger-parser@10.0.2",
          "z-schema@4.2.3",
          "validator@12.2.0"
        ],
        "upgradePath": [
          false,
          "@apidevtools/swagger-parser@10.0.2",
          "z-schema@4.2.4",
          "validator@13.7.0"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "validator",
        "version": "12.2.0",
        "severityWithCritical": "medium"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
        "alternativeIds": [],
        "creationTime": "2021-04-05T13:13:17.588279Z",
        "credit": [
          "Yeting Li"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\n[validator](https://www.npmjs.com/package/validator) is a library of string validators and sanitizers.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `isHSL` function.\r\n\r\n### PoC\r\n```\r\nvar validator = require(\"validator\")\r\nfunction build_attack(n) {\r\n\tvar ret = \"hsla(0\"\r\n\tfor (var i = 0; i < n; i++) {\r\n\t\tret += \" \"\r\n\t}\r\n\r\n\treturn ret+\"◎\";\r\n}\r\nfor(var i = 1; i <= 50000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n       validator.isHSL(attack_str)\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n   }\r\n}\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `validator` to version 13.6.0 or higher.\n## References\n- [GitHub Issue](https://github.com/validatorjs/validator.js/issues/1598)\n- [GitHub PR](https://github.com/validatorjs/validator.js/pull/1651)\n",
        "disclosureTime": "2021-04-05T13:11:19Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [
          "13.6.0"
        ],
        "id": "SNYK-JS-VALIDATOR-1090601",
        "identifiers": {
          "CWE": [
            "CWE-400"
          ],
          "CVE": []
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2021-08-08T13:56:55.041865Z",
        "moduleName": "validator",
        "packageManager": "npm",
        "packageName": "validator",
        "patches": [],
        "proprietary": true,
        "publicationTime": "2021-04-26T16:18:43.450928Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/validatorjs/validator.js/issues/1598"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/validatorjs/validator.js/pull/1651"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Regular Expression Denial of Service (ReDoS)",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "<13.6.0"
          ]
        },
        "from": [
          "@wso2apim/publisher@4.0.0",
          "@apidevtools/swagger-parser@10.0.2",
          "z-schema@4.2.3",
          "validator@12.2.0"
        ],
        "upgradePath": [
          false,
          "@apidevtools/swagger-parser@10.0.2",
          "z-schema@4.2.4",
          "validator@13.6.0"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "validator",
        "version": "12.2.0",
        "severityWithCritical": "medium"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
        "alternativeIds": [],
        "creationTime": "2021-04-05T13:15:56.238780Z",
        "credit": [
          "Yeting Li"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\n[validator](https://www.npmjs.com/package/validator) is a library of string validators and sanitizers.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `isEmail` function.\r\n\r\n### PoC\r\n```\r\nvar validator = require(\"validator\")\r\nfunction build_attack(n) {\r\n\tvar ret = \"\"\r\n\tfor (var i = 0; i < n; i++) {\r\n\t\tret += \"<\"\r\n\t}\r\n\r\n\treturn ret+\"\";\r\n}\r\nfor(var i = 1; i <= 50000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        validator.isEmail(attack_str,{ allow_display_name: true })\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n   }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `validator` to version 13.6.0 or higher.\n## References\n- [GitHub Issue](https://github.com/validatorjs/validator.js/issues/1597)\n- [GitHub PR](https://github.com/validatorjs/validator.js/pull/1651)\n",
        "disclosureTime": "2021-04-05T13:14:43Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [
          "13.6.0"
        ],
        "id": "SNYK-JS-VALIDATOR-1090602",
        "identifiers": {
          "CWE": [
            "CWE-400"
          ],
          "CVE": []
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2021-08-08T13:56:55.044794Z",
        "moduleName": "validator",
        "packageManager": "npm",
        "packageName": "validator",
        "patches": [],
        "proprietary": true,
        "publicationTime": "2021-04-26T16:18:42.989822Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/validatorjs/validator.js/issues/1597"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/validatorjs/validator.js/pull/1651"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Regular Expression Denial of Service (ReDoS)",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "<13.6.0"
          ]
        },
        "from": [
          "@wso2apim/publisher@4.0.0",
          "@apidevtools/swagger-parser@10.0.2",
          "z-schema@4.2.3",
          "validator@12.2.0"
        ],
        "upgradePath": [
          false,
          "@apidevtools/swagger-parser@10.0.2",
          "z-schema@4.2.4",
          "validator@13.6.0"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "validator",
        "version": "12.2.0",
        "severityWithCritical": "medium"
      }
    ],
    "upgrade": {
      "@asyncapi/react-component@0.19.2": {
        "upgradeTo": "@asyncapi/react-component@0.24.20",
        "upgrades": [
          "markdown-it@11.0.1"
        ],
        "vulns": [
          "SNYK-JS-MARKDOWNIT-2331914"
        ]
      },
      "@hapi/hapi@18.4.1": {
        "upgradeTo": "@hapi/hapi@19.0.0",
        "upgrades": [
          "@hapi/statehood@6.1.2"
        ],
        "vulns": [
          "SNYK-JS-HAPISTATEHOOD-2769251"
        ]
      },
      "draft-js@0.10.5": {
        "upgradeTo": "draft-js@0.11.7",
        "upgrades": [
          "node-fetch@1.7.3",
          "node-fetch@1.7.3"
        ],
        "vulns": [
          "SNYK-JS-NODEFETCH-2342118",
          "SNYK-JS-NODEFETCH-674311"
        ]
      },
      "moment@2.24.0": {
        "upgradeTo": "moment@2.29.2",
        "upgrades": [
          "moment@2.24.0"
        ],
        "vulns": [
          "SNYK-JS-MOMENT-2440688"
        ]
      },
      "react-draft-wysiwyg@1.13.2": {
        "upgradeTo": "react-draft-wysiwyg@1.14.6",
        "upgrades": [
          "react-draft-wysiwyg@1.13.2"
        ],
        "vulns": [
          "SNYK-JS-REACTDRAFTWYSIWYG-1251504"
        ]
      },
      "react-markdown@4.1.0": {
        "upgradeTo": "react-markdown@5.0.0",
        "upgrades": [
          "trim@0.0.1"
        ],
        "vulns": [
          "SNYK-JS-TRIM-1017038"
        ]
      },
      "swagger-ui-react@3.45.0": {
        "upgradeTo": "swagger-ui-react@4.7.0",
        "upgrades": [
          "@braintree/sanitize-url@5.0.0"
        ],
        "vulns": [
          "SNYK-JS-BRAINTREESANITIZEURL-2339882"
        ]
      },
      "url-loader@0.5.9": {
        "upgradeTo": "url-loader@0.6.0",
        "upgrades": [
          "mime@1.3.6"
        ],
        "vulns": [
          "npm:mime:20170907"
        ]
      }
    },
    "patch": {
      "SNYK-JS-LODASH-567746": {
        "paths": [
          {
            "react-quill > lodash": {
              "patched": "2022-06-22T06:52:45.019Z"
            }
          },
          {
            "swagger-ui-react > react-redux > lodash": {
              "patched": "2022-06-22T06:52:45.019Z"
            }
          },
          {
            "swagger-ui-react > redux > lodash": {
              "patched": "2022-06-22T06:52:45.019Z"
            }
          },
          {
            "babel-plugin-formatjs > @types/babel__core > @types/babel__generator > @babel/types > lodash": {
              "patched": "2022-06-22T06:52:45.019Z"
            }
          },
          {
            "babel-plugin-formatjs > @types/babel__core > @types/babel__template > @babel/types > lodash": {
              "patched": "2022-06-22T06:52:45.019Z"
            }
          },
          {
            "babel-plugin-formatjs > @types/babel__core > @types/babel__traverse > @babel/types > lodash": {
              "patched": "2022-06-22T06:52:45.019Z"
            }
          }
        ]
      }
    },
    "ignore": {},
    "pin": {}
  },
  "filesystemPolicy": false,
  "filtered": {
    "ignore": [],
    "patch": []
  },
  "uniqueCount": 43,
  "projectName": "@wso2apim/publisher",
  "foundProjectCount": 1,
  "displayTargetFile": "package-lock.json",
  "path": "/home/thayaruban/Desktop/apim-apps/portals/publisher/publisher"
}
